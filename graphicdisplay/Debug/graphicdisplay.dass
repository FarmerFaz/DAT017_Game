
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
};

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup (void) {
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f824 	bl	20000050 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	PORT_MODER = 0x55555555;
20000014:	4b08      	ldr	r3, [pc, #32]	; (20000038 <init_app+0x28>)
20000016:	4a09      	ldr	r2, [pc, #36]	; (2000003c <init_app+0x2c>)
20000018:	601a      	str	r2, [r3, #0]
	
	GPIO_MODER = 0x55005555;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <init_app+0x30>)
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <init_app+0x34>)
2000001e:	601a      	str	r2, [r3, #0]
	GPIO_PUPDR = 0x00AA0000;
20000020:	4b09      	ldr	r3, [pc, #36]	; (20000048 <init_app+0x38>)
20000022:	22aa      	movs	r2, #170	; 0xaa
20000024:	0412      	lsls	r2, r2, #16
20000026:	601a      	str	r2, [r3, #0]
	GPIO_ODR_HIGH &= 0x00FF;
20000028:	4b08      	ldr	r3, [pc, #32]	; (2000004c <init_app+0x3c>)
2000002a:	4a08      	ldr	r2, [pc, #32]	; (2000004c <init_app+0x3c>)
2000002c:	7812      	ldrb	r2, [r2, #0]
2000002e:	b2d2      	uxtb	r2, r2
20000030:	701a      	strb	r2, [r3, #0]
}
20000032:	46c0      	nop			; (mov r8, r8)
20000034:	46bd      	mov	sp, r7
20000036:	bd80      	pop	{r7, pc}
20000038:	40021000 	andmi	r1, r2, r0
2000003c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000040:	40020c00 	andmi	r0, r2, r0, lsl #24
20000044:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000048:	40020c0c 	andmi	r0, r2, ip, lsl #24
2000004c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000050 <main>:

int main(int argc, char **argv) {
20000050:	b590      	push	{r4, r7, lr}
20000052:	b085      	sub	sp, #20
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
20000058:	6039      	str	r1, [r7, #0]
	char c,hspd,vspd;
	POBJECT p = &ball;
2000005a:	4b26      	ldr	r3, [pc, #152]	; (200000f4 <main+0xa4>)
2000005c:	60fb      	str	r3, [r7, #12]
	
	init_app();
2000005e:	f7ff ffd7 	bl	20000010 <init_app>
	graphic_initialize();
20000062:	f000 fa43 	bl	200004ec <graphic_initialize>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
20000066:	f000 fa6c 	bl	20000542 <graphic_clear_screen>
	#endif
	
	p->set_speed(p,4,1);
2000006a:	68fb      	ldr	r3, [r7, #12]
2000006c:	6a1b      	ldr	r3, [r3, #32]
2000006e:	68f8      	ldr	r0, [r7, #12]
20000070:	2201      	movs	r2, #1
20000072:	2104      	movs	r1, #4
20000074:	4798      	blx	r3
	while(1) {
		p->move(p);
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	69db      	ldr	r3, [r3, #28]
2000007a:	68fa      	ldr	r2, [r7, #12]
2000007c:	0010      	movs	r0, r2
2000007e:	4798      	blx	r3
		delay_milli(40);
20000080:	2028      	movs	r0, #40	; 0x28
20000082:	f000 f894 	bl	200001ae <delay_milli>
		c = keyboard();
20000086:	230b      	movs	r3, #11
20000088:	18fc      	adds	r4, r7, r3
2000008a:	f000 fc75 	bl	20000978 <keyboard>
2000008e:	0003      	movs	r3, r0
20000090:	7023      	strb	r3, [r4, #0]
		
		switch(c) {
20000092:	230b      	movs	r3, #11
20000094:	18fb      	adds	r3, r7, r3
20000096:	781b      	ldrb	r3, [r3, #0]
20000098:	2b08      	cmp	r3, #8
2000009a:	d822      	bhi.n	200000e2 <main+0x92>
2000009c:	009a      	lsls	r2, r3, #2
2000009e:	4b16      	ldr	r3, [pc, #88]	; (200000f8 <main+0xa8>)
200000a0:	18d3      	adds	r3, r2, r3
200000a2:	681b      	ldr	r3, [r3, #0]
200000a4:	469f      	mov	pc, r3
			case 6: p->set_speed(p,2,0); break;
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	6a1b      	ldr	r3, [r3, #32]
200000aa:	68f8      	ldr	r0, [r7, #12]
200000ac:	2200      	movs	r2, #0
200000ae:	2102      	movs	r1, #2
200000b0:	4798      	blx	r3
200000b2:	e01e      	b.n	200000f2 <main+0xa2>
			case 4: p->set_speed(p,-2,0); break;
200000b4:	68fb      	ldr	r3, [r7, #12]
200000b6:	6a1b      	ldr	r3, [r3, #32]
200000b8:	2202      	movs	r2, #2
200000ba:	4251      	negs	r1, r2
200000bc:	68f8      	ldr	r0, [r7, #12]
200000be:	2200      	movs	r2, #0
200000c0:	4798      	blx	r3
200000c2:	e016      	b.n	200000f2 <main+0xa2>
			case 2: p->set_speed(p,0,-2); break;
200000c4:	68fb      	ldr	r3, [r7, #12]
200000c6:	6a1b      	ldr	r3, [r3, #32]
200000c8:	2202      	movs	r2, #2
200000ca:	4252      	negs	r2, r2
200000cc:	68f8      	ldr	r0, [r7, #12]
200000ce:	2100      	movs	r1, #0
200000d0:	4798      	blx	r3
200000d2:	e00e      	b.n	200000f2 <main+0xa2>
			case 8: p->set_speed(p,0,2); break;
200000d4:	68fb      	ldr	r3, [r7, #12]
200000d6:	6a1b      	ldr	r3, [r3, #32]
200000d8:	68f8      	ldr	r0, [r7, #12]
200000da:	2202      	movs	r2, #2
200000dc:	2100      	movs	r1, #0
200000de:	4798      	blx	r3
200000e0:	e007      	b.n	200000f2 <main+0xa2>
			case 5: break;
			default: p->set_speed(p,0,0);
200000e2:	68fb      	ldr	r3, [r7, #12]
200000e4:	6a1b      	ldr	r3, [r3, #32]
200000e6:	68f8      	ldr	r0, [r7, #12]
200000e8:	2200      	movs	r2, #0
200000ea:	2100      	movs	r1, #0
200000ec:	4798      	blx	r3
200000ee:	e7c2      	b.n	20000076 <main+0x26>
			case 5: break;
200000f0:	46c0      	nop			; (mov r8, r8)
	while(1) {
200000f2:	e7c0      	b.n	20000076 <main+0x26>
200000f4:	20000a08 	andcs	r0, r0, r8, lsl #20
200000f8:	20000a2c 	andcs	r0, r0, ip, lsr #20

200000fc <delay_250ns>:
#define		COUNTFLAG	*((volatile unsigned int *) (STK_CTRL+0xF))
#define 	STK_LOAD	*((volatile unsigned int *) (SYS_TICK+0x4))
#define 	STK_VAL		*((volatile unsigned int *) (SYS_TICK+0x8))

// delays with 41 clock cycles (42-1, approx 250ns)
void delay_250ns(void) {
200000fc:	b580      	push	{r7, lr}
200000fe:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000100:	4b0c      	ldr	r3, [pc, #48]	; (20000134 <delay_250ns+0x38>)
20000102:	2200      	movs	r2, #0
20000104:	601a      	str	r2, [r3, #0]
	STK_LOAD = 41;	// how many cycles you want to delay with
20000106:	4b0c      	ldr	r3, [pc, #48]	; (20000138 <delay_250ns+0x3c>)
20000108:	2229      	movs	r2, #41	; 0x29
2000010a:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
2000010c:	4b0b      	ldr	r3, [pc, #44]	; (2000013c <delay_250ns+0x40>)
2000010e:	2200      	movs	r2, #0
20000110:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;	// activates timer
20000112:	4b08      	ldr	r3, [pc, #32]	; (20000134 <delay_250ns+0x38>)
20000114:	2205      	movs	r2, #5
20000116:	601a      	str	r2, [r3, #0]
	while(!(COUNTFLAG & 1)) {}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	4b06      	ldr	r3, [pc, #24]	; (20000134 <delay_250ns+0x38>)
2000011c:	681b      	ldr	r3, [r3, #0]
2000011e:	330f      	adds	r3, #15
20000120:	681b      	ldr	r3, [r3, #0]
20000122:	2201      	movs	r2, #1
20000124:	4013      	ands	r3, r2
20000126:	d0f8      	beq.n	2000011a <delay_250ns+0x1e>
	STK_CTRL = 0;
20000128:	4b02      	ldr	r3, [pc, #8]	; (20000134 <delay_250ns+0x38>)
2000012a:	2200      	movs	r2, #0
2000012c:	601a      	str	r2, [r3, #0]
}
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	46bd      	mov	sp, r7
20000132:	bd80      	pop	{r7, pc}
20000134:	e000e010 	and	lr, r0, r0, lsl r0
20000138:	e000e014 	and	lr, r0, r4, lsl r0
2000013c:	e000e018 	and	lr, r0, r8, lsl r0

20000140 <delay_500ns>:

// delays with 83 clock cycles (84-1, approx 500ns)
void delay_500ns() {
20000140:	b580      	push	{r7, lr}
20000142:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000144:	4b0c      	ldr	r3, [pc, #48]	; (20000178 <delay_500ns+0x38>)
20000146:	2200      	movs	r2, #0
20000148:	601a      	str	r2, [r3, #0]
	STK_LOAD = 83;
2000014a:	4b0c      	ldr	r3, [pc, #48]	; (2000017c <delay_500ns+0x3c>)
2000014c:	2253      	movs	r2, #83	; 0x53
2000014e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000150:	4b0b      	ldr	r3, [pc, #44]	; (20000180 <delay_500ns+0x40>)
20000152:	2200      	movs	r2, #0
20000154:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000156:	4b08      	ldr	r3, [pc, #32]	; (20000178 <delay_500ns+0x38>)
20000158:	2205      	movs	r2, #5
2000015a:	601a      	str	r2, [r3, #0]
	while(!(COUNTFLAG & 1)) {}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	4b06      	ldr	r3, [pc, #24]	; (20000178 <delay_500ns+0x38>)
20000160:	681b      	ldr	r3, [r3, #0]
20000162:	330f      	adds	r3, #15
20000164:	681b      	ldr	r3, [r3, #0]
20000166:	2201      	movs	r2, #1
20000168:	4013      	ands	r3, r2
2000016a:	d0f8      	beq.n	2000015e <delay_500ns+0x1e>
	STK_CTRL = 0;
2000016c:	4b02      	ldr	r3, [pc, #8]	; (20000178 <delay_500ns+0x38>)
2000016e:	2200      	movs	r2, #0
20000170:	601a      	str	r2, [r3, #0]
}
20000172:	46c0      	nop			; (mov r8, r8)
20000174:	46bd      	mov	sp, r7
20000176:	bd80      	pop	{r7, pc}
20000178:	e000e010 	and	lr, r0, r0, lsl r0
2000017c:	e000e014 	and	lr, r0, r4, lsl r0
20000180:	e000e018 	and	lr, r0, r8, lsl r0

20000184 <delay_mikro>:

// runs delay_250ns four times per us
void delay_mikro(unsigned int us) {
20000184:	b580      	push	{r7, lr}
20000186:	b084      	sub	sp, #16
20000188:	af00      	add	r7, sp, #0
2000018a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4*us; i++) {
2000018c:	2300      	movs	r3, #0
2000018e:	60fb      	str	r3, [r7, #12]
20000190:	e004      	b.n	2000019c <delay_mikro+0x18>
		delay_250ns();
20000192:	f7ff ffb3 	bl	200000fc <delay_250ns>
	for(int i = 0; i < 4*us; i++) {
20000196:	68fb      	ldr	r3, [r7, #12]
20000198:	3301      	adds	r3, #1
2000019a:	60fb      	str	r3, [r7, #12]
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	009a      	lsls	r2, r3, #2
200001a0:	68fb      	ldr	r3, [r7, #12]
200001a2:	429a      	cmp	r2, r3
200001a4:	d8f5      	bhi.n	20000192 <delay_mikro+0xe>
	}
}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	46bd      	mov	sp, r7
200001aa:	b004      	add	sp, #16
200001ac:	bd80      	pop	{r7, pc}

200001ae <delay_milli>:

// runs delay_mikro 1000 times per ms
void delay_milli(unsigned int ms) {
200001ae:	b580      	push	{r7, lr}
200001b0:	b082      	sub	sp, #8
200001b2:	af00      	add	r7, sp, #0
200001b4:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	
	delay_mikro(1000*ms);
200001b6:	687b      	ldr	r3, [r7, #4]
200001b8:	22fa      	movs	r2, #250	; 0xfa
200001ba:	0092      	lsls	r2, r2, #2
200001bc:	4353      	muls	r3, r2
200001be:	0018      	movs	r0, r3
200001c0:	f7ff ffe0 	bl	20000184 <delay_mikro>
200001c4:	46c0      	nop			; (mov r8, r8)
200001c6:	46bd      	mov	sp, r7
200001c8:	b002      	add	sp, #8
200001ca:	bd80      	pop	{r7, pc}

200001cc <graphic_ctrl_bit_set>:
#define		LCD_BUSY		0x80

typedef unsigned char uint8_t;

// välj den displayen vi vill använda och ettställ de biter som är 1 i x
void graphic_ctrl_bit_set(uint8_t x) {
200001cc:	b580      	push	{r7, lr}
200001ce:	b082      	sub	sp, #8
200001d0:	af00      	add	r7, sp, #0
200001d2:	0002      	movs	r2, r0
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	701a      	strb	r2, [r3, #0]
	PORT_ODR_LOW |= x;
200001d8:	490a      	ldr	r1, [pc, #40]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001da:	4b0a      	ldr	r3, [pc, #40]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001dc:	781b      	ldrb	r3, [r3, #0]
200001de:	b2da      	uxtb	r2, r3
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	4313      	orrs	r3, r2
200001e6:	b2db      	uxtb	r3, r3
200001e8:	700b      	strb	r3, [r1, #0]
	PORT_ODR_LOW &= ~B_SELECT;
200001ea:	4a06      	ldr	r2, [pc, #24]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001ec:	4b05      	ldr	r3, [pc, #20]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	b2db      	uxtb	r3, r3
200001f2:	2104      	movs	r1, #4
200001f4:	438b      	bics	r3, r1
200001f6:	b2db      	uxtb	r3, r3
200001f8:	7013      	strb	r3, [r2, #0]
}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	46bd      	mov	sp, r7
200001fe:	b002      	add	sp, #8
20000200:	bd80      	pop	{r7, pc}
20000202:	46c0      	nop			; (mov r8, r8)
20000204:	40021014 	andmi	r1, r2, r4, lsl r0

20000208 <graphic_ctrl_bit_clear>:

// välj den displayen vi vill använda och nollställ de biter som är 1 i x
void graphic_ctrl_bit_clear(uint8_t x) {
20000208:	b580      	push	{r7, lr}
2000020a:	b082      	sub	sp, #8
2000020c:	af00      	add	r7, sp, #0
2000020e:	0002      	movs	r2, r0
20000210:	1dfb      	adds	r3, r7, #7
20000212:	701a      	strb	r2, [r3, #0]
	PORT_ODR_LOW &= ~x;
20000214:	490c      	ldr	r1, [pc, #48]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000218:	781b      	ldrb	r3, [r3, #0]
2000021a:	b2db      	uxtb	r3, r3
2000021c:	b25b      	sxtb	r3, r3
2000021e:	1dfa      	adds	r2, r7, #7
20000220:	7812      	ldrb	r2, [r2, #0]
20000222:	b252      	sxtb	r2, r2
20000224:	43d2      	mvns	r2, r2
20000226:	b252      	sxtb	r2, r2
20000228:	4013      	ands	r3, r2
2000022a:	b25b      	sxtb	r3, r3
2000022c:	b2db      	uxtb	r3, r3
2000022e:	700b      	strb	r3, [r1, #0]
	PORT_ODR_LOW &= ~B_SELECT;
20000230:	4a05      	ldr	r2, [pc, #20]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000232:	4b05      	ldr	r3, [pc, #20]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	b2db      	uxtb	r3, r3
20000238:	2104      	movs	r1, #4
2000023a:	438b      	bics	r3, r1
2000023c:	b2db      	uxtb	r3, r3
2000023e:	7013      	strb	r3, [r2, #0]
}
20000240:	46c0      	nop			; (mov r8, r8)
20000242:	46bd      	mov	sp, r7
20000244:	b002      	add	sp, #8
20000246:	bd80      	pop	{r7, pc}
20000248:	40021014 	andmi	r1, r2, r4, lsl r0

2000024c <graphic_ctrl_bit_set_clear>:

void graphic_ctrl_bit_set_clear(uint8_t setx, uint8_t clearx) {
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
20000258:	1dbb      	adds	r3, r7, #6
2000025a:	1c0a      	adds	r2, r1, #0
2000025c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(setx);
2000025e:	1dfb      	adds	r3, r7, #7
20000260:	781b      	ldrb	r3, [r3, #0]
20000262:	0018      	movs	r0, r3
20000264:	f7ff ffb2 	bl	200001cc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(clearx);
20000268:	1dbb      	adds	r3, r7, #6
2000026a:	781b      	ldrb	r3, [r3, #0]
2000026c:	0018      	movs	r0, r3
2000026e:	f7ff ffcb 	bl	20000208 <graphic_ctrl_bit_clear>
}
20000272:	46c0      	nop			; (mov r8, r8)
20000274:	46bd      	mov	sp, r7
20000276:	b002      	add	sp, #8
20000278:	bd80      	pop	{r7, pc}

2000027a <select_controller>:

// konfigurera CS-signalerna
void select_controller(uint8_t controller) {
2000027a:	b580      	push	{r7, lr}
2000027c:	b082      	sub	sp, #8
2000027e:	af00      	add	r7, sp, #0
20000280:	0002      	movs	r2, r0
20000282:	1dfb      	adds	r3, r7, #7
20000284:	701a      	strb	r2, [r3, #0]
	switch(controller) {
20000286:	1dfb      	adds	r3, r7, #7
20000288:	781b      	ldrb	r3, [r3, #0]
2000028a:	2b08      	cmp	r3, #8
2000028c:	d00c      	beq.n	200002a8 <select_controller+0x2e>
2000028e:	dc02      	bgt.n	20000296 <select_controller+0x1c>
20000290:	2b00      	cmp	r3, #0
20000292:	d005      	beq.n	200002a0 <select_controller+0x26>
			break;
		case (B_CS1 | B_CS2):
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
			break;
	}
}
20000294:	e016      	b.n	200002c4 <select_controller+0x4a>
	switch(controller) {
20000296:	2b10      	cmp	r3, #16
20000298:	d00b      	beq.n	200002b2 <select_controller+0x38>
2000029a:	2b18      	cmp	r3, #24
2000029c:	d00e      	beq.n	200002bc <select_controller+0x42>
}
2000029e:	e011      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_clear(B_CS1 | B_CS2);
200002a0:	2018      	movs	r0, #24
200002a2:	f7ff ffb1 	bl	20000208 <graphic_ctrl_bit_clear>
			break;
200002a6:	e00d      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_set_clear(B_CS1, B_CS2);
200002a8:	2110      	movs	r1, #16
200002aa:	2008      	movs	r0, #8
200002ac:	f7ff ffce 	bl	2000024c <graphic_ctrl_bit_set_clear>
			break;
200002b0:	e008      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_set_clear(B_CS2, B_CS1);
200002b2:	2108      	movs	r1, #8
200002b4:	2010      	movs	r0, #16
200002b6:	f7ff ffc9 	bl	2000024c <graphic_ctrl_bit_set_clear>
			break;
200002ba:	e003      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
200002bc:	2018      	movs	r0, #24
200002be:	f7ff ff85 	bl	200001cc <graphic_ctrl_bit_set>
			break;
200002c2:	46c0      	nop			; (mov r8, r8)
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b002      	add	sp, #8
200002ca:	bd80      	pop	{r7, pc}

200002cc <graphic_wait_ready>:

// Undersöker BUSY-flaggan (B7) och returnerar först då denna blivit 0
void graphic_wait_ready(void) {
200002cc:	b580      	push	{r7, lr}
200002ce:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200002d0:	2040      	movs	r0, #64	; 0x40
200002d2:	f7ff ff99 	bl	20000208 <graphic_ctrl_bit_clear>
	PORT_MODER = 0x00005555;
200002d6:	4b12      	ldr	r3, [pc, #72]	; (20000320 <graphic_wait_ready+0x54>)
200002d8:	4a12      	ldr	r2, [pc, #72]	; (20000324 <graphic_wait_ready+0x58>)
200002da:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set_clear(B_RW, B_RS);
200002dc:	2101      	movs	r1, #1
200002de:	2002      	movs	r0, #2
200002e0:	f7ff ffb4 	bl	2000024c <graphic_ctrl_bit_set_clear>
	delay_500ns();
200002e4:	f7ff ff2c 	bl	20000140 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200002e8:	2040      	movs	r0, #64	; 0x40
200002ea:	f7ff ff6f 	bl	200001cc <graphic_ctrl_bit_set>
		delay_500ns();
200002ee:	f7ff ff27 	bl	20000140 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200002f2:	2040      	movs	r0, #64	; 0x40
200002f4:	f7ff ff88 	bl	20000208 <graphic_ctrl_bit_clear>
		delay_500ns();
200002f8:	f7ff ff22 	bl	20000140 <delay_500ns>
		if ((PORT_IDR_HIGH & LCD_BUSY) == 0) 
200002fc:	4b0a      	ldr	r3, [pc, #40]	; (20000328 <graphic_wait_ready+0x5c>)
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	b2db      	uxtb	r3, r3
20000302:	b25b      	sxtb	r3, r3
20000304:	2b00      	cmp	r3, #0
20000306:	da00      	bge.n	2000030a <graphic_wait_ready+0x3e>
		graphic_ctrl_bit_set(B_E);
20000308:	e7ee      	b.n	200002e8 <graphic_wait_ready+0x1c>
			break;	
2000030a:	46c0      	nop			; (mov r8, r8)
	}
	graphic_ctrl_bit_set(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff ff5d 	bl	200001cc <graphic_ctrl_bit_set>
	PORT_MODER = 0x55555555;
20000312:	4b03      	ldr	r3, [pc, #12]	; (20000320 <graphic_wait_ready+0x54>)
20000314:	4a05      	ldr	r2, [pc, #20]	; (2000032c <graphic_wait_ready+0x60>)
20000316:	601a      	str	r2, [r3, #0]
}
20000318:	46c0      	nop			; (mov r8, r8)
2000031a:	46bd      	mov	sp, r7
2000031c:	bd80      	pop	{r7, pc}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	40021000 	andmi	r1, r2, r0
20000324:	00005555 	andeq	r5, r0, r5, asr r5
20000328:	40021011 	andmi	r1, r2, r1, lsl r0
2000032c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000330 <graphic_read>:

// reads from the graphic display
// waits for screens in  @controller
unsigned char graphic_read(unsigned char controller) {
20000330:	b580      	push	{r7, lr}
20000332:	b084      	sub	sp, #16
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);		// (stop workcycle)
2000033c:	2040      	movs	r0, #64	; 0x40
2000033e:	f7ff ff63 	bl	20000208 <graphic_ctrl_bit_clear>
	PORT_MODER = 0x00005555;			// set ctrl 15-8 to inports, 7-0 to outports
20000342:	4b1b      	ldr	r3, [pc, #108]	; (200003b0 <graphic_read+0x80>)
20000344:	4a1b      	ldr	r2, [pc, #108]	; (200003b4 <graphic_read+0x84>)
20000346:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);	// set reset and read/write bits
20000348:	2003      	movs	r0, #3
2000034a:	f7ff ff3f 	bl	200001cc <graphic_ctrl_bit_set>
	select_controller(controller);		
2000034e:	1dfb      	adds	r3, r7, #7
20000350:	781b      	ldrb	r3, [r3, #0]
20000352:	0018      	movs	r0, r3
20000354:	f7ff ff91 	bl	2000027a <select_controller>
	delay_500ns();
20000358:	f7ff fef2 	bl	20000140 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
2000035c:	2040      	movs	r0, #64	; 0x40
2000035e:	f7ff ff35 	bl	200001cc <graphic_ctrl_bit_set>
	unsigned char rv = PORT_IDR_HIGH;	// read data register
20000362:	4a15      	ldr	r2, [pc, #84]	; (200003b8 <graphic_read+0x88>)
20000364:	230f      	movs	r3, #15
20000366:	18fb      	adds	r3, r7, r3
20000368:	7812      	ldrb	r2, [r2, #0]
2000036a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);		// (stop workycle)
2000036c:	2040      	movs	r0, #64	; 0x40
2000036e:	f7ff ff4b 	bl	20000208 <graphic_ctrl_bit_clear>
	PORT_MODER = 0x55555555;			// set ctrl to outports
20000372:	4b0f      	ldr	r3, [pc, #60]	; (200003b0 <graphic_read+0x80>)
20000374:	4a11      	ldr	r2, [pc, #68]	; (200003bc <graphic_read+0x8c>)
20000376:	601a      	str	r2, [r3, #0]
	
	// wait for screen 1 if reading from screen 1
	if(controller & B_CS1) {	
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	2208      	movs	r2, #8
2000037e:	4013      	ands	r3, r2
20000380:	d004      	beq.n	2000038c <graphic_read+0x5c>
		select_controller(B_CS1);
20000382:	2008      	movs	r0, #8
20000384:	f7ff ff79 	bl	2000027a <select_controller>
		graphic_wait_ready();
20000388:	f7ff ffa0 	bl	200002cc <graphic_wait_ready>
	}
	
	// !! 
	if(controller & B_CS2) {
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	2210      	movs	r2, #16
20000392:	4013      	ands	r3, r2
20000394:	d004      	beq.n	200003a0 <graphic_read+0x70>
		select_controller(B_CS2);
20000396:	2010      	movs	r0, #16
20000398:	f7ff ff6f 	bl	2000027a <select_controller>
		graphic_wait_ready();
2000039c:	f7ff ff96 	bl	200002cc <graphic_wait_ready>
	}
	
	return rv;
200003a0:	230f      	movs	r3, #15
200003a2:	18fb      	adds	r3, r7, r3
200003a4:	781b      	ldrb	r3, [r3, #0]
}
200003a6:	0018      	movs	r0, r3
200003a8:	46bd      	mov	sp, r7
200003aa:	b004      	add	sp, #16
200003ac:	bd80      	pop	{r7, pc}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	40021000 	andmi	r1, r2, r0
200003b4:	00005555 	andeq	r5, r0, r5, asr r5
200003b8:	40021011 	andmi	r1, r2, r1, lsl r0
200003bc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003c0 <graphic_write>:

// writes @value to specified @controller(s)
void graphic_write(uint8_t value, uint8_t controller) {
200003c0:	b580      	push	{r7, lr}
200003c2:	b082      	sub	sp, #8
200003c4:	af00      	add	r7, sp, #0
200003c6:	0002      	movs	r2, r0
200003c8:	1dfb      	adds	r3, r7, #7
200003ca:	701a      	strb	r2, [r3, #0]
200003cc:	1dbb      	adds	r3, r7, #6
200003ce:	1c0a      	adds	r2, r1, #0
200003d0:	701a      	strb	r2, [r3, #0]
	PORT_ODR_HIGH = value;				// set outpins
200003d2:	4a1a      	ldr	r2, [pc, #104]	; (2000043c <graphic_write+0x7c>)
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);		
200003da:	1dbb      	adds	r3, r7, #6
200003dc:	781b      	ldrb	r3, [r3, #0]
200003de:	0018      	movs	r0, r3
200003e0:	f7ff ff4b 	bl	2000027a <select_controller>
	delay_500ns();
200003e4:	f7ff feac 	bl	20000140 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
200003e8:	2040      	movs	r0, #64	; 0x40
200003ea:	f7ff feef 	bl	200001cc <graphic_ctrl_bit_set>
	delay_500ns();						// wait for display to handle outpins' data
200003ee:	f7ff fea7 	bl	20000140 <delay_500ns>
	
	graphic_ctrl_bit_clear(B_E);		// (stop workcycle)
200003f2:	2040      	movs	r0, #64	; 0x40
200003f4:	f7ff ff08 	bl	20000208 <graphic_ctrl_bit_clear>
	
	// wait for screen 1
	if(controller & B_CS1) {
200003f8:	1dbb      	adds	r3, r7, #6
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	2208      	movs	r2, #8
200003fe:	4013      	ands	r3, r2
20000400:	d004      	beq.n	2000040c <graphic_write+0x4c>
		select_controller(B_CS1);
20000402:	2008      	movs	r0, #8
20000404:	f7ff ff39 	bl	2000027a <select_controller>
		graphic_wait_ready();
20000408:	f7ff ff60 	bl	200002cc <graphic_wait_ready>
	}
	// !
	if(controller & B_CS2) {
2000040c:	1dbb      	adds	r3, r7, #6
2000040e:	781b      	ldrb	r3, [r3, #0]
20000410:	2210      	movs	r2, #16
20000412:	4013      	ands	r3, r2
20000414:	d004      	beq.n	20000420 <graphic_write+0x60>
		select_controller(B_CS2);
20000416:	2010      	movs	r0, #16
20000418:	f7ff ff2f 	bl	2000027a <select_controller>
		graphic_wait_ready();
2000041c:	f7ff ff56 	bl	200002cc <graphic_wait_ready>
	}
	
	PORT_ODR_HIGH = 0;					// clear outpins' data
20000420:	4b06      	ldr	r3, [pc, #24]	; (2000043c <graphic_write+0x7c>)
20000422:	2200      	movs	r2, #0
20000424:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
20000426:	2040      	movs	r0, #64	; 0x40
20000428:	f7ff fed0 	bl	200001cc <graphic_ctrl_bit_set>
	select_controller(0);				// clear selected controller to preserve the data we've written
2000042c:	2000      	movs	r0, #0
2000042e:	f7ff ff24 	bl	2000027a <select_controller>
}
20000432:	46c0      	nop			; (mov r8, r8)
20000434:	46bd      	mov	sp, r7
20000436:	b002      	add	sp, #8
20000438:	bd80      	pop	{r7, pc}
2000043a:	46c0      	nop			; (mov r8, r8)
2000043c:	40021015 	andmi	r1, r2, r5, lsl r0

20000440 <graphic_write_command>:

// writes a @command to the screen(s) specified in @controller
void graphic_write_command(uint8_t command, uint8_t controller) {
20000440:	b580      	push	{r7, lr}
20000442:	b082      	sub	sp, #8
20000444:	af00      	add	r7, sp, #0
20000446:	0002      	movs	r2, r0
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	701a      	strb	r2, [r3, #0]
2000044c:	1dbb      	adds	r3, r7, #6
2000044e:	1c0a      	adds	r2, r1, #0
20000450:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);			// (stop workcycle)
20000452:	2040      	movs	r0, #64	; 0x40
20000454:	f7ff fed8 	bl	20000208 <graphic_ctrl_bit_clear>
	select_controller(controller);			// choose screen
20000458:	1dbb      	adds	r3, r7, #6
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	0018      	movs	r0, r3
2000045e:	f7ff ff0c 	bl	2000027a <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);	// RS = 0 to write command, RW = 0 to write at all
20000462:	2003      	movs	r0, #3
20000464:	f7ff fed0 	bl	20000208 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);		// actually write the command
20000468:	1dbb      	adds	r3, r7, #6
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	1dfb      	adds	r3, r7, #7
2000046e:	781b      	ldrb	r3, [r3, #0]
20000470:	0011      	movs	r1, r2
20000472:	0018      	movs	r0, r3
20000474:	f7ff ffa4 	bl	200003c0 <graphic_write>
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b002      	add	sp, #8
2000047e:	bd80      	pop	{r7, pc}

20000480 <graphic_write_data>:

// paints @data to the screen(s) specified in @controller
void graphic_write_data(uint8_t data, uint8_t controller) {
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
20000486:	0002      	movs	r2, r0
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	1c0a      	adds	r2, r1, #0
20000490:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);			// (stop workcycle)
20000492:	2040      	movs	r0, #64	; 0x40
20000494:	f7ff feb8 	bl	20000208 <graphic_ctrl_bit_clear>
	select_controller(controller);			// choose screen
20000498:	1dbb      	adds	r3, r7, #6
2000049a:	781b      	ldrb	r3, [r3, #0]
2000049c:	0018      	movs	r0, r3
2000049e:	f7ff feec 	bl	2000027a <select_controller>
	graphic_ctrl_bit_set_clear(B_RS, B_RW);	// RS = 1 to not write command, RW = 0 to write at all
200004a2:	2102      	movs	r1, #2
200004a4:	2001      	movs	r0, #1
200004a6:	f7ff fed1 	bl	2000024c <graphic_ctrl_bit_set_clear>
	graphic_write(data, controller);		// actually
200004aa:	1dbb      	adds	r3, r7, #6
200004ac:	781a      	ldrb	r2, [r3, #0]
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	0011      	movs	r1, r2
200004b4:	0018      	movs	r0, r3
200004b6:	f7ff ff83 	bl	200003c0 <graphic_write>
}
200004ba:	46c0      	nop			; (mov r8, r8)
200004bc:	46bd      	mov	sp, r7
200004be:	b002      	add	sp, #8
200004c0:	bd80      	pop	{r7, pc}

200004c2 <graphic_read_data>:


uint8_t graphic_read_data(uint8_t controller) {
200004c2:	b580      	push	{r7, lr}
200004c4:	b082      	sub	sp, #8
200004c6:	af00      	add	r7, sp, #0
200004c8:	0002      	movs	r2, r0
200004ca:	1dfb      	adds	r3, r7, #7
200004cc:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);			// called to clear junk
200004ce:	1dfb      	adds	r3, r7, #7
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	0018      	movs	r0, r3
200004d4:	f7ff ff2c 	bl	20000330 <graphic_read>
	return graphic_read(controller);
200004d8:	1dfb      	adds	r3, r7, #7
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	0018      	movs	r0, r3
200004de:	f7ff ff27 	bl	20000330 <graphic_read>
200004e2:	0003      	movs	r3, r0
}
200004e4:	0018      	movs	r0, r3
200004e6:	46bd      	mov	sp, r7
200004e8:	b002      	add	sp, #8
200004ea:	bd80      	pop	{r7, pc}

200004ec <graphic_initialize>:

// initierar och förbereder grafikdisplayen
void graphic_initialize(void) {
200004ec:	b580      	push	{r7, lr}
200004ee:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200004f0:	2040      	movs	r0, #64	; 0x40
200004f2:	f7ff fe6b 	bl	200001cc <graphic_ctrl_bit_set>
	delay_mikro(10);
200004f6:	200a      	movs	r0, #10
200004f8:	f7ff fe44 	bl	20000184 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200004fc:	2078      	movs	r0, #120	; 0x78
200004fe:	f7ff fe83 	bl	20000208 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000502:	201e      	movs	r0, #30
20000504:	f7ff fe53 	bl	200001ae <delay_milli>
	
	graphic_ctrl_bit_set(B_RST);
20000508:	2020      	movs	r0, #32
2000050a:	f7ff fe5f 	bl	200001cc <graphic_ctrl_bit_set>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000050e:	2118      	movs	r1, #24
20000510:	203e      	movs	r0, #62	; 0x3e
20000512:	f7ff ff95 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);			// toggle display
20000516:	2118      	movs	r1, #24
20000518:	203f      	movs	r0, #63	; 0x3f
2000051a:	f7ff ff91 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);	// start = 0
2000051e:	2118      	movs	r1, #24
20000520:	20c0      	movs	r0, #192	; 0xc0
20000522:	f7ff ff8d 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);		// add = 0
20000526:	2118      	movs	r1, #24
20000528:	2040      	movs	r0, #64	; 0x40
2000052a:	f7ff ff89 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);		// page = 0
2000052e:	2118      	movs	r1, #24
20000530:	20b8      	movs	r0, #184	; 0xb8
20000532:	f7ff ff85 	bl	20000440 <graphic_write_command>
	
	select_controller(0);									// deaktivera båda CS-signalerna
20000536:	2000      	movs	r0, #0
20000538:	f7ff fe9f 	bl	2000027a <select_controller>
}
2000053c:	46c0      	nop			; (mov r8, r8)
2000053e:	46bd      	mov	sp, r7
20000540:	bd80      	pop	{r7, pc}

20000542 <graphic_clear_screen>:

// Nollställer alla pixlar i grafikminnet
void graphic_clear_screen(void) {
20000542:	b580      	push	{r7, lr}
20000544:	b082      	sub	sp, #8
20000546:	af00      	add	r7, sp, #0
	for(int page = 0; page < 8; page++) {
20000548:	2300      	movs	r3, #0
2000054a:	607b      	str	r3, [r7, #4]
2000054c:	e01e      	b.n	2000058c <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000054e:	687b      	ldr	r3, [r7, #4]
20000550:	b25b      	sxtb	r3, r3
20000552:	2248      	movs	r2, #72	; 0x48
20000554:	4252      	negs	r2, r2
20000556:	4313      	orrs	r3, r2
20000558:	b25b      	sxtb	r3, r3
2000055a:	b2db      	uxtb	r3, r3
2000055c:	2118      	movs	r1, #24
2000055e:	0018      	movs	r0, r3
20000560:	f7ff ff6e 	bl	20000440 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000564:	2118      	movs	r1, #24
20000566:	2040      	movs	r0, #64	; 0x40
20000568:	f7ff ff6a 	bl	20000440 <graphic_write_command>
		for(int add = 0; add < 64; add++) {
2000056c:	2300      	movs	r3, #0
2000056e:	603b      	str	r3, [r7, #0]
20000570:	e006      	b.n	20000580 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000572:	2118      	movs	r1, #24
20000574:	2000      	movs	r0, #0
20000576:	f7ff ff83 	bl	20000480 <graphic_write_data>
		for(int add = 0; add < 64; add++) {
2000057a:	683b      	ldr	r3, [r7, #0]
2000057c:	3301      	adds	r3, #1
2000057e:	603b      	str	r3, [r7, #0]
20000580:	683b      	ldr	r3, [r7, #0]
20000582:	2b3f      	cmp	r3, #63	; 0x3f
20000584:	ddf5      	ble.n	20000572 <graphic_clear_screen+0x30>
	for(int page = 0; page < 8; page++) {
20000586:	687b      	ldr	r3, [r7, #4]
20000588:	3301      	adds	r3, #1
2000058a:	607b      	str	r3, [r7, #4]
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	2b07      	cmp	r3, #7
20000590:	dddd      	ble.n	2000054e <graphic_clear_screen+0xc>
		}
	}
}
20000592:	46c0      	nop			; (mov r8, r8)
20000594:	46bd      	mov	sp, r7
20000596:	b002      	add	sp, #8
20000598:	bd80      	pop	{r7, pc}

2000059a <pixel>:

// funktion för att tända eller släcka en enskild pixel
void pixel(unsigned x, unsigned y, unsigned set) {
2000059a:	b590      	push	{r4, r7, lr}
2000059c:	b089      	sub	sp, #36	; 0x24
2000059e:	af00      	add	r7, sp, #0
200005a0:	60f8      	str	r0, [r7, #12]
200005a2:	60b9      	str	r1, [r7, #8]
200005a4:	607a      	str	r2, [r7, #4]
	// kolla om x och y är tillåtna värden
	if(x < 1 | y < 1 | x > 128 | y > 64)
200005a6:	68fb      	ldr	r3, [r7, #12]
200005a8:	425a      	negs	r2, r3
200005aa:	4153      	adcs	r3, r2
200005ac:	b2da      	uxtb	r2, r3
200005ae:	68bb      	ldr	r3, [r7, #8]
200005b0:	4259      	negs	r1, r3
200005b2:	414b      	adcs	r3, r1
200005b4:	b2db      	uxtb	r3, r3
200005b6:	4313      	orrs	r3, r2
200005b8:	b2db      	uxtb	r3, r3
200005ba:	0019      	movs	r1, r3
200005bc:	68fb      	ldr	r3, [r7, #12]
200005be:	2280      	movs	r2, #128	; 0x80
200005c0:	429a      	cmp	r2, r3
200005c2:	419b      	sbcs	r3, r3
200005c4:	425b      	negs	r3, r3
200005c6:	b2db      	uxtb	r3, r3
200005c8:	430b      	orrs	r3, r1
200005ca:	68ba      	ldr	r2, [r7, #8]
200005cc:	2140      	movs	r1, #64	; 0x40
200005ce:	4291      	cmp	r1, r2
200005d0:	4192      	sbcs	r2, r2
200005d2:	4252      	negs	r2, r2
200005d4:	b2d2      	uxtb	r2, r2
200005d6:	4313      	orrs	r3, r2
200005d8:	d000      	beq.n	200005dc <pixel+0x42>
200005da:	e0ae      	b.n	2000073a <pixel+0x1a0>
		return;
	
	// skapa en bitmask för pixeln
	char mask;
	int index = (y-1)/8;
200005dc:	68bb      	ldr	r3, [r7, #8]
200005de:	3b01      	subs	r3, #1
200005e0:	08db      	lsrs	r3, r3, #3
200005e2:	61bb      	str	r3, [r7, #24]
	switch((y-1) % 8) {
200005e4:	68bb      	ldr	r3, [r7, #8]
200005e6:	3b01      	subs	r3, #1
200005e8:	2207      	movs	r2, #7
200005ea:	4013      	ands	r3, r2
200005ec:	2b07      	cmp	r3, #7
200005ee:	d82c      	bhi.n	2000064a <pixel+0xb0>
200005f0:	009a      	lsls	r2, r3, #2
200005f2:	4b54      	ldr	r3, [pc, #336]	; (20000744 <pixel+0x1aa>)
200005f4:	18d3      	adds	r3, r2, r3
200005f6:	681b      	ldr	r3, [r3, #0]
200005f8:	469f      	mov	pc, r3
		case 0:
			mask = 1; break;
200005fa:	231f      	movs	r3, #31
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	2201      	movs	r2, #1
20000600:	701a      	strb	r2, [r3, #0]
20000602:	e023      	b.n	2000064c <pixel+0xb2>
		case 1:
			mask = 2; break;
20000604:	231f      	movs	r3, #31
20000606:	18fb      	adds	r3, r7, r3
20000608:	2202      	movs	r2, #2
2000060a:	701a      	strb	r2, [r3, #0]
2000060c:	e01e      	b.n	2000064c <pixel+0xb2>
		case 2:
			mask = 4; break;
2000060e:	231f      	movs	r3, #31
20000610:	18fb      	adds	r3, r7, r3
20000612:	2204      	movs	r2, #4
20000614:	701a      	strb	r2, [r3, #0]
20000616:	e019      	b.n	2000064c <pixel+0xb2>
		case 3:
			mask = 8; break;
20000618:	231f      	movs	r3, #31
2000061a:	18fb      	adds	r3, r7, r3
2000061c:	2208      	movs	r2, #8
2000061e:	701a      	strb	r2, [r3, #0]
20000620:	e014      	b.n	2000064c <pixel+0xb2>
		case 4:
			mask = 16; break;
20000622:	231f      	movs	r3, #31
20000624:	18fb      	adds	r3, r7, r3
20000626:	2210      	movs	r2, #16
20000628:	701a      	strb	r2, [r3, #0]
2000062a:	e00f      	b.n	2000064c <pixel+0xb2>
		case 5:
			mask = 32; break;
2000062c:	231f      	movs	r3, #31
2000062e:	18fb      	adds	r3, r7, r3
20000630:	2220      	movs	r2, #32
20000632:	701a      	strb	r2, [r3, #0]
20000634:	e00a      	b.n	2000064c <pixel+0xb2>
		case 6:
			mask = 64; break;
20000636:	231f      	movs	r3, #31
20000638:	18fb      	adds	r3, r7, r3
2000063a:	2240      	movs	r2, #64	; 0x40
2000063c:	701a      	strb	r2, [r3, #0]
2000063e:	e005      	b.n	2000064c <pixel+0xb2>
		case 7:
			mask = 128; break;
20000640:	231f      	movs	r3, #31
20000642:	18fb      	adds	r3, r7, r3
20000644:	2280      	movs	r2, #128	; 0x80
20000646:	701a      	strb	r2, [r3, #0]
20000648:	e000      	b.n	2000064c <pixel+0xb2>
		default:
			break;
2000064a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(!set)
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	2b00      	cmp	r3, #0
20000650:	d106      	bne.n	20000660 <pixel+0xc6>
		mask = ~mask;
20000652:	231f      	movs	r3, #31
20000654:	18fb      	adds	r3, r7, r3
20000656:	221f      	movs	r2, #31
20000658:	18ba      	adds	r2, r7, r2
2000065a:	7812      	ldrb	r2, [r2, #0]
2000065c:	43d2      	mvns	r2, r2
2000065e:	701a      	strb	r2, [r3, #0]
	
	// bestäm fysiska koordinater och välj styrkrets
	uint8_t controller, temp;
	char x_fysisk;
	
	if(x > 64) {
20000660:	68fb      	ldr	r3, [r7, #12]
20000662:	2b40      	cmp	r3, #64	; 0x40
20000664:	d90a      	bls.n	2000067c <pixel+0xe2>
		controller = B_CS2; 
20000666:	231e      	movs	r3, #30
20000668:	18fb      	adds	r3, r7, r3
2000066a:	2210      	movs	r2, #16
2000066c:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 65;
2000066e:	68fb      	ldr	r3, [r7, #12]
20000670:	b2da      	uxtb	r2, r3
20000672:	231d      	movs	r3, #29
20000674:	18fb      	adds	r3, r7, r3
20000676:	3a41      	subs	r2, #65	; 0x41
20000678:	701a      	strb	r2, [r3, #0]
2000067a:	e009      	b.n	20000690 <pixel+0xf6>
	} else {
		controller = B_CS1;
2000067c:	231e      	movs	r3, #30
2000067e:	18fb      	adds	r3, r7, r3
20000680:	2208      	movs	r2, #8
20000682:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 1;
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	b2da      	uxtb	r2, r3
20000688:	231d      	movs	r3, #29
2000068a:	18fb      	adds	r3, r7, r3
2000068c:	3a01      	subs	r2, #1
2000068e:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000690:	231d      	movs	r3, #29
20000692:	18fb      	adds	r3, r7, r3
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	2240      	movs	r2, #64	; 0x40
20000698:	4313      	orrs	r3, r2
2000069a:	b2da      	uxtb	r2, r3
2000069c:	231e      	movs	r3, #30
2000069e:	18fb      	adds	r3, r7, r3
200006a0:	781b      	ldrb	r3, [r3, #0]
200006a2:	0019      	movs	r1, r3
200006a4:	0010      	movs	r0, r2
200006a6:	f7ff fecb 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200006aa:	69bb      	ldr	r3, [r7, #24]
200006ac:	b25b      	sxtb	r3, r3
200006ae:	2248      	movs	r2, #72	; 0x48
200006b0:	4252      	negs	r2, r2
200006b2:	4313      	orrs	r3, r2
200006b4:	b25b      	sxtb	r3, r3
200006b6:	b2da      	uxtb	r2, r3
200006b8:	231e      	movs	r3, #30
200006ba:	18fb      	adds	r3, r7, r3
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	0019      	movs	r1, r3
200006c0:	0010      	movs	r0, r2
200006c2:	f7ff febd 	bl	20000440 <graphic_write_command>
	temp = graphic_read_data(controller);
200006c6:	2317      	movs	r3, #23
200006c8:	18fc      	adds	r4, r7, r3
200006ca:	231e      	movs	r3, #30
200006cc:	18fb      	adds	r3, r7, r3
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	0018      	movs	r0, r3
200006d2:	f7ff fef6 	bl	200004c2 <graphic_read_data>
200006d6:	0003      	movs	r3, r0
200006d8:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200006da:	231d      	movs	r3, #29
200006dc:	18fb      	adds	r3, r7, r3
200006de:	781b      	ldrb	r3, [r3, #0]
200006e0:	2240      	movs	r2, #64	; 0x40
200006e2:	4313      	orrs	r3, r2
200006e4:	b2da      	uxtb	r2, r3
200006e6:	231e      	movs	r3, #30
200006e8:	18fb      	adds	r3, r7, r3
200006ea:	781b      	ldrb	r3, [r3, #0]
200006ec:	0019      	movs	r1, r3
200006ee:	0010      	movs	r0, r2
200006f0:	f7ff fea6 	bl	20000440 <graphic_write_command>
	if(set)
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	2b00      	cmp	r3, #0
200006f8:	d00a      	beq.n	20000710 <pixel+0x176>
		mask = mask | temp;
200006fa:	231f      	movs	r3, #31
200006fc:	18fb      	adds	r3, r7, r3
200006fe:	221f      	movs	r2, #31
20000700:	18b9      	adds	r1, r7, r2
20000702:	2217      	movs	r2, #23
20000704:	18ba      	adds	r2, r7, r2
20000706:	7809      	ldrb	r1, [r1, #0]
20000708:	7812      	ldrb	r2, [r2, #0]
2000070a:	430a      	orrs	r2, r1
2000070c:	701a      	strb	r2, [r3, #0]
2000070e:	e009      	b.n	20000724 <pixel+0x18a>
	else
		mask = mask & temp;
20000710:	231f      	movs	r3, #31
20000712:	18fb      	adds	r3, r7, r3
20000714:	221f      	movs	r2, #31
20000716:	18ba      	adds	r2, r7, r2
20000718:	2117      	movs	r1, #23
2000071a:	1879      	adds	r1, r7, r1
2000071c:	7812      	ldrb	r2, [r2, #0]
2000071e:	7809      	ldrb	r1, [r1, #0]
20000720:	400a      	ands	r2, r1
20000722:	701a      	strb	r2, [r3, #0]
	graphic_write_data(mask, controller);
20000724:	231e      	movs	r3, #30
20000726:	18fb      	adds	r3, r7, r3
20000728:	781a      	ldrb	r2, [r3, #0]
2000072a:	231f      	movs	r3, #31
2000072c:	18fb      	adds	r3, r7, r3
2000072e:	781b      	ldrb	r3, [r3, #0]
20000730:	0011      	movs	r1, r2
20000732:	0018      	movs	r0, r3
20000734:	f7ff fea4 	bl	20000480 <graphic_write_data>
20000738:	e000      	b.n	2000073c <pixel+0x1a2>
		return;
2000073a:	46c0      	nop			; (mov r8, r8)
2000073c:	46bd      	mov	sp, r7
2000073e:	b009      	add	sp, #36	; 0x24
20000740:	bd90      	pop	{r4, r7, pc}
20000742:	46c0      	nop			; (mov r8, r8)
20000744:	20000a50 	andcs	r0, r0, r0, asr sl

20000748 <set_object_speed>:
	void(*move)(struct tObj *);
	void(*set_speed)(struct tObj *, int, int);
} OBJECT, *POBJECT;

// changes the objects speed
void set_object_speed(POBJECT o, int speedx, int speedy) {
20000748:	b580      	push	{r7, lr}
2000074a:	b084      	sub	sp, #16
2000074c:	af00      	add	r7, sp, #0
2000074e:	60f8      	str	r0, [r7, #12]
20000750:	60b9      	str	r1, [r7, #8]
20000752:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000754:	68fb      	ldr	r3, [r7, #12]
20000756:	68ba      	ldr	r2, [r7, #8]
20000758:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
2000075a:	68fb      	ldr	r3, [r7, #12]
2000075c:	687a      	ldr	r2, [r7, #4]
2000075e:	609a      	str	r2, [r3, #8]
}
20000760:	46c0      	nop			; (mov r8, r8)
20000762:	46bd      	mov	sp, r7
20000764:	b004      	add	sp, #16
20000766:	bd80      	pop	{r7, pc}

20000768 <draw_object>:

// draws the object to the screen through the pixel() function
void draw_object(POBJECT o) {
20000768:	b580      	push	{r7, lr}
2000076a:	b086      	sub	sp, #24
2000076c:	af00      	add	r7, sp, #0
2000076e:	6078      	str	r0, [r7, #4]
	int xx,yy;
	char offsx, offsy;
	xx = o->posx;
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	68db      	ldr	r3, [r3, #12]
20000774:	613b      	str	r3, [r7, #16]
	yy = o->posy;
20000776:	687b      	ldr	r3, [r7, #4]
20000778:	691b      	ldr	r3, [r3, #16]
2000077a:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < o->geo->numpoints; i++) {
2000077c:	2300      	movs	r3, #0
2000077e:	617b      	str	r3, [r7, #20]
20000780:	e026      	b.n	200007d0 <draw_object+0x68>
		offsx = o->geo->px[i].x;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	6819      	ldr	r1, [r3, #0]
20000786:	230b      	movs	r3, #11
20000788:	18fb      	adds	r3, r7, r3
2000078a:	697a      	ldr	r2, [r7, #20]
2000078c:	3204      	adds	r2, #4
2000078e:	0052      	lsls	r2, r2, #1
20000790:	188a      	adds	r2, r1, r2
20000792:	3204      	adds	r2, #4
20000794:	7812      	ldrb	r2, [r2, #0]
20000796:	701a      	strb	r2, [r3, #0]
		offsy = o->geo->px[i].y;
20000798:	687b      	ldr	r3, [r7, #4]
2000079a:	6819      	ldr	r1, [r3, #0]
2000079c:	230a      	movs	r3, #10
2000079e:	18fb      	adds	r3, r7, r3
200007a0:	697a      	ldr	r2, [r7, #20]
200007a2:	3204      	adds	r2, #4
200007a4:	0052      	lsls	r2, r2, #1
200007a6:	188a      	adds	r2, r1, r2
200007a8:	3205      	adds	r2, #5
200007aa:	7812      	ldrb	r2, [r2, #0]
200007ac:	701a      	strb	r2, [r3, #0]
		
		pixel(xx+offsx,yy+offsy, 1);
200007ae:	230b      	movs	r3, #11
200007b0:	18fb      	adds	r3, r7, r3
200007b2:	781a      	ldrb	r2, [r3, #0]
200007b4:	693b      	ldr	r3, [r7, #16]
200007b6:	18d0      	adds	r0, r2, r3
200007b8:	230a      	movs	r3, #10
200007ba:	18fb      	adds	r3, r7, r3
200007bc:	781a      	ldrb	r2, [r3, #0]
200007be:	68fb      	ldr	r3, [r7, #12]
200007c0:	18d3      	adds	r3, r2, r3
200007c2:	2201      	movs	r2, #1
200007c4:	0019      	movs	r1, r3
200007c6:	f7ff fee8 	bl	2000059a <pixel>
	for (int i = 0; i < o->geo->numpoints; i++) {
200007ca:	697b      	ldr	r3, [r7, #20]
200007cc:	3301      	adds	r3, #1
200007ce:	617b      	str	r3, [r7, #20]
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	681b      	ldr	r3, [r3, #0]
200007d4:	681a      	ldr	r2, [r3, #0]
200007d6:	697b      	ldr	r3, [r7, #20]
200007d8:	429a      	cmp	r2, r3
200007da:	dcd2      	bgt.n	20000782 <draw_object+0x1a>
	}
}
200007dc:	46c0      	nop			; (mov r8, r8)
200007de:	46bd      	mov	sp, r7
200007e0:	b006      	add	sp, #24
200007e2:	bd80      	pop	{r7, pc}

200007e4 <clear_object>:

// clears the object from the screen through the pixel() function
void clear_object(POBJECT o) {
200007e4:	b580      	push	{r7, lr}
200007e6:	b088      	sub	sp, #32
200007e8:	af00      	add	r7, sp, #0
200007ea:	6078      	str	r0, [r7, #4]
	int xx,yy,offsx,offsy;
	xx = o->posx;
200007ec:	687b      	ldr	r3, [r7, #4]
200007ee:	68db      	ldr	r3, [r3, #12]
200007f0:	61bb      	str	r3, [r7, #24]
	yy = o->posy;
200007f2:	687b      	ldr	r3, [r7, #4]
200007f4:	691b      	ldr	r3, [r3, #16]
200007f6:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < o->geo->numpoints; i++) {
200007f8:	2300      	movs	r3, #0
200007fa:	61fb      	str	r3, [r7, #28]
200007fc:	e01e      	b.n	2000083c <clear_object+0x58>
		offsx = o->geo->px[i].x;
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	681a      	ldr	r2, [r3, #0]
20000802:	69fb      	ldr	r3, [r7, #28]
20000804:	3304      	adds	r3, #4
20000806:	005b      	lsls	r3, r3, #1
20000808:	18d3      	adds	r3, r2, r3
2000080a:	3304      	adds	r3, #4
2000080c:	781b      	ldrb	r3, [r3, #0]
2000080e:	613b      	str	r3, [r7, #16]
		offsy = o->geo->px[i].y;
20000810:	687b      	ldr	r3, [r7, #4]
20000812:	681a      	ldr	r2, [r3, #0]
20000814:	69fb      	ldr	r3, [r7, #28]
20000816:	3304      	adds	r3, #4
20000818:	005b      	lsls	r3, r3, #1
2000081a:	18d3      	adds	r3, r2, r3
2000081c:	3305      	adds	r3, #5
2000081e:	781b      	ldrb	r3, [r3, #0]
20000820:	60fb      	str	r3, [r7, #12]
		
		pixel(xx+offsx,yy+offsy, 0);
20000822:	69ba      	ldr	r2, [r7, #24]
20000824:	693b      	ldr	r3, [r7, #16]
20000826:	18d0      	adds	r0, r2, r3
20000828:	697a      	ldr	r2, [r7, #20]
2000082a:	68fb      	ldr	r3, [r7, #12]
2000082c:	18d3      	adds	r3, r2, r3
2000082e:	2200      	movs	r2, #0
20000830:	0019      	movs	r1, r3
20000832:	f7ff feb2 	bl	2000059a <pixel>
	for (int i = 0; i < o->geo->numpoints; i++) {
20000836:	69fb      	ldr	r3, [r7, #28]
20000838:	3301      	adds	r3, #1
2000083a:	61fb      	str	r3, [r7, #28]
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	681b      	ldr	r3, [r3, #0]
20000840:	681a      	ldr	r2, [r3, #0]
20000842:	69fb      	ldr	r3, [r7, #28]
20000844:	429a      	cmp	r2, r3
20000846:	dcda      	bgt.n	200007fe <clear_object+0x1a>
	}
}
20000848:	46c0      	nop			; (mov r8, r8)
2000084a:	46bd      	mov	sp, r7
2000084c:	b008      	add	sp, #32
2000084e:	bd80      	pop	{r7, pc}

20000850 <move_object>:

// clears from pos A and then moves to pos B, taking in consideration walls (or in this case the edge of the screen)
void move_object(POBJECT o) {
20000850:	b580      	push	{r7, lr}
20000852:	b082      	sub	sp, #8
20000854:	af00      	add	r7, sp, #0
20000856:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	0018      	movs	r0, r3
2000085c:	f7ff ffc2 	bl	200007e4 <clear_object>
	o->posx += o->dirx;
20000860:	687b      	ldr	r3, [r7, #4]
20000862:	68da      	ldr	r2, [r3, #12]
20000864:	687b      	ldr	r3, [r7, #4]
20000866:	685b      	ldr	r3, [r3, #4]
20000868:	18d2      	adds	r2, r2, r3
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	691a      	ldr	r2, [r3, #16]
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	689b      	ldr	r3, [r3, #8]
20000876:	18d2      	adds	r2, r2, r3
20000878:	687b      	ldr	r3, [r7, #4]
2000087a:	611a      	str	r2, [r3, #16]
	
	if(o->posx < 1 || o->posx + o->geo->sizex > 128)
2000087c:	687b      	ldr	r3, [r7, #4]
2000087e:	68db      	ldr	r3, [r3, #12]
20000880:	2b00      	cmp	r3, #0
20000882:	dd07      	ble.n	20000894 <move_object+0x44>
20000884:	687b      	ldr	r3, [r7, #4]
20000886:	68da      	ldr	r2, [r3, #12]
20000888:	687b      	ldr	r3, [r7, #4]
2000088a:	681b      	ldr	r3, [r3, #0]
2000088c:	685b      	ldr	r3, [r3, #4]
2000088e:	18d3      	adds	r3, r2, r3
20000890:	2b80      	cmp	r3, #128	; 0x80
20000892:	dd04      	ble.n	2000089e <move_object+0x4e>
		o->dirx = -o->dirx;
20000894:	687b      	ldr	r3, [r7, #4]
20000896:	685b      	ldr	r3, [r3, #4]
20000898:	425a      	negs	r2, r3
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	605a      	str	r2, [r3, #4]
	if(o->posy < 1 || o->posy + o->geo->sizey > 64)
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	691b      	ldr	r3, [r3, #16]
200008a2:	2b00      	cmp	r3, #0
200008a4:	dd07      	ble.n	200008b6 <move_object+0x66>
200008a6:	687b      	ldr	r3, [r7, #4]
200008a8:	691a      	ldr	r2, [r3, #16]
200008aa:	687b      	ldr	r3, [r7, #4]
200008ac:	681b      	ldr	r3, [r3, #0]
200008ae:	689b      	ldr	r3, [r3, #8]
200008b0:	18d3      	adds	r3, r2, r3
200008b2:	2b40      	cmp	r3, #64	; 0x40
200008b4:	dd04      	ble.n	200008c0 <move_object+0x70>
		o->diry = -o->diry;
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	689b      	ldr	r3, [r3, #8]
200008ba:	425a      	negs	r2, r3
200008bc:	687b      	ldr	r3, [r7, #4]
200008be:	609a      	str	r2, [r3, #8]
	
	draw_object(o);
200008c0:	687b      	ldr	r3, [r7, #4]
200008c2:	0018      	movs	r0, r3
200008c4:	f7ff ff50 	bl	20000768 <draw_object>
200008c8:	46c0      	nop			; (mov r8, r8)
200008ca:	46bd      	mov	sp, r7
200008cc:	b002      	add	sp, #8
200008ce:	bd80      	pop	{r7, pc}

200008d0 <keyboardActivate>:
#define GPIO_ODR_LOW *((volatile unsigned char*) (GPIO_D+0x14))
#define GPIO_ODR_HIGH *((volatile unsigned char*) (GPIO_D+0x15))

unsigned const char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};

void keyboardActivate(unsigned int row){
200008d0:	b580      	push	{r7, lr}
200008d2:	b082      	sub	sp, #8
200008d4:	af00      	add	r7, sp, #0
200008d6:	6078      	str	r0, [r7, #4]
	//Aktivera angiven rad hos tangentbordet eller deaktivera samtliga
	
	switch(row){
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	2b01      	cmp	r3, #1
200008dc:	d009      	beq.n	200008f2 <keyboardActivate+0x22>
200008de:	d304      	bcc.n	200008ea <keyboardActivate+0x1a>
200008e0:	2b02      	cmp	r3, #2
200008e2:	d00a      	beq.n	200008fa <keyboardActivate+0x2a>
200008e4:	2b03      	cmp	r3, #3
200008e6:	d00c      	beq.n	20000902 <keyboardActivate+0x32>
200008e8:	e00f      	b.n	2000090a <keyboardActivate+0x3a>
		case 0: GPIO_ODR_HIGH = 0x10; break;
200008ea:	4b0c      	ldr	r3, [pc, #48]	; (2000091c <keyboardActivate+0x4c>)
200008ec:	2210      	movs	r2, #16
200008ee:	701a      	strb	r2, [r3, #0]
200008f0:	e00f      	b.n	20000912 <keyboardActivate+0x42>
		case 1: GPIO_ODR_HIGH = 0x20; break;
200008f2:	4b0a      	ldr	r3, [pc, #40]	; (2000091c <keyboardActivate+0x4c>)
200008f4:	2220      	movs	r2, #32
200008f6:	701a      	strb	r2, [r3, #0]
200008f8:	e00b      	b.n	20000912 <keyboardActivate+0x42>
		case 2: GPIO_ODR_HIGH = 0x40; break;
200008fa:	4b08      	ldr	r3, [pc, #32]	; (2000091c <keyboardActivate+0x4c>)
200008fc:	2240      	movs	r2, #64	; 0x40
200008fe:	701a      	strb	r2, [r3, #0]
20000900:	e007      	b.n	20000912 <keyboardActivate+0x42>
		case 3: GPIO_ODR_HIGH = 0x80; break;
20000902:	4b06      	ldr	r3, [pc, #24]	; (2000091c <keyboardActivate+0x4c>)
20000904:	2280      	movs	r2, #128	; 0x80
20000906:	701a      	strb	r2, [r3, #0]
20000908:	e003      	b.n	20000912 <keyboardActivate+0x42>
		default: GPIO_ODR_HIGH = 0x00; break;
2000090a:	4b04      	ldr	r3, [pc, #16]	; (2000091c <keyboardActivate+0x4c>)
2000090c:	2200      	movs	r2, #0
2000090e:	701a      	strb	r2, [r3, #0]
20000910:	46c0      	nop			; (mov r8, r8)
	}
}
20000912:	46c0      	nop			; (mov r8, r8)
20000914:	46bd      	mov	sp, r7
20000916:	b002      	add	sp, #8
20000918:	bd80      	pop	{r7, pc}
2000091a:	46c0      	nop			; (mov r8, r8)
2000091c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000920 <keyboardGetColumn>:

int keyboardGetColumn(void){
20000920:	b580      	push	{r7, lr}
20000922:	b082      	sub	sp, #8
20000924:	af00      	add	r7, sp, #0
	//Om någon tangent i den aktiverade raden är nedtryckt
	// returneras dess kolumnnummer. Annars 0.
	
	unsigned char c;
	c = GPIO_IDR_HIGH;
20000926:	4a13      	ldr	r2, [pc, #76]	; (20000974 <keyboardGetColumn+0x54>)
20000928:	1dfb      	adds	r3, r7, #7
2000092a:	7812      	ldrb	r2, [r2, #0]
2000092c:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000092e:	1dfb      	adds	r3, r7, #7
20000930:	781b      	ldrb	r3, [r3, #0]
20000932:	2208      	movs	r2, #8
20000934:	4013      	ands	r3, r2
20000936:	d001      	beq.n	2000093c <keyboardGetColumn+0x1c>
20000938:	2303      	movs	r3, #3
2000093a:	e016      	b.n	2000096a <keyboardGetColumn+0x4a>
	if(c & 0x4){return 2;}
2000093c:	1dfb      	adds	r3, r7, #7
2000093e:	781b      	ldrb	r3, [r3, #0]
20000940:	2204      	movs	r2, #4
20000942:	4013      	ands	r3, r2
20000944:	d001      	beq.n	2000094a <keyboardGetColumn+0x2a>
20000946:	2302      	movs	r3, #2
20000948:	e00f      	b.n	2000096a <keyboardGetColumn+0x4a>
	if(c & 0x2){return 1;}
2000094a:	1dfb      	adds	r3, r7, #7
2000094c:	781b      	ldrb	r3, [r3, #0]
2000094e:	2202      	movs	r2, #2
20000950:	4013      	ands	r3, r2
20000952:	d001      	beq.n	20000958 <keyboardGetColumn+0x38>
20000954:	2301      	movs	r3, #1
20000956:	e008      	b.n	2000096a <keyboardGetColumn+0x4a>
	if(c & 0x1){return 0;}
20000958:	1dfb      	adds	r3, r7, #7
2000095a:	781b      	ldrb	r3, [r3, #0]
2000095c:	2201      	movs	r2, #1
2000095e:	4013      	ands	r3, r2
20000960:	d001      	beq.n	20000966 <keyboardGetColumn+0x46>
20000962:	2300      	movs	r3, #0
20000964:	e001      	b.n	2000096a <keyboardGetColumn+0x4a>
	return -1;
20000966:	2301      	movs	r3, #1
20000968:	425b      	negs	r3, r3
	}
2000096a:	0018      	movs	r0, r3
2000096c:	46bd      	mov	sp, r7
2000096e:	b002      	add	sp, #8
20000970:	bd80      	pop	{r7, pc}
20000972:	46c0      	nop			; (mov r8, r8)
20000974:	40020c11 	andmi	r0, r2, r1, lsl ip

20000978 <keyboard>:

unsigned char keyboard(void){
20000978:	b580      	push	{r7, lr}
2000097a:	b082      	sub	sp, #8
2000097c:	af00      	add	r7, sp, #0
	int row, col;
	for(row = 0; row < 4; row++){
2000097e:	2300      	movs	r3, #0
20000980:	607b      	str	r3, [r7, #4]
20000982:	e019      	b.n	200009b8 <keyboard+0x40>
		keyboardActivate(row);
20000984:	687b      	ldr	r3, [r7, #4]
20000986:	0018      	movs	r0, r3
20000988:	f7ff ffa2 	bl	200008d0 <keyboardActivate>
		col = keyboardGetColumn();
2000098c:	f7ff ffc8 	bl	20000920 <keyboardGetColumn>
20000990:	0003      	movs	r3, r0
20000992:	603b      	str	r3, [r7, #0]
		if (col != -1){
20000994:	683b      	ldr	r3, [r7, #0]
20000996:	3301      	adds	r3, #1
20000998:	d00b      	beq.n	200009b2 <keyboard+0x3a>
			keyboardActivate(-1);
2000099a:	2301      	movs	r3, #1
2000099c:	425b      	negs	r3, r3
2000099e:	0018      	movs	r0, r3
200009a0:	f7ff ff96 	bl	200008d0 <keyboardActivate>
			return key[4*row + col];
200009a4:	687b      	ldr	r3, [r7, #4]
200009a6:	009a      	lsls	r2, r3, #2
200009a8:	683b      	ldr	r3, [r7, #0]
200009aa:	18d3      	adds	r3, r2, r3
200009ac:	4a08      	ldr	r2, [pc, #32]	; (200009d0 <keyboard+0x58>)
200009ae:	5cd3      	ldrb	r3, [r2, r3]
200009b0:	e009      	b.n	200009c6 <keyboard+0x4e>
	for(row = 0; row < 4; row++){
200009b2:	687b      	ldr	r3, [r7, #4]
200009b4:	3301      	adds	r3, #1
200009b6:	607b      	str	r3, [r7, #4]
200009b8:	687b      	ldr	r3, [r7, #4]
200009ba:	2b03      	cmp	r3, #3
200009bc:	dde2      	ble.n	20000984 <keyboard+0xc>
		}
	}
	keyboardActivate(0);
200009be:	2000      	movs	r0, #0
200009c0:	f7ff ff86 	bl	200008d0 <keyboardActivate>
	return 0xFF;
200009c4:	23ff      	movs	r3, #255	; 0xff
200009c6:	0018      	movs	r0, r3
200009c8:	46bd      	mov	sp, r7
200009ca:	b002      	add	sp, #8
200009cc:	bd80      	pop	{r7, pc}
200009ce:	46c0      	nop			; (mov r8, r8)
200009d0:	20000a70 	andcs	r0, r0, r0, ror sl

200009d4 <ball_geometry>:
200009d4:	0000000c 	andeq	r0, r0, ip
200009d8:	00000004 	andeq	r0, r0, r4
200009dc:	00000004 	andeq	r0, r0, r4
200009e0:	02000100 	andeq	r0, r0, #0, 2
200009e4:	01010001 	tsteq	r1, r1
200009e8:	03010201 	movweq	r0, #4609	; 0x1201
200009ec:	01020002 	tsteq	r2, r2
200009f0:	03020202 	movweq	r0, #8706	; 0x2202
200009f4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000a08 <ball>:
20000a08:	200009d4 	ldrdcs	r0, [r0], -r4
	...
20000a14:	00000001 	andeq	r0, r0, r1
20000a18:	00000001 	andeq	r0, r0, r1
20000a1c:	20000769 	andcs	r0, r0, r9, ror #14
20000a20:	200007e5 	andcs	r0, r0, r5, ror #15
20000a24:	20000851 	andcs	r0, r0, r1, asr r8
20000a28:	20000749 	andcs	r0, r0, r9, asr #14
20000a2c:	200000e2 	andcs	r0, r0, r2, ror #1
20000a30:	200000e2 	andcs	r0, r0, r2, ror #1
20000a34:	200000c4 	andcs	r0, r0, r4, asr #1
20000a38:	200000e2 	andcs	r0, r0, r2, ror #1
20000a3c:	200000b4 	strhcs	r0, [r0], -r4
20000a40:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000a44:	200000a6 	andcs	r0, r0, r6, lsr #1
20000a48:	200000e2 	andcs	r0, r0, r2, ror #1
20000a4c:	200000d4 	ldrdcs	r0, [r0], -r4
20000a50:	200005fa 	strdcs	r0, [r0], -sl
20000a54:	20000604 	andcs	r0, r0, r4, lsl #12
20000a58:	2000060e 	andcs	r0, r0, lr, lsl #12
20000a5c:	20000618 	andcs	r0, r0, r8, lsl r6
20000a60:	20000622 	andcs	r0, r0, r2, lsr #12
20000a64:	2000062c 	andcs	r0, r0, ip, lsr #12
20000a68:	20000636 	andcs	r0, r0, r6, lsr r6
20000a6c:	20000640 	andcs	r0, r0, r0, asr #12

20000a70 <key>:
20000a70:	0a030201 	beq	200c127c <key+0xc080c>
20000a74:	0b060504 	bleq	20181e8c <key+0x18141c>
20000a78:	0c090807 	stceq	8, cr0, [r9], {7}
20000a7c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000a4c <ball+0x44>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000261 	andeq	r0, r0, r1, ror #4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000000a4 	andeq	r0, r0, r4, lsr #1
  10:	0000110c 	andeq	r1, r0, ip, lsl #2
	...
  20:	07040200 	streq	r0, [r4, -r0, lsl #4]
  24:	000001a0 	andeq	r0, r0, r0, lsr #3
  28:	00007803 	andeq	r7, r0, r3, lsl #16
  2c:	03020200 	movweq	r0, #8704	; 0x2200
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00004904 	andeq	r4, r0, r4, lsl #18
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	49050200 	stmdbmi	r5, {r9}
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	08010200 	stmdaeq	r1, {r9}
  4c:	00000096 	muleq	r0, r6, r0
  50:	00007f05 	andeq	r7, r0, r5, lsl #30
  54:	28060200 	stmdacs	r6, {r9}
  58:	03000000 	movweq	r0, #0
  5c:	00000155 	andeq	r0, r0, r5, asr r1
  60:	97080234 	smladxls	r8, r4, r2, r0
  64:	06000000 	streq	r0, [r0], -r0
  68:	00000176 	andeq	r0, r0, r6, ror r1
  6c:	00970902 	addseq	r0, r7, r2, lsl #18
  70:	06000000 	streq	r0, [r0], -r0
  74:	0000008a 	andeq	r0, r0, sl, lsl #1
  78:	00970a02 	addseq	r0, r7, r2, lsl #20
  7c:	06040000 	streq	r0, [r4], -r0
  80:	00000090 	muleq	r0, r0, r0
  84:	00970b02 	addseq	r0, r7, r2, lsl #22
  88:	04080000 	streq	r0, [r8], #-0
  8c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
  90:	00009e0c 	andeq	r9, r0, ip, lsl #28
  94:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  9c:	50080074 	andpl	r0, r8, r4, ror r0
  a0:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
  a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  a8:	000000ae 	andeq	r0, r0, lr, lsr #1
  ac:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
  b0:	00019207 	andeq	r9, r1, r7, lsl #4
  b4:	01420500 	cmpeq	r2, r0, lsl #10
  b8:	0d020000 	stceq	0, cr0, [r2, #-0]
  bc:	0000005b 	andeq	r0, r0, fp, asr r0
  c0:	00014105 	andeq	r4, r1, r5, lsl #2
  c4:	cb0d0200 	blgt	3408cc <startup-0x1fcbf734>
  c8:	0a000000 	beq	d0 <startup-0x1fffff30>
  cc:	00005b04 	andeq	r5, r0, r4, lsl #22
  d0:	01b20300 			; <UNDEFINED> instruction: 0x01b20300
  d4:	02240000 	eoreq	r0, r4, #0
  d8:	00014a0f 	andeq	r4, r1, pc, lsl #20
  dc:	65670400 	strbvs	r0, [r7, #-1024]!	; 0xfffffc00
  e0:	1002006f 	andne	r0, r2, pc, rrx
  e4:	000000c0 	andeq	r0, r0, r0, asr #1
  e8:	00850600 	addeq	r0, r5, r0, lsl #12
  ec:	11020000 	mrsne	r0, (UNDEF: 2)
  f0:	00000097 	muleq	r0, r7, r0
  f4:	01710604 	cmneq	r1, r4, lsl #12
  f8:	11020000 	mrsne	r0, (UNDEF: 2)
  fc:	00000097 	muleq	r0, r7, r0
 100:	01ad0608 			; <UNDEFINED> instruction: 0x01ad0608
 104:	12020000 	andne	r0, r2, #0
 108:	00000097 	muleq	r0, r7, r0
 10c:	014b060c 	cmpeq	fp, ip, lsl #12
 110:	12020000 	andne	r0, r2, #0
 114:	00000097 	muleq	r0, r7, r0
 118:	000c0610 	andeq	r0, ip, r0, lsl r6
 11c:	13020000 	movwne	r0, #8192	; 0x2000
 120:	0000015b 	andeq	r0, r0, fp, asr r1
 124:	02340614 	eorseq	r0, r4, #20, 12	; 0x1400000
 128:	14020000 	strne	r0, [r2], #-0
 12c:	0000015b 	andeq	r0, r0, fp, asr r1
 130:	019b0618 	orrseq	r0, fp, r8, lsl r6
 134:	15020000 	strne	r0, [r2, #-0]
 138:	0000015b 	andeq	r0, r0, fp, asr r1
 13c:	0057061c 	subseq	r0, r7, ip, lsl r6
 140:	16020000 	strne	r0, [r2], -r0
 144:	00000176 	andeq	r0, r0, r6, ror r1
 148:	550b0020 	strpl	r0, [fp, #-32]	; 0xffffffe0
 14c:	0c000001 	stceq	0, cr0, [r0], {1}
 150:	00000155 	andeq	r0, r0, r5, asr r1
 154:	d1040a00 	tstle	r4, r0, lsl #20
 158:	0a000000 	beq	160 <startup-0x1ffffea0>
 15c:	00014a04 	andeq	r4, r1, r4, lsl #20
 160:	01760b00 	cmneq	r6, r0, lsl #22
 164:	550c0000 	strpl	r0, [ip, #-0]
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000097 	muleq	r0, r7, r0
 170:	0000970c 	andeq	r9, r0, ip, lsl #14
 174:	040a0000 	streq	r0, [sl], #-0
 178:	00000161 	andeq	r0, r0, r1, ror #2
 17c:	00018605 	andeq	r8, r1, r5, lsl #12
 180:	d1170200 	tstle	r7, r0, lsl #4
 184:	05000000 	streq	r0, [r0, #-0]
 188:	00000185 	andeq	r0, r0, r5, lsl #3
 18c:	01551702 	cmpeq	r5, r2, lsl #14
 190:	6a0d0000 	bvs	340198 <startup-0x1fcbfe68>
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	0000b50a 	andeq	fp, r0, sl, lsl #10
 19c:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
 1a0:	0e200009 	cdpeq	0, 2, cr0, cr0, cr9, {0}
 1a4:	0000018d 	andeq	r0, r0, sp, lsl #3
 1a8:	017c1501 	cmneq	ip, r1, lsl #10
 1ac:	03050000 	movweq	r0, #20480	; 0x5000
 1b0:	20000a08 	andcs	r0, r0, r8, lsl #20
 1b4:	0001800f 	andeq	r8, r1, pc
 1b8:	97330100 	ldrls	r0, [r3, -r0, lsl #2]!
 1bc:	50000000 	andpl	r0, r0, r0
 1c0:	ac200000 	stcge	0, cr0, [r0], #-0
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	00022f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 1cc:	016c1000 	cmneq	ip, r0
 1d0:	33010000 	movwcc	r0, #4096	; 0x1000
 1d4:	00000097 	muleq	r0, r7, r0
 1d8:	10649102 	rsbne	r9, r4, r2, lsl #2
 1dc:	0000015f 	andeq	r0, r0, pc, asr r1
 1e0:	022f3301 	eoreq	r3, pc, #67108864	; 0x4000000
 1e4:	91020000 	mrsls	r0, (UNDEF: 2)
 1e8:	00631160 	rsbeq	r1, r3, r0, ror #2
 1ec:	023b3401 	eorseq	r3, fp, #16777216	; 0x1000000
 1f0:	91020000 	mrsls	r0, (UNDEF: 2)
 1f4:	013c126b 	teqeq	ip, fp, ror #4
 1f8:	34010000 	strcc	r0, [r1], #-0
 1fc:	0000023b 	andeq	r0, r0, fp, lsr r2
 200:	00015012 	andeq	r5, r1, r2, lsl r0
 204:	3b340100 	blcc	d0060c <startup-0x1f2ff9f4>
 208:	11000002 	tstne	r0, r2
 20c:	35010070 	strcc	r0, [r1, #-112]	; 0xffffff90
 210:	00000187 	andeq	r0, r0, r7, lsl #3
 214:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
 218:	20000076 	andcs	r0, r0, r6, ror r0
 21c:	0000007c 	andeq	r0, r0, ip, ror r0
 220:	00000014 	andeq	r0, r0, r4, lsl r0
 224:	97410100 	strbls	r0, [r1, -r0, lsl #2]
 228:	15000000 	strne	r0, [r0, #-0]
 22c:	0a000000 	beq	234 <startup-0x1ffffdcc>
 230:	00023504 	andeq	r3, r2, r4, lsl #10
 234:	3b040a00 	blcc	102a3c <startup-0x1fefd5c4>
 238:	02000002 	andeq	r0, r0, #2
 23c:	009f0801 	addseq	r0, pc, r1, lsl #16
 240:	61160000 	tstvs	r6, r0
 244:	01000000 	mrseq	r0, (UNDEF: 0)
 248:	0000102b 	andeq	r1, r0, fp, lsr #32
 24c:	00004020 	andeq	r4, r0, r0, lsr #32
 250:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 254:	00000164 	andeq	r0, r0, r4, ror #2
 258:	00002201 	andeq	r2, r0, r1, lsl #4
 25c:	000c2000 	andeq	r2, ip, r0
 260:	9c010000 	stcls	0, cr0, [r1], {-0}
 264:	0000aa00 	andeq	sl, r0, r0, lsl #20
 268:	2b000400 	blcs	1270 <startup-0x1fffed90>
 26c:	04000001 	streq	r0, [r0], #-1
 270:	0000a401 	andeq	sl, r0, r1, lsl #8
 274:	01c30c00 	biceq	r0, r3, r0, lsl #24
 278:	00fc0000 	rscseq	r0, ip, r0
 27c:	00d02000 	sbcseq	r2, r0, r0
 280:	00ae0000 	adceq	r0, lr, r0
 284:	00020000 	andeq	r0, r2, r0
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	0001ae24 	andeq	sl, r1, r4, lsr #28
 290:	00001e20 	andeq	r1, r0, r0, lsr #28
 294:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
 298:	03000000 	movweq	r0, #0
 29c:	0100736d 	tsteq	r0, sp, ror #6
 2a0:	00004424 	andeq	r4, r0, r4, lsr #8
 2a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2a8:	07040400 	streq	r0, [r4, -r0, lsl #8]
 2ac:	000001a0 	andeq	r0, r0, r0, lsr #3
 2b0:	0001b702 	andeq	fp, r1, r2, lsl #14
 2b4:	841d0100 	ldrhi	r0, [sp], #-256	; 0xffffff00
 2b8:	2a200001 	bcs	8002c4 <startup-0x1f7ffd3c>
 2bc:	01000000 	mrseq	r0, (UNDEF: 0)
 2c0:	0000849c 	muleq	r0, ip, r4
 2c4:	73750300 	cmnvc	r5, #0, 6
 2c8:	441d0100 	ldrmi	r0, [sp], #-256	; 0xffffff00
 2cc:	02000000 	andeq	r0, r0, #0
 2d0:	8c056c91 	stchi	12, cr6, [r5], {145}	; 0x91
 2d4:	1a200001 	bne	8002e0 <startup-0x1f7ffd20>
 2d8:	06000000 	streq	r0, [r0], -r0
 2dc:	1e010069 	cdpne	0, 0, cr0, cr1, cr9, {3}
 2e0:	00000084 	andeq	r0, r0, r4, lsl #1
 2e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 2e8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 2ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2f0:	00020708 	andeq	r0, r2, r8, lsl #14
 2f4:	40130100 	andsmi	r0, r3, r0, lsl #2
 2f8:	44200001 	strtmi	r0, [r0], #-1
 2fc:	01000000 	mrseq	r0, (UNDEF: 0)
 300:	0213099c 	andseq	r0, r3, #156, 18	; 0x270000
 304:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 308:	200000fc 	strdcs	r0, [r0], -ip
 30c:	00000044 	andeq	r0, r0, r4, asr #32
 310:	b8009c01 	stmdalt	r0, {r0, sl, fp, ip, pc}
 314:	04000002 	streq	r0, [r0], #-2
 318:	0001c200 	andeq	ip, r1, r0, lsl #4
 31c:	a4010400 	strge	r0, [r1], #-1024	; 0xfffffc00
 320:	0c000000 	stceq	0, cr0, [r0], {-0}
 324:	00000257 	andeq	r0, r0, r7, asr r2
 328:	200001cc 	andcs	r0, r0, ip, asr #3
 32c:	0000057c 	andeq	r0, r0, ip, ror r5
 330:	00000153 	andeq	r0, r0, r3, asr r1
 334:	00030c02 	andeq	r0, r3, r2, lsl #24
 338:	2c200100 	stfcss	f0, [r0], #-0
 33c:	03000000 	movweq	r0, #0
 340:	00960801 	addseq	r0, r6, r1, lsl #16
 344:	b6040000 	strlt	r0, [r4], -r0
 348:	01000002 	tsteq	r0, r2
 34c:	00059ac4 	andeq	r9, r5, r4, asr #21
 350:	0001ae20 	andeq	sl, r1, r0, lsr #28
 354:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
 358:	05000000 	streq	r0, [r0, #-0]
 35c:	c4010078 	strgt	r0, [r1], #-120	; 0xffffff88
 360:	000000b5 	strheq	r0, [r0], -r5
 364:	055c9102 	ldrbeq	r9, [ip, #-258]	; 0xfffffefe
 368:	c4010079 	strgt	r0, [r1], #-121	; 0xffffff87
 36c:	000000b5 	strheq	r0, [r0], -r5
 370:	05589102 	ldrbeq	r9, [r8, #-258]	; 0xfffffefe
 374:	00746573 	rsbseq	r6, r4, r3, ror r5
 378:	00b5c401 	adcseq	ip, r5, r1, lsl #8
 37c:	91020000 	mrsls	r0, (UNDEF: 2)
 380:	03070654 	movweq	r0, #30292	; 0x7654
 384:	ca010000 	bgt	4038c <startup-0x1ffbfc74>
 388:	000000bc 	strheq	r0, [r0], -ip
 38c:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 390:	00000339 	andeq	r0, r0, r9, lsr r3
 394:	00c3cb01 	sbceq	ip, r3, r1, lsl #22
 398:	91020000 	mrsls	r0, (UNDEF: 2)
 39c:	03290668 			; <UNDEFINED> instruction: 0x03290668
 3a0:	e5010000 	str	r0, [r1, #-0]
 3a4:	00000021 	andeq	r0, r0, r1, lsr #32
 3a8:	066e9102 	strbteq	r9, [lr], -r2, lsl #2
 3ac:	00000334 	andeq	r0, r0, r4, lsr r3
 3b0:	0021e501 	eoreq	lr, r1, r1, lsl #10
 3b4:	91020000 	mrsls	r0, (UNDEF: 2)
 3b8:	02d30667 	sbcseq	r0, r3, #108003328	; 0x6700000
 3bc:	e6010000 	str	r0, [r1], -r0
 3c0:	000000bc 	strheq	r0, [r0], -ip
 3c4:	006d9102 	rsbeq	r9, sp, r2, lsl #2
 3c8:	a0070403 	andge	r0, r7, r3, lsl #8
 3cc:	03000001 	movweq	r0, #1
 3d0:	009f0801 	addseq	r0, pc, r1, lsl #16
 3d4:	04070000 	streq	r0, [r7], #-0
 3d8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 3dc:	036c0400 	cmneq	ip, #0, 8
 3e0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
 3e4:	20000542 	andcs	r0, r0, r2, asr #10
 3e8:	00000058 	andeq	r0, r0, r8, asr r0
 3ec:	01109c01 	tsteq	r0, r1, lsl #24
 3f0:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
 3f4:	4a200005 	bmi	800410 <startup-0x1f7ffbf0>
 3f8:	06000000 	streq	r0, [r0], -r0
 3fc:	00000361 	andeq	r0, r0, r1, ror #6
 400:	00c3ba01 	sbceq	fp, r3, r1, lsl #20
 404:	91020000 	mrsls	r0, (UNDEF: 2)
 408:	056c0874 	strbeq	r0, [ip, #-2164]!	; 0xfffff78c
 40c:	001a2000 	andseq	r2, sl, r0
 410:	61090000 	mrsvs	r0, (UNDEF: 9)
 414:	01006464 	tsteq	r0, r4, ror #8
 418:	0000c3bd 			; <UNDEFINED> instruction: 0x0000c3bd
 41c:	70910200 	addsvc	r0, r1, r0, lsl #4
 420:	0a000000 	beq	428 <startup-0x1ffffbd8>
 424:	00000381 	andeq	r0, r0, r1, lsl #7
 428:	04eca601 	strbteq	sl, [ip], #1537	; 0x601
 42c:	00562000 	subseq	r2, r6, r0
 430:	9c010000 	stcls	0, cr0, [r1], {-0}
 434:	0002a40b 	andeq	sl, r2, fp, lsl #8
 438:	21a00100 	lslcs	r0, r0, #2
 43c:	c2000000 	andgt	r0, r0, #0
 440:	2a200004 	bcs	800458 <startup-0x1f7ffba8>
 444:	01000000 	mrseq	r0, (UNDEF: 0)
 448:	0001499c 	muleq	r1, ip, r9
 44c:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
 450:	a0010000 	andge	r0, r1, r0
 454:	00000021 	andeq	r0, r0, r1, lsr #32
 458:	00779102 	rsbseq	r9, r7, r2, lsl #2
 45c:	0002ef04 	andeq	lr, r2, r4, lsl #30
 460:	80980100 	addshi	r0, r8, r0, lsl #2
 464:	42200004 	eormi	r0, r0, #4
 468:	01000000 	mrseq	r0, (UNDEF: 0)
 46c:	00017b9c 	muleq	r1, ip, fp
 470:	02b10c00 	adcseq	r0, r1, #0, 24
 474:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
 478:	00000021 	andeq	r0, r0, r1, lsr #32
 47c:	0c779102 	ldfeqp	f1, [r7], #-8
 480:	00000329 	andeq	r0, r0, r9, lsr #6
 484:	00219801 	eoreq	r9, r1, r1, lsl #16
 488:	91020000 	mrsls	r0, (UNDEF: 2)
 48c:	3a040076 	bcc	10066c <startup-0x1feff994>
 490:	01000002 	tsteq	r0, r2
 494:	00044090 	muleq	r4, r0, r0
 498:	00004020 	andeq	r4, r0, r0, lsr #32
 49c:	ad9c0100 	ldfges	f0, [ip]
 4a0:	0c000001 	stceq	0, cr0, [r0], {1}
 4a4:	00000248 	andeq	r0, r0, r8, asr #4
 4a8:	00219001 	eoreq	r9, r1, r1
 4ac:	91020000 	mrsls	r0, (UNDEF: 2)
 4b0:	03290c77 			; <UNDEFINED> instruction: 0x03290c77
 4b4:	90010000 	andls	r0, r1, r0
 4b8:	00000021 	andeq	r0, r0, r1, lsr #32
 4bc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 4c0:	00031404 	andeq	r1, r3, r4, lsl #8
 4c4:	c0750100 	rsbsgt	r0, r5, r0, lsl #2
 4c8:	80200003 	eorhi	r0, r0, r3
 4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 4d0:	0001df9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 4d4:	03660c00 	cmneq	r6, #0, 24
 4d8:	75010000 	strvc	r0, [r1, #-0]
 4dc:	00000021 	andeq	r0, r0, r1, lsr #32
 4e0:	0c779102 	ldfeqp	f1, [r7], #-8
 4e4:	00000329 	andeq	r0, r0, r9, lsr #6
 4e8:	00217501 	eoreq	r7, r1, r1, lsl #10
 4ec:	91020000 	mrsls	r0, (UNDEF: 2)
 4f0:	3f0b0076 	svccc	0x000b0076
 4f4:	01000003 	tsteq	r0, r3
 4f8:	00002c59 	andeq	r2, r0, r9, asr ip
 4fc:	00033000 	andeq	r3, r3, r0
 500:	00009020 	andeq	r9, r0, r0, lsr #32
 504:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 508:	0c000002 	stceq	0, cr0, [r0], {2}
 50c:	00000329 	andeq	r0, r0, r9, lsr #6
 510:	002c5901 	eoreq	r5, ip, r1, lsl #18
 514:	91020000 	mrsls	r0, (UNDEF: 2)
 518:	7672096f 	ldrbtvc	r0, [r2], -pc, ror #18
 51c:	2c610100 	stfcse	f0, [r1], #-0
 520:	02000000 	andeq	r0, r0, #0
 524:	0a007791 	beq	1e370 <startup-0x1ffe1c90>
 528:	000002dc 	ldrdeq	r0, [r0], -ip
 52c:	02cc4601 	sbceq	r4, ip, #1048576	; 0x100000
 530:	00642000 	rsbeq	r2, r4, r0
 534:	9c010000 	stcls	0, cr0, [r1], {-0}
 538:	00032204 	andeq	r2, r3, r4, lsl #4
 53c:	7a340100 	bvc	d00944 <startup-0x1f2ff6bc>
 540:	52200002 	eorpl	r0, r0, #2
 544:	01000000 	mrseq	r0, (UNDEF: 0)
 548:	0002499c 	muleq	r2, ip, r9
 54c:	03290c00 			; <UNDEFINED> instruction: 0x03290c00
 550:	34010000 	strcc	r0, [r1], #-0
 554:	00000021 	andeq	r0, r0, r1, lsr #32
 558:	00779102 	rsbseq	r9, r7, r2, lsl #2
 55c:	00021f04 	andeq	r1, r2, r4, lsl #30
 560:	4c2e0100 	stfmis	f0, [lr], #-0
 564:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
 568:	01000000 	mrseq	r0, (UNDEF: 0)
 56c:	00027b9c 	muleq	r2, ip, fp
 570:	03020c00 	movweq	r0, #11264	; 0x2c00
 574:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 578:	00000021 	andeq	r0, r0, r1, lsr #32
 57c:	0c779102 	ldfeqp	f1, [r7], #-8
 580:	00000250 	andeq	r0, r0, r0, asr r2
 584:	00212e01 	eoreq	r2, r1, r1, lsl #28
 588:	91020000 	mrsls	r0, (UNDEF: 2)
 58c:	bc0d0076 	stclt	0, cr0, [sp], {118}	; 0x76
 590:	01000002 	tsteq	r0, r2
 594:	00020829 	andeq	r0, r2, r9, lsr #16
 598:	00004420 	andeq	r4, r0, r0, lsr #8
 59c:	9d9c0100 	ldflss	f0, [ip]
 5a0:	05000002 	streq	r0, [r0, #-2]
 5a4:	29010078 	stmdbcs	r1, {r3, r4, r5, r6}
 5a8:	00000021 	andeq	r0, r0, r1, lsr #32
 5ac:	00779102 	rsbseq	r9, r7, r2, lsl #2
 5b0:	00034c0e 	andeq	r4, r3, lr, lsl #24
 5b4:	cc230100 	stfgts	f0, [r3], #-0
 5b8:	3c200001 	stccc	0, cr0, [r0], #-4
 5bc:	01000000 	mrseq	r0, (UNDEF: 0)
 5c0:	0078059c 			; <UNDEFINED> instruction: 0x0078059c
 5c4:	00212301 	eoreq	r2, r1, r1, lsl #6
 5c8:	91020000 	mrsls	r0, (UNDEF: 2)
 5cc:	df000077 	svcle	0x00000077
 5d0:	04000002 	streq	r0, [r0], #-2
 5d4:	0002bc00 	andeq	fp, r2, r0, lsl #24
 5d8:	a4010400 	strge	r0, [r1], #-1024	; 0xfffffc00
 5dc:	0c000000 	stceq	0, cr0, [r0], {-0}
 5e0:	00000394 	muleq	r0, r4, r3
 5e4:	20000748 	andcs	r0, r0, r8, asr #14
 5e8:	00000188 	andeq	r0, r0, r8, lsl #3
 5ec:	00000285 	andeq	r0, r0, r5, lsl #5
 5f0:	00007802 	andeq	r7, r0, r2, lsl #16
 5f4:	03010200 	movweq	r0, #4608	; 0x1200
 5f8:	00000042 	andeq	r0, r0, r2, asr #32
 5fc:	01007803 	tsteq	r0, r3, lsl #16
 600:	00004204 	andeq	r4, r0, r4, lsl #4
 604:	79030000 	stmdbvc	r3, {}	; <UNPREDICTABLE>
 608:	42050100 	andmi	r0, r5, #0, 2
 60c:	01000000 	mrseq	r0, (UNDEF: 0)
 610:	08010400 	stmdaeq	r1, {sl}
 614:	00000096 	muleq	r0, r6, r0
 618:	00007f05 	andeq	r7, r0, r5, lsl #30
 61c:	21060100 	mrscs	r0, (UNDEF: 22)
 620:	02000000 	andeq	r0, r0, #0
 624:	00000155 	andeq	r0, r0, r5, asr r1
 628:	90080134 	andls	r0, r8, r4, lsr r1
 62c:	06000000 	streq	r0, [r0], -r0
 630:	00000176 	andeq	r0, r0, r6, ror r1
 634:	00900901 	addseq	r0, r0, r1, lsl #18
 638:	06000000 	streq	r0, [r0], -r0
 63c:	0000008a 	andeq	r0, r0, sl, lsl #1
 640:	00900a01 	addseq	r0, r0, r1, lsl #20
 644:	06040000 	streq	r0, [r4], -r0
 648:	00000090 	muleq	r0, r0, r0
 64c:	00900b01 	addseq	r0, r0, r1, lsl #22
 650:	03080000 	movweq	r0, #32768	; 0x8000
 654:	01007870 	tsteq	r0, r0, ror r8
 658:	0000970c 	andeq	r9, r0, ip, lsl #14
 65c:	07000c00 	streq	r0, [r0, -r0, lsl #24]
 660:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 664:	49080074 	stmdbmi	r8, {r2, r4, r5, r6}
 668:	a7000000 	strge	r0, [r0, -r0]
 66c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 670:	000000a7 	andeq	r0, r0, r7, lsr #1
 674:	04040013 	streq	r0, [r4], #-19	; 0xffffffed
 678:	00019207 	andeq	r9, r1, r7, lsl #4
 67c:	01410500 	cmpeq	r1, r0, lsl #10
 680:	0d010000 	stceq	0, cr0, [r1, #-0]
 684:	000000b9 	strheq	r0, [r0], -r9
 688:	0054040a 	subseq	r0, r4, sl, lsl #8
 68c:	b2020000 	andlt	r0, r2, #0
 690:	24000001 	strcs	r0, [r0], #-1
 694:	01380f01 	teqeq	r8, r1, lsl #30
 698:	67030000 	strvs	r0, [r3, -r0]
 69c:	01006f65 	tsteq	r0, r5, ror #30
 6a0:	0000ae10 	andeq	sl, r0, r0, lsl lr
 6a4:	85060000 	strhi	r0, [r6, #-0]
 6a8:	01000000 	mrseq	r0, (UNDEF: 0)
 6ac:	00009011 	andeq	r9, r0, r1, lsl r0
 6b0:	71060400 	tstvc	r6, r0, lsl #8
 6b4:	01000001 	tsteq	r0, r1
 6b8:	00009011 	andeq	r9, r0, r1, lsl r0
 6bc:	ad060800 	stcge	8, cr0, [r6, #-0]
 6c0:	01000001 	tsteq	r0, r1
 6c4:	00009012 	andeq	r9, r0, r2, lsl r0
 6c8:	4b060c00 	blmi	1836d0 <startup-0x1fe7c930>
 6cc:	01000001 	tsteq	r0, r1
 6d0:	00009012 	andeq	r9, r0, r2, lsl r0
 6d4:	0c061000 	stceq	0, cr1, [r6], {-0}
 6d8:	01000000 	mrseq	r0, (UNDEF: 0)
 6dc:	00014913 	andeq	r4, r1, r3, lsl r9
 6e0:	34061400 	strcc	r1, [r6], #-1024	; 0xfffffc00
 6e4:	01000002 	tsteq	r0, r2
 6e8:	00014914 	andeq	r4, r1, r4, lsl r9
 6ec:	9b061800 	blls	1866f4 <startup-0x1fe7990c>
 6f0:	01000001 	tsteq	r0, r1
 6f4:	00014915 	andeq	r4, r1, r5, lsl r9
 6f8:	57061c00 	strpl	r1, [r6, -r0, lsl #24]
 6fc:	01000000 	mrseq	r0, (UNDEF: 0)
 700:	00016416 	andeq	r6, r1, r6, lsl r4
 704:	0b002000 	bleq	870c <startup-0x1fff78f4>
 708:	00000143 	andeq	r0, r0, r3, asr #2
 70c:	0001430c 	andeq	r4, r1, ip, lsl #6
 710:	040a0000 	streq	r0, [sl], #-0
 714:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
 718:	0138040a 	teqeq	r8, sl, lsl #8
 71c:	640b0000 	strvs	r0, [fp], #-0
 720:	0c000001 	stceq	0, cr0, [r0], {1}
 724:	00000143 	andeq	r0, r0, r3, asr #2
 728:	0000900c 	andeq	r9, r0, ip
 72c:	00900c00 	addseq	r0, r0, r0, lsl #24
 730:	0a000000 	beq	738 <startup-0x1ffff8c8>
 734:	00014f04 	andeq	r4, r1, r4, lsl #30
 738:	01850500 	orreq	r0, r5, r0, lsl #10
 73c:	17010000 	strne	r0, [r1, -r0]
 740:	00000143 	andeq	r0, r0, r3, asr #2
 744:	00040c0d 	andeq	r0, r4, sp, lsl #24
 748:	503d0100 	eorspl	r0, sp, r0, lsl #2
 74c:	80200008 	eorhi	r0, r0, r8
 750:	01000000 	mrseq	r0, (UNDEF: 0)
 754:	0001979c 	muleq	r1, ip, r7
 758:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 75c:	016a3d01 	cmneq	sl, r1, lsl #26
 760:	91020000 	mrsls	r0, (UNDEF: 2)
 764:	ff0d0074 			; <UNDEFINED> instruction: 0xff0d0074
 768:	01000003 	tsteq	r0, r3
 76c:	0007e42f 	andeq	lr, r7, pc, lsr #8
 770:	00006c20 	andeq	r6, r0, r0, lsr #24
 774:	1c9c0100 	ldfnes	f0, [ip], {0}
 778:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 77c:	2f01006f 	svccs	0x0001006f
 780:	0000016a 	andeq	r0, r0, sl, ror #2
 784:	0f5c9102 	svceq	0x005c9102
 788:	01007878 	tsteq	r0, r8, ror r8
 78c:	00009030 	andeq	r9, r0, r0, lsr r0
 790:	70910200 	addsvc	r0, r1, r0, lsl #4
 794:	0079790f 	rsbseq	r7, r9, pc, lsl #18
 798:	00903001 	addseq	r3, r0, r1
 79c:	91020000 	mrsls	r0, (UNDEF: 2)
 7a0:	03e0106c 	mvneq	r1, #108	; 0x6c
 7a4:	30010000 	andcc	r0, r1, r0
 7a8:	00000090 	muleq	r0, r0, r0
 7ac:	10689102 	rsbne	r9, r8, r2, lsl #2
 7b0:	000003e6 	andeq	r0, r0, r6, ror #7
 7b4:	00903001 	addseq	r3, r0, r1
 7b8:	91020000 	mrsls	r0, (UNDEF: 2)
 7bc:	07f81164 	ldrbeq	r1, [r8, r4, ror #2]!
 7c0:	00502000 	subseq	r2, r0, r0
 7c4:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
 7c8:	90340100 	eorsls	r0, r4, r0, lsl #2
 7cc:	02000000 	andeq	r0, r0, #0
 7d0:	fe117491 	mrc2	4, 0, r7, cr1, cr1, {4}
 7d4:	38200007 	stmdacc	r0!, {r0, r1, r2}
 7d8:	12000000 	andne	r0, r0, #0
 7dc:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 7e0:	00902a01 	addseq	r2, r0, r1, lsl #20
 7e4:	00130000 	andseq	r0, r3, r0
 7e8:	0d000000 	stceq	0, cr0, [r0, #-0]
 7ec:	000003f3 	strdeq	r0, [r0], -r3
 7f0:	07682001 	strbeq	r2, [r8, -r1]!
 7f4:	007c2000 	rsbseq	r2, ip, r0
 7f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7fc:	000002a1 	andeq	r0, r0, r1, lsr #5
 800:	01006f0e 	tsteq	r0, lr, lsl #30
 804:	00016a20 	andeq	r6, r1, r0, lsr #20
 808:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 80c:	0078780f 	rsbseq	r7, r8, pc, lsl #16
 810:	00902101 	addseq	r2, r0, r1, lsl #2
 814:	91020000 	mrsls	r0, (UNDEF: 2)
 818:	79790f70 	ldmdbvc	r9!, {r4, r5, r6, r8, r9, sl, fp}^
 81c:	90210100 	eorls	r0, r1, r0, lsl #2
 820:	02000000 	andeq	r0, r0, #0
 824:	e0106c91 	muls	r0, r1, ip
 828:	01000003 	tsteq	r0, r3
 82c:	0002a122 	andeq	sl, r2, r2, lsr #2
 830:	6b910200 	blvs	fe441038 <key+0xde4405c8>
 834:	0003e610 	andeq	lr, r3, r0, lsl r6
 838:	a1220100 			; <UNDEFINED> instruction: 0xa1220100
 83c:	02000002 	andeq	r0, r0, #2
 840:	7c116a91 			; <UNDEFINED> instruction: 0x7c116a91
 844:	60200007 	eorvs	r0, r0, r7
 848:	0f000000 	svceq	0x00000000
 84c:	26010069 	strcs	r0, [r1], -r9, rrx
 850:	00000090 	muleq	r0, r0, r0
 854:	11749102 	cmnne	r4, r2, lsl #2
 858:	20000782 	andcs	r0, r0, r2, lsl #15
 85c:	00000048 	andeq	r0, r0, r8, asr #32
 860:	0002b612 	andeq	fp, r2, r2, lsl r6
 864:	902a0100 	eorls	r0, sl, r0, lsl #2
 868:	13000000 	movwne	r0, #0
 86c:	00000000 	andeq	r0, r0, r0
 870:	9f080104 	svcls	0x00080104
 874:	14000000 	strne	r0, [r0], #-0
 878:	00000418 	andeq	r0, r0, r8, lsl r4
 87c:	07481a01 	strbeq	r1, [r8, -r1, lsl #20]
 880:	00202000 	eoreq	r2, r0, r0
 884:	9c010000 	stcls	0, cr0, [r1], {-0}
 888:	01006f0e 	tsteq	r0, lr, lsl #30
 88c:	00016a1a 	andeq	r6, r1, sl, lsl sl
 890:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 894:	0003d915 	andeq	sp, r3, r5, lsl r9
 898:	901a0100 	andsls	r0, sl, r0, lsl #2
 89c:	02000000 	andeq	r0, r0, #0
 8a0:	ec157091 	ldc	0, cr7, [r5], {145}	; 0x91
 8a4:	01000003 	tsteq	r0, r3
 8a8:	0000901a 	andeq	r9, r0, sl, lsl r0
 8ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
 8b0:	00e50000 	rsceq	r0, r5, r0
 8b4:	00040000 	andeq	r0, r4, r0
 8b8:	000003d6 	ldrdeq	r0, [r0], -r6
 8bc:	00a40104 	adceq	r0, r4, r4, lsl #2
 8c0:	550c0000 	strpl	r0, [ip, #-0]
 8c4:	d0000004 	andle	r0, r0, r4
 8c8:	04200008 	strteq	r0, [r0], #-8
 8cc:	54000001 	strpl	r0, [r0], #-1
 8d0:	02000003 	andeq	r0, r0, #3
 8d4:	00000044 	andeq	r0, r0, r4, asr #32
 8d8:	00000031 	andeq	r0, r0, r1, lsr r0
 8dc:	00003603 	andeq	r3, r0, r3, lsl #12
 8e0:	04000f00 	streq	r0, [r0], #-3840	; 0xfffff100
 8e4:	00000021 	andeq	r0, r0, r1, lsr #32
 8e8:	92070405 	andls	r0, r7, #83886080	; 0x5000000
 8ec:	05000001 	streq	r0, [r0, #-1]
 8f0:	00960801 	addseq	r0, r6, r1, lsl #16
 8f4:	3d040000 	stccc	0, cr0, [r4, #-0]
 8f8:	06000000 	streq	r0, [r0], -r0
 8fc:	0079656b 	rsbseq	r6, r9, fp, ror #10
 900:	00310901 	eorseq	r0, r1, r1, lsl #18
 904:	03050000 	movweq	r0, #20480	; 0x5000
 908:	20000a70 	andcs	r0, r0, r0, ror sl
 90c:	00043b07 	andeq	r3, r4, r7, lsl #22
 910:	3d240100 	stfccs	f0, [r4, #-0]
 914:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 918:	5c200009 	stcpl	0, cr0, [r0], #-36	; 0xffffffdc
 91c:	01000000 	mrseq	r0, (UNDEF: 0)
 920:	0000909c 	muleq	r0, ip, r0
 924:	6f720800 	svcvs	0x00720800
 928:	25010077 	strcs	r0, [r1, #-119]	; 0xffffff89
 92c:	00000090 	muleq	r0, r0, r0
 930:	08749102 	ldmdaeq	r4!, {r1, r8, ip, pc}^
 934:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 938:	00902501 	addseq	r2, r0, r1, lsl #10
 93c:	91020000 	mrsls	r0, (UNDEF: 2)
 940:	04090070 	streq	r0, [r9], #-112	; 0xffffff90
 944:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 948:	04290a00 	strteq	r0, [r9], #-2560	; 0xfffff600
 94c:	17010000 	strne	r0, [r1, -r0]
 950:	00000090 	muleq	r0, r0, r0
 954:	20000920 	andcs	r0, r0, r0, lsr #18
 958:	00000058 	andeq	r0, r0, r8, asr r0
 95c:	00bd9c01 	adcseq	r9, sp, r1, lsl #24
 960:	63080000 	movwvs	r0, #32768	; 0x8000
 964:	3d1b0100 	ldfccs	f0, [fp, #-0]
 968:	02000000 	andeq	r0, r0, #0
 96c:	0b007791 	bleq	1e7b8 <startup-0x1ffe1848>
 970:	00000444 	andeq	r0, r0, r4, asr #8
 974:	08d00b01 	ldmeq	r0, {r0, r8, r9, fp}^
 978:	00502000 	subseq	r2, r0, r0
 97c:	9c010000 	stcls	0, cr0, [r1], {-0}
 980:	000000e1 	andeq	r0, r0, r1, ror #1
 984:	776f720c 	strbvc	r7, [pc, -ip, lsl #4]!
 988:	e10b0100 	mrs	r0, (UNDEF: 27)
 98c:	02000000 	andeq	r0, r0, #0
 990:	05007491 	streq	r7, [r0, #-1169]	; 0xfffffb6f
 994:	01a00704 	lsleq	r0, r4, #14
 998:	Address 0x00000998 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00180219 	andseq	r0, r8, r9, lsl r2
  9c:	00340e00 	eorseq	r0, r4, r0, lsl #28
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	3f012e0f 	svccc	0x00012e0f
  b0:	3a0e0319 	bcc	380d1c <startup-0x1fc7f2e4>
  b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b8:	11134919 	tstne	r3, r9, lsl r9
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03000510 	movweq	r0, #1296	; 0x510
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  d4:	11000018 	tstne	r0, r8, lsl r0
  d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e4:	34120000 	ldrcc	r0, [r2], #-0
  e8:	3a0e0300 	bcc	380cf0 <startup-0x1fc7f310>
  ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	13000013 	movwne	r0, #19
  f4:	0111010b 	tsteq	r1, fp, lsl #2
  f8:	00000612 	andeq	r0, r0, r2, lsl r6
  fc:	3f012e14 	svccc	0x00012e14
 100:	3a0e0319 	bcc	380d6c <startup-0x1fc7f294>
 104:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 108:	00193c13 	andseq	r3, r9, r3, lsl ip
 10c:	00181500 	andseq	r1, r8, r0, lsl #10
 110:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 114:	03193f00 	tsteq	r9, #0, 30
 118:	3b0b3a0e 	blcc	2ce958 <startup-0x1fd316a8>
 11c:	1119270b 	tstne	r9, fp, lsl #14
 120:	40061201 	andmi	r1, r6, r1, lsl #4
 124:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 130:	0e030b13 	vmoveq.32	d3[0], r0
 134:	06120111 			; <UNDEFINED> instruction: 0x06120111
 138:	00001710 	andeq	r1, r0, r0, lsl r7
 13c:	3f012e02 	svccc	0x00012e02
 140:	3a0e0319 	bcc	380dac <startup-0x1fc7f254>
 144:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 14c:	96184006 	ldrls	r4, [r8], -r6
 150:	13011942 	movwne	r1, #6466	; 0x1942
 154:	05030000 	streq	r0, [r3, #-0]
 158:	3a080300 	bcc	200d60 <startup-0x1fdff2a0>
 15c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	00180213 	andseq	r0, r8, r3, lsl r2
 164:	00240400 	eoreq	r0, r4, r0, lsl #8
 168:	0b3e0b0b 	bleq	f82d9c <startup-0x1f07d264>
 16c:	00000e03 	andeq	r0, r0, r3, lsl #28
 170:	11010b05 	tstne	r1, r5, lsl #22
 174:	00061201 	andeq	r1, r6, r1, lsl #4
 178:	00340600 	eorseq	r0, r4, r0, lsl #12
 17c:	0b3a0803 	bleq	e82190 <startup-0x1f17de70>
 180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 184:	00001802 	andeq	r1, r0, r2, lsl #16
 188:	0b002407 	bleq	91ac <startup-0x1fff6e54>
 18c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 190:	08000008 	stmdaeq	r0, {r3}
 194:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 198:	0b3a0e03 	bleq	e839ac <startup-0x1f17c654>
 19c:	01110b3b 	tsteq	r1, fp, lsr fp
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	00194297 	mulseq	r9, r7, r2
 1a8:	002e0900 	eoreq	r0, lr, r0, lsl #18
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	01111927 	tsteq	r1, r7, lsr #18
 1b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1bc:	00194297 	mulseq	r9, r7, r2
 1c0:	11010000 	mrsne	r0, (UNDEF: 1)
 1c4:	130e2501 	movwne	r2, #58625	; 0xe501
 1c8:	110e030b 	tstne	lr, fp, lsl #6
 1cc:	10061201 	andne	r1, r6, r1, lsl #4
 1d0:	02000017 	andeq	r0, r0, #23
 1d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1d8:	0b3b0b3a 	bleq	ec2ec8 <startup-0x1f13d138>
 1dc:	00001349 	andeq	r1, r0, r9, asr #6
 1e0:	0b002403 	bleq	91f4 <startup-0x1fff6e0c>
 1e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e8:	0400000e 	streq	r0, [r0], #-14
 1ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 200:	00130119 	andseq	r0, r3, r9, lsl r1
 204:	00050500 	andeq	r0, r5, r0, lsl #10
 208:	0b3a0803 	bleq	e8221c <startup-0x1f17dde4>
 20c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 210:	00001802 	andeq	r1, r0, r2, lsl #16
 214:	03003406 	movweq	r3, #1030	; 0x406
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	07000018 	smladeq	r0, r8, r0, r0
 224:	0b0b0024 	bleq	2c02bc <startup-0x1fd3fd44>
 228:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 22c:	0b080000 	bleq	200234 <startup-0x1fdffdcc>
 230:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 234:	09000006 	stmdbeq	r0, {r1, r2}
 238:	08030034 	stmdaeq	r3, {r2, r4, r5}
 23c:	0b3b0b3a 	bleq	ec2f2c <startup-0x1f13d0d4>
 240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 244:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 248:	03193f00 	tsteq	r9, #0, 30
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	1119270b 	tstne	r9, fp, lsl #14
 254:	40061201 	andmi	r1, r6, r1, lsl #4
 258:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 25c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 260:	03193f01 	tsteq	r9, #1, 30
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 26c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 270:	96184006 	ldrls	r4, [r8], -r6
 274:	13011942 	movwne	r1, #6466	; 0x1942
 278:	050c0000 	streq	r0, [ip, #-0]
 27c:	3a0e0300 	bcc	380e84 <startup-0x1fc7f17c>
 280:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 284:	00180213 	andseq	r0, r8, r3, lsl r2
 288:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 28c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 290:	0b3b0b3a 	bleq	ec2f80 <startup-0x1f13d080>
 294:	01111927 	tsteq	r1, r7, lsr #18
 298:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 29c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 2a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a8:	0b3a0e03 	bleq	e83abc <startup-0x1f17c544>
 2ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2b8:	00000019 	andeq	r0, r0, r9, lsl r0
 2bc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2c0:	030b130e 	movweq	r1, #45838	; 0xb30e
 2c4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2c8:	00171006 	andseq	r1, r7, r6
 2cc:	01130200 	tsteq	r3, r0, lsl #4
 2d0:	0b0b0e03 	bleq	2c3ae4 <startup-0x1fd3c51c>
 2d4:	0b3b0b3a 	bleq	ec2fc4 <startup-0x1f13d03c>
 2d8:	00001301 	andeq	r1, r0, r1, lsl #6
 2dc:	03000d03 	movweq	r0, #3331	; 0xd03
 2e0:	3b0b3a08 	blcc	2ceb08 <startup-0x1fd314f8>
 2e4:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 2e8:	0400000b 	streq	r0, [r0], #-11
 2ec:	0b0b0024 	bleq	2c0384 <startup-0x1fd3fc7c>
 2f0:	0e030b3e 	vmoveq.16	d3[0], r0
 2f4:	16050000 	strne	r0, [r5], -r0
 2f8:	3a0e0300 	bcc	380f00 <startup-0x1fc7f100>
 2fc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 300:	06000013 			; <UNDEFINED> instruction: 0x06000013
 304:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 308:	0b3b0b3a 	bleq	ec2ff8 <startup-0x1f13d008>
 30c:	0b381349 	bleq	e05038 <startup-0x1f1fafc8>
 310:	24070000 	strcs	r0, [r7], #-0
 314:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 318:	0008030b 	andeq	r0, r8, fp, lsl #6
 31c:	01010800 	tsteq	r1, r0, lsl #16
 320:	13011349 	movwne	r1, #4937	; 0x1349
 324:	21090000 	mrscs	r0, (UNDEF: 9)
 328:	2f134900 	svccs	0x00134900
 32c:	0a00000b 	beq	360 <startup-0x1ffffca0>
 330:	0b0b000f 	bleq	2c0374 <startup-0x1fd3fc8c>
 334:	00001349 	andeq	r1, r0, r9, asr #6
 338:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
 33c:	00130119 	andseq	r0, r3, r9, lsl r1
 340:	00050c00 	andeq	r0, r5, r0, lsl #24
 344:	00001349 	andeq	r1, r0, r9, asr #6
 348:	3f012e0d 	svccc	0x00012e0d
 34c:	3a0e0319 	bcc	380fb8 <startup-0x1fc7f048>
 350:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 354:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 358:	96184006 	ldrls	r4, [r8], -r6
 35c:	13011942 	movwne	r1, #6466	; 0x1942
 360:	050e0000 	streq	r0, [lr, #-0]
 364:	3a080300 	bcc	200f6c <startup-0x1fdff094>
 368:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 36c:	00180213 	andseq	r0, r8, r3, lsl r2
 370:	00340f00 	eorseq	r0, r4, r0, lsl #30
 374:	0b3a0803 	bleq	e82388 <startup-0x1f17dc78>
 378:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 37c:	00001802 	andeq	r1, r0, r2, lsl #16
 380:	03003410 	movweq	r3, #1040	; 0x410
 384:	3b0b3a0e 	blcc	2cebc4 <startup-0x1fd3143c>
 388:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 38c:	11000018 	tstne	r0, r8, lsl r0
 390:	0111010b 	tsteq	r1, fp, lsl #2
 394:	00000612 	andeq	r0, r0, r2, lsl r6
 398:	3f012e12 	svccc	0x00012e12
 39c:	3a0e0319 	bcc	381008 <startup-0x1fc7eff8>
 3a0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a4:	00193c13 	andseq	r3, r9, r3, lsl ip
 3a8:	00181300 	andseq	r1, r8, r0, lsl #6
 3ac:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 3b0:	03193f01 	tsteq	r9, #1, 30
 3b4:	3b0b3a0e 	blcc	2cebf4 <startup-0x1fd3140c>
 3b8:	1119270b 	tstne	r9, fp, lsl #14
 3bc:	40061201 	andmi	r1, r6, r1, lsl #4
 3c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 3c4:	05150000 	ldreq	r0, [r5, #-0]
 3c8:	3a0e0300 	bcc	380fd0 <startup-0x1fc7f030>
 3cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3d0:	00180213 	andseq	r0, r8, r3, lsl r2
 3d4:	11010000 	mrsne	r0, (UNDEF: 1)
 3d8:	130e2501 	movwne	r2, #58625	; 0xe501
 3dc:	110e030b 	tstne	lr, fp, lsl #6
 3e0:	10061201 	andne	r1, r6, r1, lsl #4
 3e4:	02000017 	andeq	r0, r0, #23
 3e8:	13490101 	movtne	r0, #37121	; 0x9101
 3ec:	00001301 	andeq	r1, r0, r1, lsl #6
 3f0:	49002103 	stmdbmi	r0, {r0, r1, r8, sp}
 3f4:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3f8:	00260400 	eoreq	r0, r6, r0, lsl #8
 3fc:	00001349 	andeq	r1, r0, r9, asr #6
 400:	0b002405 	bleq	941c <startup-0x1fff6be4>
 404:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 408:	0600000e 	streq	r0, [r0], -lr
 40c:	08030034 	stmdaeq	r3, {r2, r4, r5}
 410:	0b3b0b3a 	bleq	ec3100 <startup-0x1f13cf00>
 414:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 418:	00001802 	andeq	r1, r0, r2, lsl #16
 41c:	3f012e07 	svccc	0x00012e07
 420:	3a0e0319 	bcc	38108c <startup-0x1fc7ef74>
 424:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 428:	11134919 	tstne	r3, r9, lsl r9
 42c:	40061201 	andmi	r1, r6, r1, lsl #4
 430:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 434:	00001301 	andeq	r1, r0, r1, lsl #6
 438:	03003408 	movweq	r3, #1032	; 0x408
 43c:	3b0b3a08 	blcc	2cec64 <startup-0x1fd3139c>
 440:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 444:	09000018 	stmdbeq	r0, {r3, r4}
 448:	0b0b0024 	bleq	2c04e0 <startup-0x1fd3fb20>
 44c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 450:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 454:	03193f01 	tsteq	r9, #1, 30
 458:	3b0b3a0e 	blcc	2cec98 <startup-0x1fd31368>
 45c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 460:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 464:	97184006 	ldrls	r4, [r8, -r6]
 468:	13011942 	movwne	r1, #6466	; 0x1942
 46c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 470:	03193f01 	tsteq	r9, #1, 30
 474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
 478:	1119270b 	tstne	r9, fp, lsl #14
 47c:	40061201 	andmi	r1, r6, r1, lsl #4
 480:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 484:	00001301 	andeq	r1, r0, r1, lsl #6
 488:	0300050c 	movweq	r0, #1292	; 0x50c
 48c:	3b0b3a08 	blcc	2cecb4 <startup-0x1fd3134c>
 490:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 494:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000ec 	andeq	r0, r0, ip, ror #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02650002 	rsbeq	r0, r5, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000fc 	strdcs	r0, [r0], -ip
  3c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03130002 	tsteq	r3, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001cc 	andcs	r0, r0, ip, asr #3
  5c:	0000057c 	andeq	r0, r0, ip, ror r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05cf0002 	strbeq	r0, [pc, #2]	; 76 <startup-0x1fffff8a>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000748 	andcs	r0, r0, r8, asr #14
  7c:	00000188 	andeq	r0, r0, r8, lsl #3
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	08b20002 	ldmeq	r2!, {r1}
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  9c:	00000104 	andeq	r0, r0, r4, lsl #2
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000fc 	strdcs	r0, [r0], -ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000aa 	andeq	r0, r0, sl, lsr #1
   4:	00680002 	rsbeq	r0, r8, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	5a010000 	bpl	40020 <startup-0x1ffbffe0>
  1c:	54492f3a 	strbpl	r2, [r9], #-3898	; 0xfffff0c6
  20:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
  24:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
  28:	6f6e696b 	svcvs	0x006e696b
  2c:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
  30:	61726574 	cmnvs	r2, r4, ror r5
  34:	6f725064 	svcvs	0x00725064
  38:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
  3c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
  40:	4c2f676e 	stcmi	7, cr6, [pc], #-440	; fffffe90 <key+0xdffff420>
  44:	2f336261 	svccs	0x00336261
  48:	70617267 	rsbvc	r7, r1, r7, ror #4
  4c:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  50:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  54:	00007961 	andeq	r7, r0, r1, ror #18
  58:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  5c:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  60:	00010063 	andeq	r0, r1, r3, rrx
  64:	6a626f00 	bvs	189bc6c <startup-0x1e764394>
  68:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
  6c:	00010068 	andeq	r0, r1, r8, rrx
  70:	05000000 	streq	r0, [r0, #-0]
  74:	00000002 	andeq	r0, r0, r2
  78:	01210320 			; <UNDEFINED> instruction: 0x01210320
  7c:	03025e13 	movweq	r5, #11795	; 0x2e13
  80:	00010100 	andeq	r0, r1, r0, lsl #2
  84:	00100205 	andseq	r0, r0, r5, lsl #4
  88:	2a032000 	bcs	c8090 <startup-0x1ff37f70>
  8c:	3d3e2f01 	ldccc	15, cr2, [lr, #-4]!
  90:	5ae6594b 	bpl	ff9965c4 <key+0xdf995b54>
  94:	31312f30 	teqcc	r1, r0, lsr pc
  98:	683d5968 	ldmdavs	sp!, {r3, r5, r6, r8, fp, ip, lr}
  9c:	8383759f 	orrhi	r7, r3, #666894336	; 0x27c00000
  a0:	02007376 	andeq	r7, r0, #-671088639	; 0xd8000001
  a4:	76030104 	strvc	r0, [r3], -r4, lsl #2
  a8:	00050220 	andeq	r0, r5, r0, lsr #4
  ac:	00a10101 	adceq	r0, r1, r1, lsl #2
  b0:	00020000 	andeq	r0, r2, r0
  b4:	0000005a 	andeq	r0, r0, sl, asr r0
  b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
  bc:	0101000d 	tsteq	r1, sp
  c0:	00000101 	andeq	r0, r0, r1, lsl #2
  c4:	00000100 	andeq	r0, r0, r0, lsl #2
  c8:	2f3a5a01 	svccs	0x003a5a01
  cc:	412f5449 			; <UNDEFINED> instruction: 0x412f5449
  d0:	4d2f3272 	sfmmi	f3, 4, [pc, #-456]!	; ffffff10 <key+0xdffff4a0>
  d4:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  d8:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  dc:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  e0:	50646172 	rsbpl	r6, r4, r2, ror r1
  e4:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  e8:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  ec:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  f0:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  f4:	72672f33 	rsbvc	r2, r7, #51, 30	; 0xcc
  f8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  fc:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 100:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 104:	65640000 	strbvs	r0, [r4, #-0]!
 108:	2e79616c 	rpwcsez	f6, f1, #4.0
 10c:	00010063 	andeq	r0, r1, r3, rrx
 110:	05000000 	streq	r0, [r0, #-0]
 114:	0000fc02 	andeq	pc, r0, r2, lsl #24
 118:	3d2f1a20 	vstmdbcc	pc!, {s2-s33}
 11c:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 120:	06010402 	streq	r0, [r1], -r2, lsl #8
 124:	3d750620 	ldclcc	6, cr0, [r5, #-128]!	; 0xffffff80
 128:	3d3d2f93 	ldccc	15, cr2, [sp, #-588]!	; 0xfffffdb4
 12c:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 130:	20060104 	andcs	r0, r6, r4, lsl #2
 134:	933d7506 	teqls	sp, #25165824	; 0x1800000
 138:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 13c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 140:	002d0304 	eoreq	r0, sp, r4, lsl #6
 144:	06010402 	streq	r0, [r1], -r2, lsl #8
 148:	4d5b063c 	ldclmi	6, cr0, [fp, #-240]	; 0xffffff10
 14c:	04027550 	streq	r7, [r2], #-1360	; 0xfffffab0
 150:	2e010100 	adfcss	f0, f1, f0
 154:	02000001 	andeq	r0, r0, #1
 158:	00006300 	andeq	r6, r0, r0, lsl #6
 15c:	fb010200 	blx	40966 <startup-0x1ffbf69a>
 160:	01000d0e 	tsteq	r0, lr, lsl #26
 164:	00010101 	andeq	r0, r1, r1, lsl #2
 168:	00010000 	andeq	r0, r1, r0
 16c:	3a5a0100 	bcc	1680574 <startup-0x1e97fa8c>
 170:	2f54492f 	svccs	0x0054492f
 174:	2f327241 	svccs	0x00327241
 178:	6b73614d 	blvs	1cd86b4 <startup-0x1e32794c>
 17c:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
 180:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 184:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
 188:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 18c:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 190:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 194:	614c2f67 	cmpvs	ip, r7, ror #30
 198:	672f3362 	strvs	r3, [pc, -r2, ror #6]!
 19c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1a0:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 1a4:	616c7073 	smcvs	50947	; 0xc703
 1a8:	67000079 	smlsdxvs	r0, r9, r0, r0
 1ac:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 1b0:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 1b4:	616c7073 	smcvs	50947	; 0xc703
 1b8:	00632e79 	rsbeq	r2, r3, r9, ror lr
 1bc:	00000001 	andeq	r0, r0, r1
 1c0:	cc020500 	cfstr32gt	mvfx0, [r2], {-0}
 1c4:	03200001 			; <UNDEFINED> instruction: 0x03200001
 1c8:	91670122 	cmnls	r7, r2, lsr #2
 1cc:	d7677783 	strble	r7, [r7, -r3, lsl #15]!
 1d0:	59916883 	ldmibpl	r1, {r0, r1, r7, fp, sp, lr}
 1d4:	03674d59 	cmneq	r7, #5696	; 0x1640
 1d8:	7203740e 	andvc	r7, r3, #234881024	; 0xe000000
 1dc:	4a0e0320 	bmi	380e64 <startup-0x1fc7f19c>
 1e0:	3d207403 	cfstrscc	mvf7, [r0, #-12]!
 1e4:	4b224b22 	blmi	892e74 <startup-0x1f76d18c>
 1e8:	4d223d22 	stcmi	13, cr3, [r2, #-136]!	; 0xffffff78
 1ec:	4b3d3d2f 	blmi	f4f6b0 <startup-0x1f0b0950>
 1f0:	3d2f3d30 	stccc	13, cr3, [pc, #-192]!	; 138 <startup-0x1ffffec8>
 1f4:	2225622f 	eorcs	r6, r5, #-268435454	; 0xf0000002
 1f8:	67be3d3d 			; <UNDEFINED> instruction: 0x67be3d3d
 1fc:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 200:	3d593d30 	ldclcc	13, cr3, [r9, #-192]	; 0xffffff40
 204:	323d593f 	eorscc	r5, sp, #1032192	; 0xfc000
 208:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 20c:	594b91cb 	stmdbpl	fp, {r0, r1, r3, r6, r7, r8, ip, pc}^
 210:	3f303d30 	svccc	0x00303d30
 214:	59313d59 	ldmdbpl	r1!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 218:	3d3d313d 	ldfccs	f3, [sp, #-244]!	; 0xffffff0c
 21c:	3d91773d 	ldccc	7, cr7, [r1, #244]	; 0xf4
 220:	4d833d59 	stcmi	13, cr3, [r3, #356]	; 0x164
 224:	4b593d91 	blmi	164f870 <startup-0x1e9b0790>
 228:	59674d83 	stmdbpl	r7!, {r0, r1, r7, r8, sl, fp, lr}^
 22c:	3d2f4d67 	stccc	13, cr4, [pc, #-412]!	; 98 <startup-0x1fffff68>
 230:	3e3e3d3e 	mrccc	13, 1, r3, cr14, cr14, {1}
 234:	4b4b4b4b 	blmi	12d2f68 <startup-0x1ed2d098>
 238:	3d3f3d4c 	ldccc	13, cr3, [pc, #-304]!	; 110 <startup-0x1ffffef0>
 23c:	004bad3d 	subeq	sl, fp, sp, lsr sp
 240:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 244:	03040200 	movweq	r0, #16896	; 0x4200
 248:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 24c:	003c0601 	eorseq	r0, ip, r1, lsl #12
 250:	06020402 	streq	r0, [r2], -r2, lsl #8
 254:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
 258:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 25c:	08684d43 	stmdaeq	r8!, {r0, r1, r6, r8, sl, fp, lr}^
 260:	5aae4ba3 	bpl	feb930f4 <key+0xdeb92684>
 264:	5a5a5a5a 	bpl	1696bd4 <startup-0x1e96942c>
 268:	235a5a5a 	cmpcs	sl, #368640	; 0x5a000
 26c:	4b3d7a3d 	blmi	f5eb68 <startup-0x1f0a1498>
 270:	c9694b76 	stmdbgt	r9!, {r1, r2, r4, r5, r6, r8, r9, fp, lr}^
 274:	3dc99fd7 	stclcc	15, cr9, [r9, #860]	; 0x35c
 278:	4f039fae 	svcmi	0x00039fae
 27c:	203203ac 	eorscs	r0, r2, ip, lsr #7
 280:	01000602 	tsteq	r0, r2, lsl #12
 284:	0000cb01 	andeq	ip, r0, r1, lsl #22
 288:	5b000200 	blpl	a90 <startup-0x1ffff570>
 28c:	02000000 	andeq	r0, r0, #0
 290:	0d0efb01 	vstreq	d15, [lr, #-4]
 294:	01010100 	mrseq	r0, (UNDEF: 17)
 298:	00000001 	andeq	r0, r0, r1
 29c:	01000001 	tsteq	r0, r1
 2a0:	492f3a5a 	stmdbmi	pc!, {r1, r3, r4, r6, r9, fp, ip, sp}	; <UNPREDICTABLE>
 2a4:	72412f54 	subvc	r2, r1, #84, 30	; 0x150
 2a8:	614d2f32 	cmpvs	sp, r2, lsr pc
 2ac:	6e696b73 	vmovvs.8	d9[7], r6
 2b0:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 2b4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 2b8:	72506461 	subsvc	r6, r0, #1627389952	; 0x61000000
 2bc:	6172676f 	cmnvs	r2, pc, ror #14
 2c0:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 2c4:	2f676e69 	svccs	0x00676e69
 2c8:	3362614c 	cmncc	r2, #76, 2
 2cc:	6172672f 	cmnvs	r2, pc, lsr #14
 2d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2d4:	70736964 	rsbsvc	r6, r3, r4, ror #18
 2d8:	0079616c 	rsbseq	r6, r9, ip, ror #2
 2dc:	6a626f00 	bvs	189bee4 <startup-0x1e76411c>
 2e0:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 2e4:	00010063 	andeq	r0, r1, r3, rrx
 2e8:	05000000 	streq	r0, [r0, #-0]
 2ec:	00074802 	andeq	r4, r7, r2, lsl #16
 2f0:	01190320 	tsteq	r9, r0, lsr #6
 2f4:	4d3d3d67 	ldcmi	13, cr3, [sp, #-412]!	; 0xfffffe64
 2f8:	003e3d4d 	eorseq	r3, lr, sp, asr #26
 2fc:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 300:	03040200 	movweq	r0, #16896	; 0x4200
 304:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
 308:	0200ae03 	andeq	sl, r0, #3, 28	; 0x30
 30c:	00d20304 	sbcseq	r0, r2, r4, lsl #6
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	4d6c063c 	stclmi	6, cr0, [ip, #-240]!	; 0xffffff10
 318:	003e3d4c 	eorseq	r3, lr, ip, asr #26
 31c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 320:	03040200 	movweq	r0, #16896	; 0x4200
 324:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 328:	02009203 	andeq	r9, r0, #805306368	; 0x30000000
 32c:	009a0304 	addseq	r0, sl, r4, lsl #6
 330:	06010402 	streq	r0, [r1], -r2, lsl #8
 334:	4d6c063c 	stclmi	6, cr0, [ip, #-240]!	; 0xffffff10
 338:	76754b4b 	ldrbtvc	r4, [r5], -fp, asr #22
 33c:	01040200 	mrseq	r0, R12_usr
 340:	83064a06 	movwhi	r4, #27142	; 0x6a06
 344:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 348:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 34c:	024b5a83 	subeq	r5, fp, #536576	; 0x83000
 350:	01010004 	tsteq	r1, r4
 354:	000000b3 	strheq	r0, [r0], -r3
 358:	005d0002 	subseq	r0, sp, r2
 35c:	01020000 	mrseq	r0, (UNDEF: 2)
 360:	000d0efb 	strdeq	r0, [sp], -fp
 364:	01010101 	tsteq	r1, r1, lsl #2
 368:	01000000 	mrseq	r0, (UNDEF: 0)
 36c:	5a010000 	bpl	40374 <startup-0x1ffbfc8c>
 370:	54492f3a 	strbpl	r2, [r9], #-3898	; 0xfffff0c6
 374:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
 378:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
 37c:	6f6e696b 	svcvs	0x006e696b
 380:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 384:	61726574 	cmnvs	r2, r4, ror r5
 388:	6f725064 	svcvs	0x00725064
 38c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 390:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 394:	4c2f676e 	stcmi	7, cr6, [pc], #-440	; 1e4 <startup-0x1ffffe1c>
 398:	2f336261 	svccs	0x00336261
 39c:	70617267 	rsbvc	r7, r1, r7, ror #4
 3a0:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 3a4:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 3a8:	00007961 	andeq	r7, r0, r1, ror #18
 3ac:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 3b0:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 3b4:	0100632e 	tsteq	r0, lr, lsr #6
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	08d00205 	ldmeq	r0, {r0, r2, r9}^
 3c0:	0a032000 	beq	c83c8 <startup-0x1ff37c38>
 3c4:	4b914d01 	blmi	fe4537d0 <key+0xde452d60>
 3c8:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 3cc:	004b4176 	subeq	r4, fp, r6, ror r1
 3d0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3d4:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3dc:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3e4:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3e8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3ec:	2f2f0658 	svccs	0x002f0658
 3f0:	4b3d3e76 	blmi	f4fdd0 <startup-0x1f0b0230>
 3f4:	00593d4b 	subseq	r3, r9, fp, asr #26
 3f8:	6f020402 	svcvs	0x00020402
 3fc:	01040200 	mrseq	r0, R12_usr
 400:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 404:	0702213d 	smladxeq	r2, sp, r1, r2
 408:	Address 0x00000408 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  10:	2f3a5a00 	svccs	0x003a5a00
  14:	412f5449 			; <UNDEFINED> instruction: 0x412f5449
  18:	4d2f3272 	sfmmi	f3, 4, [pc, #-456]!	; fffffe58 <key+0xdffff3e8>
  1c:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  20:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  24:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  28:	50646172 	rsbpl	r6, r4, r2, ror r1
  2c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  30:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  34:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  38:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
  3c:	72672f33 	rsbvc	r2, r7, #51, 30	; 0xcc
  40:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  44:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
  48:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
  4c:	6174732f 	cmnvs	r4, pc, lsr #6
  50:	70757472 	rsbsvc	r7, r5, r2, ror r4
  54:	7300632e 	movwvc	r6, #814	; 0x32e
  58:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
  5c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
  60:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
  64:	70615f74 	rsbvc	r5, r1, r4, ror pc
  68:	61620070 	smcvs	8192	; 0x2000
  6c:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
  70:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  74:	00797274 	rsbseq	r7, r9, r4, ror r2
  78:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  7c:	5000746e 	andpl	r7, r0, lr, ror #8
  80:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
  84:	72696400 	rsbvc	r6, r9, #0, 8
  88:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
  8c:	0078657a 	rsbseq	r6, r8, sl, ror r5
  90:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
  94:	6e750079 	mrcvs	0, 3, r0, cr5, cr9, {3}
  98:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  9c:	63206465 			; <UNDEFINED> instruction: 0x63206465
  a0:	00726168 	rsbseq	r6, r2, r8, ror #2
  a4:	20554e47 	subscs	r4, r5, r7, asr #28
  a8:	20393943 	eorscs	r3, r9, r3, asr #18
  ac:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  b0:	30322031 	eorscc	r2, r2, r1, lsr r0
  b4:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  b8:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  bc:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  c0:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  c4:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  c8:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  cc:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  d0:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  d4:	6172622d 	cmnvs	r2, sp, lsr #4
  d8:	2068636e 	rsbcs	r6, r8, lr, ror #6
  dc:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  e0:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  e4:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  e8:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  ec:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  f0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  f4:	616d2d20 	cmnvs	sp, r0, lsr #26
  f8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  fc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 100:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 104:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 108:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 10c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 110:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 114:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 118:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 11c:	616d2d20 	cmnvs	sp, r0, lsr #26
 120:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 124:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 128:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 12c:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 130:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 134:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 138:	00393963 	eorseq	r3, r9, r3, ror #18
 13c:	64707368 	ldrbtvs	r7, [r0], #-872	; 0xfffffc98
 140:	45475000 	strbmi	r5, [r7, #-0]
 144:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 148:	70005952 	andvc	r5, r0, r2, asr r9
 14c:	0079736f 	rsbseq	r7, r9, pc, ror #6
 150:	64707376 	ldrbtvs	r7, [r0], #-886	; 0xfffffc8a
 154:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 158:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 15c:	61007972 	tstvs	r0, r2, ror r9
 160:	00766772 	rsbseq	r6, r6, r2, ror r7
 164:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 168:	00707574 	rsbseq	r7, r0, r4, ror r5
 16c:	63677261 	cmnvs	r7, #268435462	; 0x10000006
 170:	72696400 	rsbvc	r6, r9, #0, 8
 174:	756e0079 	strbvc	r0, [lr, #-121]!	; 0xffffff87
 178:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 17c:	0073746e 	rsbseq	r7, r3, lr, ror #8
 180:	6e69616d 	powvsez	f6, f1, #5.0
 184:	424f5000 	submi	r5, pc, #0
 188:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 18c:	6c616200 	sfmvs	f6, 2, [r1], #-0
 190:	6973006c 	ldmdbvs	r3!, {r2, r3, r5, r6}^
 194:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 198:	6d006570 	cfstr32vs	mvfx6, [r0, #-448]	; 0xfffffe40
 19c:	0065766f 	rsbeq	r7, r5, pc, ror #12
 1a0:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 1a4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 1a8:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 1ac:	736f7000 	cmnvc	pc, #0
 1b0:	4f740078 	svcmi	0x00740078
 1b4:	64006a62 	strvs	r6, [r0], #-2658	; 0xfffff59e
 1b8:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 1bc:	6b696d5f 	blvs	1a5b740 <startup-0x1e5a48c0>
 1c0:	5a006f72 	bpl	1bf90 <startup-0x1ffe4070>
 1c4:	54492f3a 	strbpl	r2, [r9], #-3898	; 0xfffff0c6
 1c8:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
 1cc:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
 1d0:	6f6e696b 	svcvs	0x006e696b
 1d4:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 1d8:	61726574 	cmnvs	r2, r4, ror r5
 1dc:	6f725064 	svcvs	0x00725064
 1e0:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 1e4:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 1e8:	4c2f676e 	stcmi	7, cr6, [pc], #-440	; 38 <startup-0x1fffffc8>
 1ec:	2f336261 	svccs	0x00336261
 1f0:	70617267 	rsbvc	r7, r1, r7, ror #4
 1f4:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 1f8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1fc:	642f7961 	strtvs	r7, [pc], #-2401	; 204 <startup-0x1ffffdfc>
 200:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 204:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 208:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 20c:	3030355f 	eorscc	r3, r0, pc, asr r5
 210:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 214:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 218:	3035325f 	eorscc	r3, r5, pc, asr r2
 21c:	6700736e 	strvs	r7, [r0, -lr, ror #6]
 220:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 224:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 228:	5f6c7274 	svcpl	0x006c7274
 22c:	5f746962 	svcpl	0x00746962
 230:	5f746573 	svcpl	0x00746573
 234:	61656c63 	cmnvs	r5, r3, ror #24
 238:	72670072 	rsbvc	r0, r7, #114	; 0x72
 23c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 240:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 244:	5f657469 	svcpl	0x00657469
 248:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 24c:	00646e61 	rsbeq	r6, r4, r1, ror #28
 250:	61656c63 	cmnvs	r5, r3, ror #24
 254:	5a007872 	bpl	1e424 <startup-0x1ffe1bdc>
 258:	54492f3a 	strbpl	r2, [r9], #-3898	; 0xfffff0c6
 25c:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
 260:	73614d2f 	cmnvc	r1, #3008	; 0xbc0
 264:	6f6e696b 	svcvs	0x006e696b
 268:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 26c:	61726574 	cmnvs	r2, r4, ror r5
 270:	6f725064 	svcvs	0x00725064
 274:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 278:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 27c:	4c2f676e 	stcmi	7, cr6, [pc], #-440	; cc <startup-0x1fffff34>
 280:	2f336261 	svccs	0x00336261
 284:	70617267 	rsbvc	r7, r1, r7, ror #4
 288:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 28c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 290:	672f7961 	strvs	r7, [pc, -r1, ror #18]!
 294:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 298:	69646369 	stmdbvs	r4!, {r0, r3, r5, r6, r8, r9, sp, lr}^
 29c:	616c7073 	smcvs	50947	; 0xc703
 2a0:	00632e79 	rsbeq	r2, r3, r9, ror lr
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 2b0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 2b4:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
 2b8:	006c6578 	rsbeq	r6, ip, r8, ror r5
 2bc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2c0:	5f636968 	svcpl	0x00636968
 2c4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 2c8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2cc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 2d0:	78007261 	stmdavc	r0, {r0, r5, r6, r9, ip, sp, lr}
 2d4:	7379665f 	cmnvc	r9, #99614720	; 0x5f00000
 2d8:	006b7369 	rsbeq	r7, fp, r9, ror #6
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 2e8:	6165725f 	cmnvs	r5, pc, asr r2
 2ec:	67007964 	strvs	r7, [r0, -r4, ror #18]
 2f0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2f4:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 2f8:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 2fc:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 300:	65730061 	ldrbvs	r0, [r3, #-97]!	; 0xffffff9f
 304:	6d007874 	stcvs	8, cr7, [r0, #-464]	; 0xfffffe30
 308:	006b7361 	rsbeq	r7, fp, r1, ror #6
 30c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 310:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 314:	70617267 	rsbvc	r7, r1, r7, ror #4
 318:	5f636968 	svcpl	0x00636968
 31c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 320:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 324:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 328:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 32c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 164 <startup-0x1ffffe9c>
 330:	0072656c 	rsbseq	r6, r2, ip, ror #10
 334:	706d6574 	rsbvc	r6, sp, r4, ror r5
 338:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 33c:	67007865 	strvs	r7, [r0, -r5, ror #16]
 340:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 344:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 348:	00646165 	rsbeq	r6, r4, r5, ror #2
 34c:	70617267 	rsbvc	r7, r1, r7, ror #4
 350:	5f636968 	svcpl	0x00636968
 354:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 358:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 35c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 360:	67617000 	strbvs	r7, [r1, -r0]!
 364:	61760065 	cmnvs	r6, r5, rrx
 368:	0065756c 	rsbeq	r7, r5, ip, ror #10
 36c:	70617267 	rsbvc	r7, r1, r7, ror #4
 370:	5f636968 	svcpl	0x00636968
 374:	61656c63 	cmnvs	r5, r3, ror #24
 378:	63735f72 	cmnvs	r3, #456	; 0x1c8
 37c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 380:	61726700 	cmnvs	r2, r0, lsl #14
 384:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 388:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 38c:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 390:	00657a69 	rsbeq	r7, r5, r9, ror #20
 394:	492f3a5a 	stmdbmi	pc!, {r1, r3, r4, r6, r9, fp, ip, sp}	; <UNPREDICTABLE>
 398:	72412f54 	subvc	r2, r1, #84, 30	; 0x150
 39c:	614d2f32 	cmpvs	sp, r2, lsr pc
 3a0:	6e696b73 	vmovvs.8	d9[7], r6
 3a4:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 3a8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 3ac:	72506461 	subsvc	r6, r0, #1627389952	; 0x61000000
 3b0:	6172676f 	cmnvs	r2, pc, ror #14
 3b4:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 3b8:	2f676e69 	svccs	0x00676e69
 3bc:	3362614c 	cmncc	r2, #76, 2
 3c0:	6172672f 	cmnvs	r2, pc, lsr #14
 3c4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 3c8:	70736964 	rsbsvc	r6, r3, r4, ror #18
 3cc:	2f79616c 	svccs	0x0079616c
 3d0:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3d4:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 3d8:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 3dc:	00786465 	rsbseq	r6, r8, r5, ror #8
 3e0:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 3e4:	666f0078 			; <UNDEFINED> instruction: 0x666f0078
 3e8:	00797366 	rsbseq	r7, r9, r6, ror #6
 3ec:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 3f0:	64007964 	strvs	r7, [r0], #-2404	; 0xfffff69c
 3f4:	5f776172 	svcpl	0x00776172
 3f8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3fc:	63007463 	movwvs	r7, #1123	; 0x463
 400:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 404:	6a626f5f 	bvs	189c188 <startup-0x1e763e78>
 408:	00746365 	rsbseq	r6, r4, r5, ror #6
 40c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 410:	6a626f5f 	bvs	189c194 <startup-0x1e763e6c>
 414:	00746365 	rsbseq	r6, r4, r5, ror #6
 418:	5f746573 	svcpl	0x00746573
 41c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 420:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 424:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 428:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 42c:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 430:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
 434:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 438:	6b006e6d 	blvs	1bdf4 <startup-0x1ffe420c>
 43c:	6f627965 	svcvs	0x00627965
 440:	00647261 	rsbeq	r7, r4, r1, ror #4
 444:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 448:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 44c:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 450:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 454:	2f3a5a00 	svccs	0x003a5a00
 458:	412f5449 			; <UNDEFINED> instruction: 0x412f5449
 45c:	4d2f3272 	sfmmi	f3, 4, [pc, #-456]!	; 29c <startup-0x1ffffd64>
 460:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 464:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 468:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 46c:	50646172 	rsbpl	r6, r4, r2, ror r1
 470:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 474:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 478:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 47c:	62614c2f 	rsbvs	r4, r1, #12032	; 0x2f00
 480:	72672f33 	rsbvc	r2, r7, #51, 30	; 0xcc
 484:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 488:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 48c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 490:	79656b2f 	stmdbvc	r5!, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 494:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 498:	00632e64 	rsbeq	r2, r3, r4, ror #28

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000040 	andeq	r0, r0, r0, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000020 	andeq	r0, r0, r0, lsr #32
  40:	00000000 	andeq	r0, r0, r0
  44:	20000050 	andcs	r0, r0, r0, asr r0
  48:	000000ac 	andeq	r0, r0, ip, lsr #1
  4c:	400c0e41 	andmi	r0, ip, r1, asr #28
  50:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  54:	018e4002 	orreq	r4, lr, r2
  58:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
  5c:	0000070d 	andeq	r0, r0, sp, lsl #14
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	200000fc 	strdcs	r0, [r0], -ip
  7c:	00000044 	andeq	r0, r0, r4, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	00000018 	andeq	r0, r0, r8, lsl r0
  90:	00000060 	andeq	r0, r0, r0, rrx
  94:	20000140 	andcs	r0, r0, r0, asr #2
  98:	00000044 	andeq	r0, r0, r4, asr #32
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000060 	andeq	r0, r0, r0, rrx
  b0:	20000184 	andcs	r0, r0, r4, lsl #3
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	180e4101 	stmdane	lr, {r0, r8, lr}
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	200001ae 	andcs	r0, r0, lr, lsr #3
  d4:	0000001e 	andeq	r0, r0, lr, lsl r0
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	100e4101 	andne	r4, lr, r1, lsl #2
  e4:	00070d41 	andeq	r0, r7, r1, asr #26
  e8:	0000000c 	andeq	r0, r0, ip
  ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f0:	7c020001 	stcvc	0, cr0, [r2], {1}
  f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000e8 	andeq	r0, r0, r8, ror #1
 100:	200001cc 	andcs	r0, r0, ip, asr #3
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000e8 	andeq	r0, r0, r8, ror #1
 120:	20000208 	andcs	r0, r0, r8, lsl #4
 124:	00000044 	andeq	r0, r0, r4, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000e8 	andeq	r0, r0, r8, ror #1
 140:	2000024c 	andcs	r0, r0, ip, asr #4
 144:	0000002e 	andeq	r0, r0, lr, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000e8 	andeq	r0, r0, r8, ror #1
 160:	2000027a 	andcs	r0, r0, sl, ror r2
 164:	00000052 	andeq	r0, r0, r2, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	00000018 	andeq	r0, r0, r8, lsl r0
 17c:	000000e8 	andeq	r0, r0, r8, ror #1
 180:	200002cc 	andcs	r0, r0, ip, asr #5
 184:	00000064 	andeq	r0, r0, r4, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000e8 	andeq	r0, r0, r8, ror #1
 19c:	20000330 	andcs	r0, r0, r0, lsr r3
 1a0:	00000090 	muleq	r0, r0, r0
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000e8 	andeq	r0, r0, r8, ror #1
 1bc:	200003c0 	andcs	r0, r0, r0, asr #7
 1c0:	00000080 	andeq	r0, r0, r0, lsl #1
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000e8 	andeq	r0, r0, r8, ror #1
 1dc:	20000440 	andcs	r0, r0, r0, asr #8
 1e0:	00000040 	andeq	r0, r0, r0, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000000e8 	andeq	r0, r0, r8, ror #1
 1fc:	20000480 	andcs	r0, r0, r0, lsl #9
 200:	00000042 	andeq	r0, r0, r2, asr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	000000e8 	andeq	r0, r0, r8, ror #1
 21c:	200004c2 	andcs	r0, r0, r2, asr #9
 220:	0000002a 	andeq	r0, r0, sl, lsr #32
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	100e4101 	andne	r4, lr, r1, lsl #2
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	000000e8 	andeq	r0, r0, r8, ror #1
 23c:	200004ec 	andcs	r0, r0, ip, ror #9
 240:	00000056 	andeq	r0, r0, r6, asr r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000000e8 	andeq	r0, r0, r8, ror #1
 258:	20000542 	andcs	r0, r0, r2, asr #10
 25c:	00000058 	andeq	r0, r0, r8, asr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000020 	andeq	r0, r0, r0, lsr #32
 274:	000000e8 	andeq	r0, r0, r8, ror #1
 278:	2000059a 	mulcs	r0, sl, r5
 27c:	000001ae 	andeq	r0, r0, lr, lsr #3
 280:	400c0e41 	andmi	r0, ip, r1, asr #28
 284:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 288:	018e4002 	orreq	r4, lr, r2
 28c:	41300e41 	teqmi	r0, r1, asr #28
 290:	0000070d 	andeq	r0, r0, sp, lsl #14
 294:	0000000c 	andeq	r0, r0, ip
 298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000294 	muleq	r0, r4, r2
 2ac:	20000748 	andcs	r0, r0, r8, asr #14
 2b0:	00000020 	andeq	r0, r0, r0, lsr #32
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2c0:	00070d41 	andeq	r0, r7, r1, asr #26
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000294 	muleq	r0, r4, r2
 2cc:	20000768 	andcs	r0, r0, r8, ror #14
 2d0:	0000007c 	andeq	r0, r0, ip, ror r0
 2d4:	40080e41 	andmi	r0, r8, r1, asr #28
 2d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2dc:	200e4101 	andcs	r4, lr, r1, lsl #2
 2e0:	00070d41 	andeq	r0, r7, r1, asr #26
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000294 	muleq	r0, r4, r2
 2ec:	200007e4 	andcs	r0, r0, r4, ror #15
 2f0:	0000006c 	andeq	r0, r0, ip, rrx
 2f4:	40080e41 	andmi	r0, r8, r1, asr #28
 2f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2fc:	280e4101 	stmdacs	lr, {r0, r8, lr}
 300:	00070d41 	andeq	r0, r7, r1, asr #26
 304:	0000001c 	andeq	r0, r0, ip, lsl r0
 308:	00000294 	muleq	r0, r4, r2
 30c:	20000850 	andcs	r0, r0, r0, asr r8
 310:	00000080 	andeq	r0, r0, r0, lsl #1
 314:	40080e41 	andmi	r0, r8, r1, asr #28
 318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 31c:	100e4101 	andne	r4, lr, r1, lsl #2
 320:	00070d41 	andeq	r0, r7, r1, asr #26
 324:	0000000c 	andeq	r0, r0, ip
 328:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 32c:	7c020001 	stcvc	0, cr0, [r2], {1}
 330:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000324 	andeq	r0, r0, r4, lsr #6
 33c:	200008d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 340:	00000050 	andeq	r0, r0, r0, asr r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	100e4101 	andne	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000324 	andeq	r0, r0, r4, lsr #6
 35c:	20000920 	andcs	r0, r0, r0, lsr #18
 360:	00000058 	andeq	r0, r0, r8, asr r0
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	100e4101 	andne	r4, lr, r1, lsl #2
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000324 	andeq	r0, r0, r4, lsr #6
 37c:	20000978 	andcs	r0, r0, r8, ror r9
 380:	0000005c 	andeq	r0, r0, ip, asr r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
