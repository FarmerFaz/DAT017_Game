
./Debug/SideScroller.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
};

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup (void) {
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f824 	bl	20000050 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	PORT_MODER = 0x55555555;
20000014:	4b08      	ldr	r3, [pc, #32]	; (20000038 <init_app+0x28>)
20000016:	4a09      	ldr	r2, [pc, #36]	; (2000003c <init_app+0x2c>)
20000018:	601a      	str	r2, [r3, #0]
	
	GPIO_MODER = 0x55005555;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <init_app+0x30>)
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <init_app+0x34>)
2000001e:	601a      	str	r2, [r3, #0]
	GPIO_PUPDR = 0x00AA0000;
20000020:	4b09      	ldr	r3, [pc, #36]	; (20000048 <init_app+0x38>)
20000022:	22aa      	movs	r2, #170	; 0xaa
20000024:	0412      	lsls	r2, r2, #16
20000026:	601a      	str	r2, [r3, #0]
	GPIO_ODR_HIGH &= 0x00FF;
20000028:	4b08      	ldr	r3, [pc, #32]	; (2000004c <init_app+0x3c>)
2000002a:	4a08      	ldr	r2, [pc, #32]	; (2000004c <init_app+0x3c>)
2000002c:	7812      	ldrb	r2, [r2, #0]
2000002e:	b2d2      	uxtb	r2, r2
20000030:	701a      	strb	r2, [r3, #0]
}
20000032:	46c0      	nop			; (mov r8, r8)
20000034:	46bd      	mov	sp, r7
20000036:	bd80      	pop	{r7, pc}
20000038:	40021000 	andmi	r1, r2, r0
2000003c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000040:	40020c00 	andmi	r0, r2, r0, lsl #24
20000044:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000048:	40020c0c 	andmi	r0, r2, ip, lsl #24
2000004c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000050 <main>:

int main(int argc, char **argv) {
20000050:	b590      	push	{r4, r7, lr}
20000052:	b085      	sub	sp, #20
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
20000058:	6039      	str	r1, [r7, #0]
	char c,hspd,vspd;
	POBJECT p = &ball;
2000005a:	4b26      	ldr	r3, [pc, #152]	; (200000f4 <main+0xa4>)
2000005c:	60fb      	str	r3, [r7, #12]
	
	init_app();
2000005e:	f7ff ffd7 	bl	20000010 <init_app>
	graphic_initialize();
20000062:	f000 fa43 	bl	200004ec <graphic_initialize>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
20000066:	f000 fa6c 	bl	20000542 <graphic_clear_screen>
	#endif
	
	p->set_speed(p,4,1);
2000006a:	68fb      	ldr	r3, [r7, #12]
2000006c:	6a1b      	ldr	r3, [r3, #32]
2000006e:	68f8      	ldr	r0, [r7, #12]
20000070:	2201      	movs	r2, #1
20000072:	2104      	movs	r1, #4
20000074:	4798      	blx	r3
	while(1) {
		p->move(p);
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	69db      	ldr	r3, [r3, #28]
2000007a:	68fa      	ldr	r2, [r7, #12]
2000007c:	0010      	movs	r0, r2
2000007e:	4798      	blx	r3
		delay_milli(40);
20000080:	2028      	movs	r0, #40	; 0x28
20000082:	f000 f894 	bl	200001ae <delay_milli>
		c = keyboard();
20000086:	230b      	movs	r3, #11
20000088:	18fc      	adds	r4, r7, r3
2000008a:	f000 fbb1 	bl	200007f0 <keyboard>
2000008e:	0003      	movs	r3, r0
20000090:	7023      	strb	r3, [r4, #0]
		
		switch(c) {
20000092:	230b      	movs	r3, #11
20000094:	18fb      	adds	r3, r7, r3
20000096:	781b      	ldrb	r3, [r3, #0]
20000098:	2b08      	cmp	r3, #8
2000009a:	d822      	bhi.n	200000e2 <main+0x92>
2000009c:	009a      	lsls	r2, r3, #2
2000009e:	4b16      	ldr	r3, [pc, #88]	; (200000f8 <main+0xa8>)
200000a0:	18d3      	adds	r3, r2, r3
200000a2:	681b      	ldr	r3, [r3, #0]
200000a4:	469f      	mov	pc, r3
			case 6: p->set_speed(p,2,0); break;
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	6a1b      	ldr	r3, [r3, #32]
200000aa:	68f8      	ldr	r0, [r7, #12]
200000ac:	2200      	movs	r2, #0
200000ae:	2102      	movs	r1, #2
200000b0:	4798      	blx	r3
200000b2:	e01e      	b.n	200000f2 <main+0xa2>
			case 4: p->set_speed(p,-2,0); break;
200000b4:	68fb      	ldr	r3, [r7, #12]
200000b6:	6a1b      	ldr	r3, [r3, #32]
200000b8:	2202      	movs	r2, #2
200000ba:	4251      	negs	r1, r2
200000bc:	68f8      	ldr	r0, [r7, #12]
200000be:	2200      	movs	r2, #0
200000c0:	4798      	blx	r3
200000c2:	e016      	b.n	200000f2 <main+0xa2>
			case 2: p->set_speed(p,0,-2); break;
200000c4:	68fb      	ldr	r3, [r7, #12]
200000c6:	6a1b      	ldr	r3, [r3, #32]
200000c8:	2202      	movs	r2, #2
200000ca:	4252      	negs	r2, r2
200000cc:	68f8      	ldr	r0, [r7, #12]
200000ce:	2100      	movs	r1, #0
200000d0:	4798      	blx	r3
200000d2:	e00e      	b.n	200000f2 <main+0xa2>
			case 8: p->set_speed(p,0,2); break;
200000d4:	68fb      	ldr	r3, [r7, #12]
200000d6:	6a1b      	ldr	r3, [r3, #32]
200000d8:	68f8      	ldr	r0, [r7, #12]
200000da:	2202      	movs	r2, #2
200000dc:	2100      	movs	r1, #0
200000de:	4798      	blx	r3
200000e0:	e007      	b.n	200000f2 <main+0xa2>
			case 5: break;
			default: p->set_speed(p,0,0);
200000e2:	68fb      	ldr	r3, [r7, #12]
200000e4:	6a1b      	ldr	r3, [r3, #32]
200000e6:	68f8      	ldr	r0, [r7, #12]
200000e8:	2200      	movs	r2, #0
200000ea:	2100      	movs	r1, #0
200000ec:	4798      	blx	r3
200000ee:	e7c2      	b.n	20000076 <main+0x26>
			case 5: break;
200000f0:	46c0      	nop			; (mov r8, r8)
	while(1) {
200000f2:	e7c0      	b.n	20000076 <main+0x26>
200000f4:	20000a08 	andcs	r0, r0, r8, lsl #20
200000f8:	20000a2c 	andcs	r0, r0, ip, lsr #20

200000fc <delay_250ns>:
#define		COUNTFLAG	*((volatile unsigned int *) (STK_CTRL+0xF))
#define 	STK_LOAD	*((volatile unsigned int *) (SYS_TICK+0x4))
#define 	STK_VAL		*((volatile unsigned int *) (SYS_TICK+0x8))

// delays with 41 clock cycles (42-1, approx 250ns)
void delay_250ns(void) {
200000fc:	b580      	push	{r7, lr}
200000fe:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000100:	4b0c      	ldr	r3, [pc, #48]	; (20000134 <delay_250ns+0x38>)
20000102:	2200      	movs	r2, #0
20000104:	601a      	str	r2, [r3, #0]
	STK_LOAD = 41;	// how many cycles you want to delay with
20000106:	4b0c      	ldr	r3, [pc, #48]	; (20000138 <delay_250ns+0x3c>)
20000108:	2229      	movs	r2, #41	; 0x29
2000010a:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
2000010c:	4b0b      	ldr	r3, [pc, #44]	; (2000013c <delay_250ns+0x40>)
2000010e:	2200      	movs	r2, #0
20000110:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;	// activates timer
20000112:	4b08      	ldr	r3, [pc, #32]	; (20000134 <delay_250ns+0x38>)
20000114:	2205      	movs	r2, #5
20000116:	601a      	str	r2, [r3, #0]
	while(!(COUNTFLAG & 1)) {}
20000118:	46c0      	nop			; (mov r8, r8)
2000011a:	4b06      	ldr	r3, [pc, #24]	; (20000134 <delay_250ns+0x38>)
2000011c:	681b      	ldr	r3, [r3, #0]
2000011e:	330f      	adds	r3, #15
20000120:	681b      	ldr	r3, [r3, #0]
20000122:	2201      	movs	r2, #1
20000124:	4013      	ands	r3, r2
20000126:	d0f8      	beq.n	2000011a <delay_250ns+0x1e>
	STK_CTRL = 0;
20000128:	4b02      	ldr	r3, [pc, #8]	; (20000134 <delay_250ns+0x38>)
2000012a:	2200      	movs	r2, #0
2000012c:	601a      	str	r2, [r3, #0]
}
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	46bd      	mov	sp, r7
20000132:	bd80      	pop	{r7, pc}
20000134:	e000e010 	and	lr, r0, r0, lsl r0
20000138:	e000e014 	and	lr, r0, r4, lsl r0
2000013c:	e000e018 	and	lr, r0, r8, lsl r0

20000140 <delay_500ns>:

// delays with 83 clock cycles (84-1, approx 500ns)
void delay_500ns() {
20000140:	b580      	push	{r7, lr}
20000142:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000144:	4b0c      	ldr	r3, [pc, #48]	; (20000178 <delay_500ns+0x38>)
20000146:	2200      	movs	r2, #0
20000148:	601a      	str	r2, [r3, #0]
	STK_LOAD = 83;
2000014a:	4b0c      	ldr	r3, [pc, #48]	; (2000017c <delay_500ns+0x3c>)
2000014c:	2253      	movs	r2, #83	; 0x53
2000014e:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000150:	4b0b      	ldr	r3, [pc, #44]	; (20000180 <delay_500ns+0x40>)
20000152:	2200      	movs	r2, #0
20000154:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
20000156:	4b08      	ldr	r3, [pc, #32]	; (20000178 <delay_500ns+0x38>)
20000158:	2205      	movs	r2, #5
2000015a:	601a      	str	r2, [r3, #0]
	while(!(COUNTFLAG & 1)) {}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	4b06      	ldr	r3, [pc, #24]	; (20000178 <delay_500ns+0x38>)
20000160:	681b      	ldr	r3, [r3, #0]
20000162:	330f      	adds	r3, #15
20000164:	681b      	ldr	r3, [r3, #0]
20000166:	2201      	movs	r2, #1
20000168:	4013      	ands	r3, r2
2000016a:	d0f8      	beq.n	2000015e <delay_500ns+0x1e>
	STK_CTRL = 0;
2000016c:	4b02      	ldr	r3, [pc, #8]	; (20000178 <delay_500ns+0x38>)
2000016e:	2200      	movs	r2, #0
20000170:	601a      	str	r2, [r3, #0]
}
20000172:	46c0      	nop			; (mov r8, r8)
20000174:	46bd      	mov	sp, r7
20000176:	bd80      	pop	{r7, pc}
20000178:	e000e010 	and	lr, r0, r0, lsl r0
2000017c:	e000e014 	and	lr, r0, r4, lsl r0
20000180:	e000e018 	and	lr, r0, r8, lsl r0

20000184 <delay_mikro>:

// runs delay_250ns four times per us
void delay_mikro(unsigned int us) {
20000184:	b580      	push	{r7, lr}
20000186:	b084      	sub	sp, #16
20000188:	af00      	add	r7, sp, #0
2000018a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4*us; i++) {
2000018c:	2300      	movs	r3, #0
2000018e:	60fb      	str	r3, [r7, #12]
20000190:	e004      	b.n	2000019c <delay_mikro+0x18>
		delay_250ns();
20000192:	f7ff ffb3 	bl	200000fc <delay_250ns>
	for(int i = 0; i < 4*us; i++) {
20000196:	68fb      	ldr	r3, [r7, #12]
20000198:	3301      	adds	r3, #1
2000019a:	60fb      	str	r3, [r7, #12]
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	009a      	lsls	r2, r3, #2
200001a0:	68fb      	ldr	r3, [r7, #12]
200001a2:	429a      	cmp	r2, r3
200001a4:	d8f5      	bhi.n	20000192 <delay_mikro+0xe>
	}
}
200001a6:	46c0      	nop			; (mov r8, r8)
200001a8:	46bd      	mov	sp, r7
200001aa:	b004      	add	sp, #16
200001ac:	bd80      	pop	{r7, pc}

200001ae <delay_milli>:

// runs delay_mikro 1000 times per ms
void delay_milli(unsigned int ms) {
200001ae:	b580      	push	{r7, lr}
200001b0:	b082      	sub	sp, #8
200001b2:	af00      	add	r7, sp, #0
200001b4:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
		ms++;
	#endif
	
	delay_mikro(1000*ms);
200001b6:	687b      	ldr	r3, [r7, #4]
200001b8:	22fa      	movs	r2, #250	; 0xfa
200001ba:	0092      	lsls	r2, r2, #2
200001bc:	4353      	muls	r3, r2
200001be:	0018      	movs	r0, r3
200001c0:	f7ff ffe0 	bl	20000184 <delay_mikro>
200001c4:	46c0      	nop			; (mov r8, r8)
200001c6:	46bd      	mov	sp, r7
200001c8:	b002      	add	sp, #8
200001ca:	bd80      	pop	{r7, pc}

200001cc <graphic_ctrl_bit_set>:
#define		LCD_BUSY		0x80

typedef unsigned char uint8_t;

// välj den displayen vi vill använda och ettställ de biter som är 1 i x
void graphic_ctrl_bit_set(uint8_t x) {
200001cc:	b580      	push	{r7, lr}
200001ce:	b082      	sub	sp, #8
200001d0:	af00      	add	r7, sp, #0
200001d2:	0002      	movs	r2, r0
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	701a      	strb	r2, [r3, #0]
	PORT_ODR_LOW |= x;
200001d8:	490a      	ldr	r1, [pc, #40]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001da:	4b0a      	ldr	r3, [pc, #40]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001dc:	781b      	ldrb	r3, [r3, #0]
200001de:	b2da      	uxtb	r2, r3
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	4313      	orrs	r3, r2
200001e6:	b2db      	uxtb	r3, r3
200001e8:	700b      	strb	r3, [r1, #0]
	PORT_ODR_LOW &= ~B_SELECT;
200001ea:	4a06      	ldr	r2, [pc, #24]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001ec:	4b05      	ldr	r3, [pc, #20]	; (20000204 <graphic_ctrl_bit_set+0x38>)
200001ee:	781b      	ldrb	r3, [r3, #0]
200001f0:	b2db      	uxtb	r3, r3
200001f2:	2104      	movs	r1, #4
200001f4:	438b      	bics	r3, r1
200001f6:	b2db      	uxtb	r3, r3
200001f8:	7013      	strb	r3, [r2, #0]
}
200001fa:	46c0      	nop			; (mov r8, r8)
200001fc:	46bd      	mov	sp, r7
200001fe:	b002      	add	sp, #8
20000200:	bd80      	pop	{r7, pc}
20000202:	46c0      	nop			; (mov r8, r8)
20000204:	40021014 	andmi	r1, r2, r4, lsl r0

20000208 <graphic_ctrl_bit_clear>:

// välj den displayen vi vill använda och nollställ de biter som är 1 i x
void graphic_ctrl_bit_clear(uint8_t x) {
20000208:	b580      	push	{r7, lr}
2000020a:	b082      	sub	sp, #8
2000020c:	af00      	add	r7, sp, #0
2000020e:	0002      	movs	r2, r0
20000210:	1dfb      	adds	r3, r7, #7
20000212:	701a      	strb	r2, [r3, #0]
	PORT_ODR_LOW &= ~x;
20000214:	490c      	ldr	r1, [pc, #48]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000218:	781b      	ldrb	r3, [r3, #0]
2000021a:	b2db      	uxtb	r3, r3
2000021c:	b25b      	sxtb	r3, r3
2000021e:	1dfa      	adds	r2, r7, #7
20000220:	7812      	ldrb	r2, [r2, #0]
20000222:	b252      	sxtb	r2, r2
20000224:	43d2      	mvns	r2, r2
20000226:	b252      	sxtb	r2, r2
20000228:	4013      	ands	r3, r2
2000022a:	b25b      	sxtb	r3, r3
2000022c:	b2db      	uxtb	r3, r3
2000022e:	700b      	strb	r3, [r1, #0]
	PORT_ODR_LOW &= ~B_SELECT;
20000230:	4a05      	ldr	r2, [pc, #20]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000232:	4b05      	ldr	r3, [pc, #20]	; (20000248 <graphic_ctrl_bit_clear+0x40>)
20000234:	781b      	ldrb	r3, [r3, #0]
20000236:	b2db      	uxtb	r3, r3
20000238:	2104      	movs	r1, #4
2000023a:	438b      	bics	r3, r1
2000023c:	b2db      	uxtb	r3, r3
2000023e:	7013      	strb	r3, [r2, #0]
}
20000240:	46c0      	nop			; (mov r8, r8)
20000242:	46bd      	mov	sp, r7
20000244:	b002      	add	sp, #8
20000246:	bd80      	pop	{r7, pc}
20000248:	40021014 	andmi	r1, r2, r4, lsl r0

2000024c <graphic_ctrl_bit_set_clear>:

void graphic_ctrl_bit_set_clear(uint8_t setx, uint8_t clearx) {
2000024c:	b580      	push	{r7, lr}
2000024e:	b082      	sub	sp, #8
20000250:	af00      	add	r7, sp, #0
20000252:	0002      	movs	r2, r0
20000254:	1dfb      	adds	r3, r7, #7
20000256:	701a      	strb	r2, [r3, #0]
20000258:	1dbb      	adds	r3, r7, #6
2000025a:	1c0a      	adds	r2, r1, #0
2000025c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(setx);
2000025e:	1dfb      	adds	r3, r7, #7
20000260:	781b      	ldrb	r3, [r3, #0]
20000262:	0018      	movs	r0, r3
20000264:	f7ff ffb2 	bl	200001cc <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(clearx);
20000268:	1dbb      	adds	r3, r7, #6
2000026a:	781b      	ldrb	r3, [r3, #0]
2000026c:	0018      	movs	r0, r3
2000026e:	f7ff ffcb 	bl	20000208 <graphic_ctrl_bit_clear>
}
20000272:	46c0      	nop			; (mov r8, r8)
20000274:	46bd      	mov	sp, r7
20000276:	b002      	add	sp, #8
20000278:	bd80      	pop	{r7, pc}

2000027a <select_controller>:

// konfigurera CS-signalerna
void select_controller(uint8_t controller) {
2000027a:	b580      	push	{r7, lr}
2000027c:	b082      	sub	sp, #8
2000027e:	af00      	add	r7, sp, #0
20000280:	0002      	movs	r2, r0
20000282:	1dfb      	adds	r3, r7, #7
20000284:	701a      	strb	r2, [r3, #0]
	switch(controller) {
20000286:	1dfb      	adds	r3, r7, #7
20000288:	781b      	ldrb	r3, [r3, #0]
2000028a:	2b08      	cmp	r3, #8
2000028c:	d00c      	beq.n	200002a8 <select_controller+0x2e>
2000028e:	dc02      	bgt.n	20000296 <select_controller+0x1c>
20000290:	2b00      	cmp	r3, #0
20000292:	d005      	beq.n	200002a0 <select_controller+0x26>
			break;
		case (B_CS1 | B_CS2):
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
			break;
	}
}
20000294:	e016      	b.n	200002c4 <select_controller+0x4a>
	switch(controller) {
20000296:	2b10      	cmp	r3, #16
20000298:	d00b      	beq.n	200002b2 <select_controller+0x38>
2000029a:	2b18      	cmp	r3, #24
2000029c:	d00e      	beq.n	200002bc <select_controller+0x42>
}
2000029e:	e011      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_clear(B_CS1 | B_CS2);
200002a0:	2018      	movs	r0, #24
200002a2:	f7ff ffb1 	bl	20000208 <graphic_ctrl_bit_clear>
			break;
200002a6:	e00d      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_set_clear(B_CS1, B_CS2);
200002a8:	2110      	movs	r1, #16
200002aa:	2008      	movs	r0, #8
200002ac:	f7ff ffce 	bl	2000024c <graphic_ctrl_bit_set_clear>
			break;
200002b0:	e008      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_set_clear(B_CS2, B_CS1);
200002b2:	2108      	movs	r1, #8
200002b4:	2010      	movs	r0, #16
200002b6:	f7ff ffc9 	bl	2000024c <graphic_ctrl_bit_set_clear>
			break;
200002ba:	e003      	b.n	200002c4 <select_controller+0x4a>
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
200002bc:	2018      	movs	r0, #24
200002be:	f7ff ff85 	bl	200001cc <graphic_ctrl_bit_set>
			break;
200002c2:	46c0      	nop			; (mov r8, r8)
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b002      	add	sp, #8
200002ca:	bd80      	pop	{r7, pc}

200002cc <graphic_wait_ready>:

// Undersöker BUSY-flaggan (B7) och returnerar först då denna blivit 0
void graphic_wait_ready(void) {
200002cc:	b580      	push	{r7, lr}
200002ce:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200002d0:	2040      	movs	r0, #64	; 0x40
200002d2:	f7ff ff99 	bl	20000208 <graphic_ctrl_bit_clear>
	PORT_MODER = 0x00005555;
200002d6:	4b12      	ldr	r3, [pc, #72]	; (20000320 <graphic_wait_ready+0x54>)
200002d8:	4a12      	ldr	r2, [pc, #72]	; (20000324 <graphic_wait_ready+0x58>)
200002da:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set_clear(B_RW, B_RS);
200002dc:	2101      	movs	r1, #1
200002de:	2002      	movs	r0, #2
200002e0:	f7ff ffb4 	bl	2000024c <graphic_ctrl_bit_set_clear>
	delay_500ns();
200002e4:	f7ff ff2c 	bl	20000140 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200002e8:	2040      	movs	r0, #64	; 0x40
200002ea:	f7ff ff6f 	bl	200001cc <graphic_ctrl_bit_set>
		delay_500ns();
200002ee:	f7ff ff27 	bl	20000140 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200002f2:	2040      	movs	r0, #64	; 0x40
200002f4:	f7ff ff88 	bl	20000208 <graphic_ctrl_bit_clear>
		delay_500ns();
200002f8:	f7ff ff22 	bl	20000140 <delay_500ns>
		if ((PORT_IDR_HIGH & LCD_BUSY) == 0) 
200002fc:	4b0a      	ldr	r3, [pc, #40]	; (20000328 <graphic_wait_ready+0x5c>)
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	b2db      	uxtb	r3, r3
20000302:	b25b      	sxtb	r3, r3
20000304:	2b00      	cmp	r3, #0
20000306:	da00      	bge.n	2000030a <graphic_wait_ready+0x3e>
		graphic_ctrl_bit_set(B_E);
20000308:	e7ee      	b.n	200002e8 <graphic_wait_ready+0x1c>
			break;	
2000030a:	46c0      	nop			; (mov r8, r8)
	}
	graphic_ctrl_bit_set(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff ff5d 	bl	200001cc <graphic_ctrl_bit_set>
	PORT_MODER = 0x55555555;
20000312:	4b03      	ldr	r3, [pc, #12]	; (20000320 <graphic_wait_ready+0x54>)
20000314:	4a05      	ldr	r2, [pc, #20]	; (2000032c <graphic_wait_ready+0x60>)
20000316:	601a      	str	r2, [r3, #0]
}
20000318:	46c0      	nop			; (mov r8, r8)
2000031a:	46bd      	mov	sp, r7
2000031c:	bd80      	pop	{r7, pc}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	40021000 	andmi	r1, r2, r0
20000324:	00005555 	andeq	r5, r0, r5, asr r5
20000328:	40021011 	andmi	r1, r2, r1, lsl r0
2000032c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000330 <graphic_read>:

// reads from the graphic display
// waits for screens in  @controller
unsigned char graphic_read(unsigned char controller) {
20000330:	b580      	push	{r7, lr}
20000332:	b084      	sub	sp, #16
20000334:	af00      	add	r7, sp, #0
20000336:	0002      	movs	r2, r0
20000338:	1dfb      	adds	r3, r7, #7
2000033a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);		// (stop workcycle)
2000033c:	2040      	movs	r0, #64	; 0x40
2000033e:	f7ff ff63 	bl	20000208 <graphic_ctrl_bit_clear>
	PORT_MODER = 0x00005555;			// set ctrl 15-8 to inports, 7-0 to outports
20000342:	4b1b      	ldr	r3, [pc, #108]	; (200003b0 <graphic_read+0x80>)
20000344:	4a1b      	ldr	r2, [pc, #108]	; (200003b4 <graphic_read+0x84>)
20000346:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);	// set reset and read/write bits
20000348:	2003      	movs	r0, #3
2000034a:	f7ff ff3f 	bl	200001cc <graphic_ctrl_bit_set>
	select_controller(controller);		
2000034e:	1dfb      	adds	r3, r7, #7
20000350:	781b      	ldrb	r3, [r3, #0]
20000352:	0018      	movs	r0, r3
20000354:	f7ff ff91 	bl	2000027a <select_controller>
	delay_500ns();
20000358:	f7ff fef2 	bl	20000140 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
2000035c:	2040      	movs	r0, #64	; 0x40
2000035e:	f7ff ff35 	bl	200001cc <graphic_ctrl_bit_set>
	unsigned char rv = PORT_IDR_HIGH;	// read data register
20000362:	4a15      	ldr	r2, [pc, #84]	; (200003b8 <graphic_read+0x88>)
20000364:	230f      	movs	r3, #15
20000366:	18fb      	adds	r3, r7, r3
20000368:	7812      	ldrb	r2, [r2, #0]
2000036a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);		// (stop workycle)
2000036c:	2040      	movs	r0, #64	; 0x40
2000036e:	f7ff ff4b 	bl	20000208 <graphic_ctrl_bit_clear>
	PORT_MODER = 0x55555555;			// set ctrl to outports
20000372:	4b0f      	ldr	r3, [pc, #60]	; (200003b0 <graphic_read+0x80>)
20000374:	4a11      	ldr	r2, [pc, #68]	; (200003bc <graphic_read+0x8c>)
20000376:	601a      	str	r2, [r3, #0]
	
	// wait for screen 1 if reading from screen 1
	if(controller & B_CS1) {	
20000378:	1dfb      	adds	r3, r7, #7
2000037a:	781b      	ldrb	r3, [r3, #0]
2000037c:	2208      	movs	r2, #8
2000037e:	4013      	ands	r3, r2
20000380:	d004      	beq.n	2000038c <graphic_read+0x5c>
		select_controller(B_CS1);
20000382:	2008      	movs	r0, #8
20000384:	f7ff ff79 	bl	2000027a <select_controller>
		graphic_wait_ready();
20000388:	f7ff ffa0 	bl	200002cc <graphic_wait_ready>
	}
	
	// !! 
	if(controller & B_CS2) {
2000038c:	1dfb      	adds	r3, r7, #7
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	2210      	movs	r2, #16
20000392:	4013      	ands	r3, r2
20000394:	d004      	beq.n	200003a0 <graphic_read+0x70>
		select_controller(B_CS2);
20000396:	2010      	movs	r0, #16
20000398:	f7ff ff6f 	bl	2000027a <select_controller>
		graphic_wait_ready();
2000039c:	f7ff ff96 	bl	200002cc <graphic_wait_ready>
	}
	
	return rv;
200003a0:	230f      	movs	r3, #15
200003a2:	18fb      	adds	r3, r7, r3
200003a4:	781b      	ldrb	r3, [r3, #0]
}
200003a6:	0018      	movs	r0, r3
200003a8:	46bd      	mov	sp, r7
200003aa:	b004      	add	sp, #16
200003ac:	bd80      	pop	{r7, pc}
200003ae:	46c0      	nop			; (mov r8, r8)
200003b0:	40021000 	andmi	r1, r2, r0
200003b4:	00005555 	andeq	r5, r0, r5, asr r5
200003b8:	40021011 	andmi	r1, r2, r1, lsl r0
200003bc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003c0 <graphic_write>:

// writes @value to specified @controller(s)
void graphic_write(uint8_t value, uint8_t controller) {
200003c0:	b580      	push	{r7, lr}
200003c2:	b082      	sub	sp, #8
200003c4:	af00      	add	r7, sp, #0
200003c6:	0002      	movs	r2, r0
200003c8:	1dfb      	adds	r3, r7, #7
200003ca:	701a      	strb	r2, [r3, #0]
200003cc:	1dbb      	adds	r3, r7, #6
200003ce:	1c0a      	adds	r2, r1, #0
200003d0:	701a      	strb	r2, [r3, #0]
	PORT_ODR_HIGH = value;				// set outpins
200003d2:	4a1a      	ldr	r2, [pc, #104]	; (2000043c <graphic_write+0x7c>)
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	7013      	strb	r3, [r2, #0]
	select_controller(controller);		
200003da:	1dbb      	adds	r3, r7, #6
200003dc:	781b      	ldrb	r3, [r3, #0]
200003de:	0018      	movs	r0, r3
200003e0:	f7ff ff4b 	bl	2000027a <select_controller>
	delay_500ns();
200003e4:	f7ff feac 	bl	20000140 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
200003e8:	2040      	movs	r0, #64	; 0x40
200003ea:	f7ff feef 	bl	200001cc <graphic_ctrl_bit_set>
	delay_500ns();						// wait for display to handle outpins' data
200003ee:	f7ff fea7 	bl	20000140 <delay_500ns>
	
	graphic_ctrl_bit_clear(B_E);		// (stop workcycle)
200003f2:	2040      	movs	r0, #64	; 0x40
200003f4:	f7ff ff08 	bl	20000208 <graphic_ctrl_bit_clear>
	
	// wait for screen 1
	if(controller & B_CS1) {
200003f8:	1dbb      	adds	r3, r7, #6
200003fa:	781b      	ldrb	r3, [r3, #0]
200003fc:	2208      	movs	r2, #8
200003fe:	4013      	ands	r3, r2
20000400:	d004      	beq.n	2000040c <graphic_write+0x4c>
		select_controller(B_CS1);
20000402:	2008      	movs	r0, #8
20000404:	f7ff ff39 	bl	2000027a <select_controller>
		graphic_wait_ready();
20000408:	f7ff ff60 	bl	200002cc <graphic_wait_ready>
	}
	// !
	if(controller & B_CS2) {
2000040c:	1dbb      	adds	r3, r7, #6
2000040e:	781b      	ldrb	r3, [r3, #0]
20000410:	2210      	movs	r2, #16
20000412:	4013      	ands	r3, r2
20000414:	d004      	beq.n	20000420 <graphic_write+0x60>
		select_controller(B_CS2);
20000416:	2010      	movs	r0, #16
20000418:	f7ff ff2f 	bl	2000027a <select_controller>
		graphic_wait_ready();
2000041c:	f7ff ff56 	bl	200002cc <graphic_wait_ready>
	}
	
	PORT_ODR_HIGH = 0;					// clear outpins' data
20000420:	4b06      	ldr	r3, [pc, #24]	; (2000043c <graphic_write+0x7c>)
20000422:	2200      	movs	r2, #0
20000424:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
20000426:	2040      	movs	r0, #64	; 0x40
20000428:	f7ff fed0 	bl	200001cc <graphic_ctrl_bit_set>
	select_controller(0);				// clear selected controller to preserve the data we've written
2000042c:	2000      	movs	r0, #0
2000042e:	f7ff ff24 	bl	2000027a <select_controller>
}
20000432:	46c0      	nop			; (mov r8, r8)
20000434:	46bd      	mov	sp, r7
20000436:	b002      	add	sp, #8
20000438:	bd80      	pop	{r7, pc}
2000043a:	46c0      	nop			; (mov r8, r8)
2000043c:	40021015 	andmi	r1, r2, r5, lsl r0

20000440 <graphic_write_command>:

// writes a @command to the screen(s) specified in @controller
void graphic_write_command(uint8_t command, uint8_t controller) {
20000440:	b580      	push	{r7, lr}
20000442:	b082      	sub	sp, #8
20000444:	af00      	add	r7, sp, #0
20000446:	0002      	movs	r2, r0
20000448:	1dfb      	adds	r3, r7, #7
2000044a:	701a      	strb	r2, [r3, #0]
2000044c:	1dbb      	adds	r3, r7, #6
2000044e:	1c0a      	adds	r2, r1, #0
20000450:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);			// (stop workcycle)
20000452:	2040      	movs	r0, #64	; 0x40
20000454:	f7ff fed8 	bl	20000208 <graphic_ctrl_bit_clear>
	select_controller(controller);			// choose screen
20000458:	1dbb      	adds	r3, r7, #6
2000045a:	781b      	ldrb	r3, [r3, #0]
2000045c:	0018      	movs	r0, r3
2000045e:	f7ff ff0c 	bl	2000027a <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);	// RS = 0 to write command, RW = 0 to write at all
20000462:	2003      	movs	r0, #3
20000464:	f7ff fed0 	bl	20000208 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);		// actually write the command
20000468:	1dbb      	adds	r3, r7, #6
2000046a:	781a      	ldrb	r2, [r3, #0]
2000046c:	1dfb      	adds	r3, r7, #7
2000046e:	781b      	ldrb	r3, [r3, #0]
20000470:	0011      	movs	r1, r2
20000472:	0018      	movs	r0, r3
20000474:	f7ff ffa4 	bl	200003c0 <graphic_write>
}
20000478:	46c0      	nop			; (mov r8, r8)
2000047a:	46bd      	mov	sp, r7
2000047c:	b002      	add	sp, #8
2000047e:	bd80      	pop	{r7, pc}

20000480 <graphic_write_data>:

// paints @data to the screen(s) specified in @controller
void graphic_write_data(uint8_t data, uint8_t controller) {
20000480:	b580      	push	{r7, lr}
20000482:	b082      	sub	sp, #8
20000484:	af00      	add	r7, sp, #0
20000486:	0002      	movs	r2, r0
20000488:	1dfb      	adds	r3, r7, #7
2000048a:	701a      	strb	r2, [r3, #0]
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	1c0a      	adds	r2, r1, #0
20000490:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);			// (stop workcycle)
20000492:	2040      	movs	r0, #64	; 0x40
20000494:	f7ff feb8 	bl	20000208 <graphic_ctrl_bit_clear>
	select_controller(controller);			// choose screen
20000498:	1dbb      	adds	r3, r7, #6
2000049a:	781b      	ldrb	r3, [r3, #0]
2000049c:	0018      	movs	r0, r3
2000049e:	f7ff feec 	bl	2000027a <select_controller>
	graphic_ctrl_bit_set_clear(B_RS, B_RW);	// RS = 1 to not write command, RW = 0 to write at all
200004a2:	2102      	movs	r1, #2
200004a4:	2001      	movs	r0, #1
200004a6:	f7ff fed1 	bl	2000024c <graphic_ctrl_bit_set_clear>
	graphic_write(data, controller);		// actually
200004aa:	1dbb      	adds	r3, r7, #6
200004ac:	781a      	ldrb	r2, [r3, #0]
200004ae:	1dfb      	adds	r3, r7, #7
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	0011      	movs	r1, r2
200004b4:	0018      	movs	r0, r3
200004b6:	f7ff ff83 	bl	200003c0 <graphic_write>
}
200004ba:	46c0      	nop			; (mov r8, r8)
200004bc:	46bd      	mov	sp, r7
200004be:	b002      	add	sp, #8
200004c0:	bd80      	pop	{r7, pc}

200004c2 <graphic_read_data>:


uint8_t graphic_read_data(uint8_t controller) {
200004c2:	b580      	push	{r7, lr}
200004c4:	b082      	sub	sp, #8
200004c6:	af00      	add	r7, sp, #0
200004c8:	0002      	movs	r2, r0
200004ca:	1dfb      	adds	r3, r7, #7
200004cc:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);			// called to clear junk
200004ce:	1dfb      	adds	r3, r7, #7
200004d0:	781b      	ldrb	r3, [r3, #0]
200004d2:	0018      	movs	r0, r3
200004d4:	f7ff ff2c 	bl	20000330 <graphic_read>
	return graphic_read(controller);
200004d8:	1dfb      	adds	r3, r7, #7
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	0018      	movs	r0, r3
200004de:	f7ff ff27 	bl	20000330 <graphic_read>
200004e2:	0003      	movs	r3, r0
}
200004e4:	0018      	movs	r0, r3
200004e6:	46bd      	mov	sp, r7
200004e8:	b002      	add	sp, #8
200004ea:	bd80      	pop	{r7, pc}

200004ec <graphic_initialize>:

// initierar och förbereder grafikdisplayen
void graphic_initialize(void) {
200004ec:	b580      	push	{r7, lr}
200004ee:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200004f0:	2040      	movs	r0, #64	; 0x40
200004f2:	f7ff fe6b 	bl	200001cc <graphic_ctrl_bit_set>
	delay_mikro(10);
200004f6:	200a      	movs	r0, #10
200004f8:	f7ff fe44 	bl	20000184 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200004fc:	2078      	movs	r0, #120	; 0x78
200004fe:	f7ff fe83 	bl	20000208 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000502:	201e      	movs	r0, #30
20000504:	f7ff fe53 	bl	200001ae <delay_milli>
	
	graphic_ctrl_bit_set(B_RST);
20000508:	2020      	movs	r0, #32
2000050a:	f7ff fe5f 	bl	200001cc <graphic_ctrl_bit_set>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
2000050e:	2118      	movs	r1, #24
20000510:	203e      	movs	r0, #62	; 0x3e
20000512:	f7ff ff95 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);			// toggle display
20000516:	2118      	movs	r1, #24
20000518:	203f      	movs	r0, #63	; 0x3f
2000051a:	f7ff ff91 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);	// start = 0
2000051e:	2118      	movs	r1, #24
20000520:	20c0      	movs	r0, #192	; 0xc0
20000522:	f7ff ff8d 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);		// add = 0
20000526:	2118      	movs	r1, #24
20000528:	2040      	movs	r0, #64	; 0x40
2000052a:	f7ff ff89 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);		// page = 0
2000052e:	2118      	movs	r1, #24
20000530:	20b8      	movs	r0, #184	; 0xb8
20000532:	f7ff ff85 	bl	20000440 <graphic_write_command>
	
	select_controller(0);									// deaktivera båda CS-signalerna
20000536:	2000      	movs	r0, #0
20000538:	f7ff fe9f 	bl	2000027a <select_controller>
}
2000053c:	46c0      	nop			; (mov r8, r8)
2000053e:	46bd      	mov	sp, r7
20000540:	bd80      	pop	{r7, pc}

20000542 <graphic_clear_screen>:

// Nollställer alla pixlar i grafikminnet
void graphic_clear_screen(void) {
20000542:	b580      	push	{r7, lr}
20000544:	b082      	sub	sp, #8
20000546:	af00      	add	r7, sp, #0
	for(int page = 0; page < 8; page++) {
20000548:	2300      	movs	r3, #0
2000054a:	607b      	str	r3, [r7, #4]
2000054c:	e01e      	b.n	2000058c <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
2000054e:	687b      	ldr	r3, [r7, #4]
20000550:	b25b      	sxtb	r3, r3
20000552:	2248      	movs	r2, #72	; 0x48
20000554:	4252      	negs	r2, r2
20000556:	4313      	orrs	r3, r2
20000558:	b25b      	sxtb	r3, r3
2000055a:	b2db      	uxtb	r3, r3
2000055c:	2118      	movs	r1, #24
2000055e:	0018      	movs	r0, r3
20000560:	f7ff ff6e 	bl	20000440 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000564:	2118      	movs	r1, #24
20000566:	2040      	movs	r0, #64	; 0x40
20000568:	f7ff ff6a 	bl	20000440 <graphic_write_command>
		for(int add = 0; add < 64; add++) {
2000056c:	2300      	movs	r3, #0
2000056e:	603b      	str	r3, [r7, #0]
20000570:	e006      	b.n	20000580 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000572:	2118      	movs	r1, #24
20000574:	2000      	movs	r0, #0
20000576:	f7ff ff83 	bl	20000480 <graphic_write_data>
		for(int add = 0; add < 64; add++) {
2000057a:	683b      	ldr	r3, [r7, #0]
2000057c:	3301      	adds	r3, #1
2000057e:	603b      	str	r3, [r7, #0]
20000580:	683b      	ldr	r3, [r7, #0]
20000582:	2b3f      	cmp	r3, #63	; 0x3f
20000584:	ddf5      	ble.n	20000572 <graphic_clear_screen+0x30>
	for(int page = 0; page < 8; page++) {
20000586:	687b      	ldr	r3, [r7, #4]
20000588:	3301      	adds	r3, #1
2000058a:	607b      	str	r3, [r7, #4]
2000058c:	687b      	ldr	r3, [r7, #4]
2000058e:	2b07      	cmp	r3, #7
20000590:	dddd      	ble.n	2000054e <graphic_clear_screen+0xc>
		}
	}
}
20000592:	46c0      	nop			; (mov r8, r8)
20000594:	46bd      	mov	sp, r7
20000596:	b002      	add	sp, #8
20000598:	bd80      	pop	{r7, pc}

2000059a <pixel>:

// funktion för att tända eller släcka en enskild pixel
void pixel(unsigned x, unsigned y, unsigned set) {
2000059a:	b590      	push	{r4, r7, lr}
2000059c:	b089      	sub	sp, #36	; 0x24
2000059e:	af00      	add	r7, sp, #0
200005a0:	60f8      	str	r0, [r7, #12]
200005a2:	60b9      	str	r1, [r7, #8]
200005a4:	607a      	str	r2, [r7, #4]
	// kolla om x och y är tillåtna värden
	if(x < 1 | y < 1 | x > 128 | y > 64)
200005a6:	68fb      	ldr	r3, [r7, #12]
200005a8:	425a      	negs	r2, r3
200005aa:	4153      	adcs	r3, r2
200005ac:	b2da      	uxtb	r2, r3
200005ae:	68bb      	ldr	r3, [r7, #8]
200005b0:	4259      	negs	r1, r3
200005b2:	414b      	adcs	r3, r1
200005b4:	b2db      	uxtb	r3, r3
200005b6:	4313      	orrs	r3, r2
200005b8:	b2db      	uxtb	r3, r3
200005ba:	0019      	movs	r1, r3
200005bc:	68fb      	ldr	r3, [r7, #12]
200005be:	2280      	movs	r2, #128	; 0x80
200005c0:	429a      	cmp	r2, r3
200005c2:	419b      	sbcs	r3, r3
200005c4:	425b      	negs	r3, r3
200005c6:	b2db      	uxtb	r3, r3
200005c8:	430b      	orrs	r3, r1
200005ca:	68ba      	ldr	r2, [r7, #8]
200005cc:	2140      	movs	r1, #64	; 0x40
200005ce:	4291      	cmp	r1, r2
200005d0:	4192      	sbcs	r2, r2
200005d2:	4252      	negs	r2, r2
200005d4:	b2d2      	uxtb	r2, r2
200005d6:	4313      	orrs	r3, r2
200005d8:	d000      	beq.n	200005dc <pixel+0x42>
200005da:	e0ae      	b.n	2000073a <pixel+0x1a0>
		return;
	
	// skapa en bitmask för pixeln
	char mask;
	int index = (y-1)/8;
200005dc:	68bb      	ldr	r3, [r7, #8]
200005de:	3b01      	subs	r3, #1
200005e0:	08db      	lsrs	r3, r3, #3
200005e2:	61bb      	str	r3, [r7, #24]
	switch((y-1) % 8) {
200005e4:	68bb      	ldr	r3, [r7, #8]
200005e6:	3b01      	subs	r3, #1
200005e8:	2207      	movs	r2, #7
200005ea:	4013      	ands	r3, r2
200005ec:	2b07      	cmp	r3, #7
200005ee:	d82c      	bhi.n	2000064a <pixel+0xb0>
200005f0:	009a      	lsls	r2, r3, #2
200005f2:	4b54      	ldr	r3, [pc, #336]	; (20000744 <pixel+0x1aa>)
200005f4:	18d3      	adds	r3, r2, r3
200005f6:	681b      	ldr	r3, [r3, #0]
200005f8:	469f      	mov	pc, r3
		case 0:
			mask = 1; break;
200005fa:	231f      	movs	r3, #31
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	2201      	movs	r2, #1
20000600:	701a      	strb	r2, [r3, #0]
20000602:	e023      	b.n	2000064c <pixel+0xb2>
		case 1:
			mask = 2; break;
20000604:	231f      	movs	r3, #31
20000606:	18fb      	adds	r3, r7, r3
20000608:	2202      	movs	r2, #2
2000060a:	701a      	strb	r2, [r3, #0]
2000060c:	e01e      	b.n	2000064c <pixel+0xb2>
		case 2:
			mask = 4; break;
2000060e:	231f      	movs	r3, #31
20000610:	18fb      	adds	r3, r7, r3
20000612:	2204      	movs	r2, #4
20000614:	701a      	strb	r2, [r3, #0]
20000616:	e019      	b.n	2000064c <pixel+0xb2>
		case 3:
			mask = 8; break;
20000618:	231f      	movs	r3, #31
2000061a:	18fb      	adds	r3, r7, r3
2000061c:	2208      	movs	r2, #8
2000061e:	701a      	strb	r2, [r3, #0]
20000620:	e014      	b.n	2000064c <pixel+0xb2>
		case 4:
			mask = 16; break;
20000622:	231f      	movs	r3, #31
20000624:	18fb      	adds	r3, r7, r3
20000626:	2210      	movs	r2, #16
20000628:	701a      	strb	r2, [r3, #0]
2000062a:	e00f      	b.n	2000064c <pixel+0xb2>
		case 5:
			mask = 32; break;
2000062c:	231f      	movs	r3, #31
2000062e:	18fb      	adds	r3, r7, r3
20000630:	2220      	movs	r2, #32
20000632:	701a      	strb	r2, [r3, #0]
20000634:	e00a      	b.n	2000064c <pixel+0xb2>
		case 6:
			mask = 64; break;
20000636:	231f      	movs	r3, #31
20000638:	18fb      	adds	r3, r7, r3
2000063a:	2240      	movs	r2, #64	; 0x40
2000063c:	701a      	strb	r2, [r3, #0]
2000063e:	e005      	b.n	2000064c <pixel+0xb2>
		case 7:
			mask = 128; break;
20000640:	231f      	movs	r3, #31
20000642:	18fb      	adds	r3, r7, r3
20000644:	2280      	movs	r2, #128	; 0x80
20000646:	701a      	strb	r2, [r3, #0]
20000648:	e000      	b.n	2000064c <pixel+0xb2>
		default:
			break;
2000064a:	46c0      	nop			; (mov r8, r8)
	}
	
	if(!set)
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	2b00      	cmp	r3, #0
20000650:	d106      	bne.n	20000660 <pixel+0xc6>
		mask = ~mask;
20000652:	231f      	movs	r3, #31
20000654:	18fb      	adds	r3, r7, r3
20000656:	221f      	movs	r2, #31
20000658:	18ba      	adds	r2, r7, r2
2000065a:	7812      	ldrb	r2, [r2, #0]
2000065c:	43d2      	mvns	r2, r2
2000065e:	701a      	strb	r2, [r3, #0]
	
	// bestäm fysiska koordinater och välj styrkrets
	uint8_t controller, temp;
	char x_fysisk;
	
	if(x > 64) {
20000660:	68fb      	ldr	r3, [r7, #12]
20000662:	2b40      	cmp	r3, #64	; 0x40
20000664:	d90a      	bls.n	2000067c <pixel+0xe2>
		controller = B_CS2; 
20000666:	231e      	movs	r3, #30
20000668:	18fb      	adds	r3, r7, r3
2000066a:	2210      	movs	r2, #16
2000066c:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 65;
2000066e:	68fb      	ldr	r3, [r7, #12]
20000670:	b2da      	uxtb	r2, r3
20000672:	231d      	movs	r3, #29
20000674:	18fb      	adds	r3, r7, r3
20000676:	3a41      	subs	r2, #65	; 0x41
20000678:	701a      	strb	r2, [r3, #0]
2000067a:	e009      	b.n	20000690 <pixel+0xf6>
	} else {
		controller = B_CS1;
2000067c:	231e      	movs	r3, #30
2000067e:	18fb      	adds	r3, r7, r3
20000680:	2208      	movs	r2, #8
20000682:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 1;
20000684:	68fb      	ldr	r3, [r7, #12]
20000686:	b2da      	uxtb	r2, r3
20000688:	231d      	movs	r3, #29
2000068a:	18fb      	adds	r3, r7, r3
2000068c:	3a01      	subs	r2, #1
2000068e:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000690:	231d      	movs	r3, #29
20000692:	18fb      	adds	r3, r7, r3
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	2240      	movs	r2, #64	; 0x40
20000698:	4313      	orrs	r3, r2
2000069a:	b2da      	uxtb	r2, r3
2000069c:	231e      	movs	r3, #30
2000069e:	18fb      	adds	r3, r7, r3
200006a0:	781b      	ldrb	r3, [r3, #0]
200006a2:	0019      	movs	r1, r3
200006a4:	0010      	movs	r0, r2
200006a6:	f7ff fecb 	bl	20000440 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
200006aa:	69bb      	ldr	r3, [r7, #24]
200006ac:	b25b      	sxtb	r3, r3
200006ae:	2248      	movs	r2, #72	; 0x48
200006b0:	4252      	negs	r2, r2
200006b2:	4313      	orrs	r3, r2
200006b4:	b25b      	sxtb	r3, r3
200006b6:	b2da      	uxtb	r2, r3
200006b8:	231e      	movs	r3, #30
200006ba:	18fb      	adds	r3, r7, r3
200006bc:	781b      	ldrb	r3, [r3, #0]
200006be:	0019      	movs	r1, r3
200006c0:	0010      	movs	r0, r2
200006c2:	f7ff febd 	bl	20000440 <graphic_write_command>
	temp = graphic_read_data(controller);
200006c6:	2317      	movs	r3, #23
200006c8:	18fc      	adds	r4, r7, r3
200006ca:	231e      	movs	r3, #30
200006cc:	18fb      	adds	r3, r7, r3
200006ce:	781b      	ldrb	r3, [r3, #0]
200006d0:	0018      	movs	r0, r3
200006d2:	f7ff fef6 	bl	200004c2 <graphic_read_data>
200006d6:	0003      	movs	r3, r0
200006d8:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200006da:	231d      	movs	r3, #29
200006dc:	18fb      	adds	r3, r7, r3
200006de:	781b      	ldrb	r3, [r3, #0]
200006e0:	2240      	movs	r2, #64	; 0x40
200006e2:	4313      	orrs	r3, r2
200006e4:	b2da      	uxtb	r2, r3
200006e6:	231e      	movs	r3, #30
200006e8:	18fb      	adds	r3, r7, r3
200006ea:	781b      	ldrb	r3, [r3, #0]
200006ec:	0019      	movs	r1, r3
200006ee:	0010      	movs	r0, r2
200006f0:	f7ff fea6 	bl	20000440 <graphic_write_command>
	if(set)
200006f4:	687b      	ldr	r3, [r7, #4]
200006f6:	2b00      	cmp	r3, #0
200006f8:	d00a      	beq.n	20000710 <pixel+0x176>
		mask = mask | temp;
200006fa:	231f      	movs	r3, #31
200006fc:	18fb      	adds	r3, r7, r3
200006fe:	221f      	movs	r2, #31
20000700:	18b9      	adds	r1, r7, r2
20000702:	2217      	movs	r2, #23
20000704:	18ba      	adds	r2, r7, r2
20000706:	7809      	ldrb	r1, [r1, #0]
20000708:	7812      	ldrb	r2, [r2, #0]
2000070a:	430a      	orrs	r2, r1
2000070c:	701a      	strb	r2, [r3, #0]
2000070e:	e009      	b.n	20000724 <pixel+0x18a>
	else
		mask = mask & temp;
20000710:	231f      	movs	r3, #31
20000712:	18fb      	adds	r3, r7, r3
20000714:	221f      	movs	r2, #31
20000716:	18ba      	adds	r2, r7, r2
20000718:	2117      	movs	r1, #23
2000071a:	1879      	adds	r1, r7, r1
2000071c:	7812      	ldrb	r2, [r2, #0]
2000071e:	7809      	ldrb	r1, [r1, #0]
20000720:	400a      	ands	r2, r1
20000722:	701a      	strb	r2, [r3, #0]
	graphic_write_data(mask, controller);
20000724:	231e      	movs	r3, #30
20000726:	18fb      	adds	r3, r7, r3
20000728:	781a      	ldrb	r2, [r3, #0]
2000072a:	231f      	movs	r3, #31
2000072c:	18fb      	adds	r3, r7, r3
2000072e:	781b      	ldrb	r3, [r3, #0]
20000730:	0011      	movs	r1, r2
20000732:	0018      	movs	r0, r3
20000734:	f7ff fea4 	bl	20000480 <graphic_write_data>
20000738:	e000      	b.n	2000073c <pixel+0x1a2>
		return;
2000073a:	46c0      	nop			; (mov r8, r8)
2000073c:	46bd      	mov	sp, r7
2000073e:	b009      	add	sp, #36	; 0x24
20000740:	bd90      	pop	{r4, r7, pc}
20000742:	46c0      	nop			; (mov r8, r8)
20000744:	20000a50 	andcs	r0, r0, r0, asr sl

20000748 <keyboardActivate>:
#define GPIO_ODR_LOW *((volatile unsigned char*) (GPIO_D+0x14))
#define GPIO_ODR_HIGH *((volatile unsigned char*) (GPIO_D+0x15))

unsigned const char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};

void keyboardActivate(unsigned int row){
20000748:	b580      	push	{r7, lr}
2000074a:	b082      	sub	sp, #8
2000074c:	af00      	add	r7, sp, #0
2000074e:	6078      	str	r0, [r7, #4]
	//Aktivera angiven rad hos tangentbordet eller deaktivera samtliga
	
	switch(row){
20000750:	687b      	ldr	r3, [r7, #4]
20000752:	2b01      	cmp	r3, #1
20000754:	d009      	beq.n	2000076a <keyboardActivate+0x22>
20000756:	d304      	bcc.n	20000762 <keyboardActivate+0x1a>
20000758:	2b02      	cmp	r3, #2
2000075a:	d00a      	beq.n	20000772 <keyboardActivate+0x2a>
2000075c:	2b03      	cmp	r3, #3
2000075e:	d00c      	beq.n	2000077a <keyboardActivate+0x32>
20000760:	e00f      	b.n	20000782 <keyboardActivate+0x3a>
		case 0: GPIO_ODR_HIGH = 0x10; break;
20000762:	4b0c      	ldr	r3, [pc, #48]	; (20000794 <keyboardActivate+0x4c>)
20000764:	2210      	movs	r2, #16
20000766:	701a      	strb	r2, [r3, #0]
20000768:	e00f      	b.n	2000078a <keyboardActivate+0x42>
		case 1: GPIO_ODR_HIGH = 0x20; break;
2000076a:	4b0a      	ldr	r3, [pc, #40]	; (20000794 <keyboardActivate+0x4c>)
2000076c:	2220      	movs	r2, #32
2000076e:	701a      	strb	r2, [r3, #0]
20000770:	e00b      	b.n	2000078a <keyboardActivate+0x42>
		case 2: GPIO_ODR_HIGH = 0x40; break;
20000772:	4b08      	ldr	r3, [pc, #32]	; (20000794 <keyboardActivate+0x4c>)
20000774:	2240      	movs	r2, #64	; 0x40
20000776:	701a      	strb	r2, [r3, #0]
20000778:	e007      	b.n	2000078a <keyboardActivate+0x42>
		case 3: GPIO_ODR_HIGH = 0x80; break;
2000077a:	4b06      	ldr	r3, [pc, #24]	; (20000794 <keyboardActivate+0x4c>)
2000077c:	2280      	movs	r2, #128	; 0x80
2000077e:	701a      	strb	r2, [r3, #0]
20000780:	e003      	b.n	2000078a <keyboardActivate+0x42>
		default: GPIO_ODR_HIGH = 0x00; break;
20000782:	4b04      	ldr	r3, [pc, #16]	; (20000794 <keyboardActivate+0x4c>)
20000784:	2200      	movs	r2, #0
20000786:	701a      	strb	r2, [r3, #0]
20000788:	46c0      	nop			; (mov r8, r8)
	}
}
2000078a:	46c0      	nop			; (mov r8, r8)
2000078c:	46bd      	mov	sp, r7
2000078e:	b002      	add	sp, #8
20000790:	bd80      	pop	{r7, pc}
20000792:	46c0      	nop			; (mov r8, r8)
20000794:	40020c15 	andmi	r0, r2, r5, lsl ip

20000798 <keyboardGetColumn>:

int keyboardGetColumn(void){
20000798:	b580      	push	{r7, lr}
2000079a:	b082      	sub	sp, #8
2000079c:	af00      	add	r7, sp, #0
	//Om någon tangent i den aktiverade raden är nedtryckt
	// returneras dess kolumnnummer. Annars 0.
	
	unsigned char c;
	c = GPIO_IDR_HIGH;
2000079e:	4a13      	ldr	r2, [pc, #76]	; (200007ec <keyboardGetColumn+0x54>)
200007a0:	1dfb      	adds	r3, r7, #7
200007a2:	7812      	ldrb	r2, [r2, #0]
200007a4:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
200007a6:	1dfb      	adds	r3, r7, #7
200007a8:	781b      	ldrb	r3, [r3, #0]
200007aa:	2208      	movs	r2, #8
200007ac:	4013      	ands	r3, r2
200007ae:	d001      	beq.n	200007b4 <keyboardGetColumn+0x1c>
200007b0:	2303      	movs	r3, #3
200007b2:	e016      	b.n	200007e2 <keyboardGetColumn+0x4a>
	if(c & 0x4){return 2;}
200007b4:	1dfb      	adds	r3, r7, #7
200007b6:	781b      	ldrb	r3, [r3, #0]
200007b8:	2204      	movs	r2, #4
200007ba:	4013      	ands	r3, r2
200007bc:	d001      	beq.n	200007c2 <keyboardGetColumn+0x2a>
200007be:	2302      	movs	r3, #2
200007c0:	e00f      	b.n	200007e2 <keyboardGetColumn+0x4a>
	if(c & 0x2){return 1;}
200007c2:	1dfb      	adds	r3, r7, #7
200007c4:	781b      	ldrb	r3, [r3, #0]
200007c6:	2202      	movs	r2, #2
200007c8:	4013      	ands	r3, r2
200007ca:	d001      	beq.n	200007d0 <keyboardGetColumn+0x38>
200007cc:	2301      	movs	r3, #1
200007ce:	e008      	b.n	200007e2 <keyboardGetColumn+0x4a>
	if(c & 0x1){return 0;}
200007d0:	1dfb      	adds	r3, r7, #7
200007d2:	781b      	ldrb	r3, [r3, #0]
200007d4:	2201      	movs	r2, #1
200007d6:	4013      	ands	r3, r2
200007d8:	d001      	beq.n	200007de <keyboardGetColumn+0x46>
200007da:	2300      	movs	r3, #0
200007dc:	e001      	b.n	200007e2 <keyboardGetColumn+0x4a>
	return -1;
200007de:	2301      	movs	r3, #1
200007e0:	425b      	negs	r3, r3
	}
200007e2:	0018      	movs	r0, r3
200007e4:	46bd      	mov	sp, r7
200007e6:	b002      	add	sp, #8
200007e8:	bd80      	pop	{r7, pc}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	40020c11 	andmi	r0, r2, r1, lsl ip

200007f0 <keyboard>:

unsigned char keyboard(void){
200007f0:	b580      	push	{r7, lr}
200007f2:	b082      	sub	sp, #8
200007f4:	af00      	add	r7, sp, #0
	int row, col;
	for(row = 0; row < 4; row++){
200007f6:	2300      	movs	r3, #0
200007f8:	607b      	str	r3, [r7, #4]
200007fa:	e019      	b.n	20000830 <keyboard+0x40>
		keyboardActivate(row);
200007fc:	687b      	ldr	r3, [r7, #4]
200007fe:	0018      	movs	r0, r3
20000800:	f7ff ffa2 	bl	20000748 <keyboardActivate>
		col = keyboardGetColumn();
20000804:	f7ff ffc8 	bl	20000798 <keyboardGetColumn>
20000808:	0003      	movs	r3, r0
2000080a:	603b      	str	r3, [r7, #0]
		if (col != -1){
2000080c:	683b      	ldr	r3, [r7, #0]
2000080e:	3301      	adds	r3, #1
20000810:	d00b      	beq.n	2000082a <keyboard+0x3a>
			keyboardActivate(-1);
20000812:	2301      	movs	r3, #1
20000814:	425b      	negs	r3, r3
20000816:	0018      	movs	r0, r3
20000818:	f7ff ff96 	bl	20000748 <keyboardActivate>
			return key[4*row + col];
2000081c:	687b      	ldr	r3, [r7, #4]
2000081e:	009a      	lsls	r2, r3, #2
20000820:	683b      	ldr	r3, [r7, #0]
20000822:	18d3      	adds	r3, r2, r3
20000824:	4a08      	ldr	r2, [pc, #32]	; (20000848 <keyboard+0x58>)
20000826:	5cd3      	ldrb	r3, [r2, r3]
20000828:	e009      	b.n	2000083e <keyboard+0x4e>
	for(row = 0; row < 4; row++){
2000082a:	687b      	ldr	r3, [r7, #4]
2000082c:	3301      	adds	r3, #1
2000082e:	607b      	str	r3, [r7, #4]
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	2b03      	cmp	r3, #3
20000834:	dde2      	ble.n	200007fc <keyboard+0xc>
		}
	}
	keyboardActivate(0);
20000836:	2000      	movs	r0, #0
20000838:	f7ff ff86 	bl	20000748 <keyboardActivate>
	return 0xFF;
2000083c:	23ff      	movs	r3, #255	; 0xff
2000083e:	0018      	movs	r0, r3
20000840:	46bd      	mov	sp, r7
20000842:	b002      	add	sp, #8
20000844:	bd80      	pop	{r7, pc}
20000846:	46c0      	nop			; (mov r8, r8)
20000848:	20000a70 	andcs	r0, r0, r0, ror sl

2000084c <set_object_speed>:
	void(*move)(struct tObj *);
	void(*set_speed)(struct tObj *, int, int);
} OBJECT, *POBJECT;

// changes the objects speed
void set_object_speed(POBJECT o, int speedx, int speedy) {
2000084c:	b580      	push	{r7, lr}
2000084e:	b084      	sub	sp, #16
20000850:	af00      	add	r7, sp, #0
20000852:	60f8      	str	r0, [r7, #12]
20000854:	60b9      	str	r1, [r7, #8]
20000856:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000858:	68fb      	ldr	r3, [r7, #12]
2000085a:	68ba      	ldr	r2, [r7, #8]
2000085c:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
2000085e:	68fb      	ldr	r3, [r7, #12]
20000860:	687a      	ldr	r2, [r7, #4]
20000862:	609a      	str	r2, [r3, #8]
}
20000864:	46c0      	nop			; (mov r8, r8)
20000866:	46bd      	mov	sp, r7
20000868:	b004      	add	sp, #16
2000086a:	bd80      	pop	{r7, pc}

2000086c <draw_object>:

// draws the object to the screen through the pixel() function
void draw_object(POBJECT o) {
2000086c:	b580      	push	{r7, lr}
2000086e:	b086      	sub	sp, #24
20000870:	af00      	add	r7, sp, #0
20000872:	6078      	str	r0, [r7, #4]
	int xx,yy;
	char offsx, offsy;
	xx = o->posx;
20000874:	687b      	ldr	r3, [r7, #4]
20000876:	68db      	ldr	r3, [r3, #12]
20000878:	613b      	str	r3, [r7, #16]
	yy = o->posy;
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	691b      	ldr	r3, [r3, #16]
2000087e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < o->geo->numpoints; i++) {
20000880:	2300      	movs	r3, #0
20000882:	617b      	str	r3, [r7, #20]
20000884:	e026      	b.n	200008d4 <draw_object+0x68>
		offsx = o->geo->px[i].x;
20000886:	687b      	ldr	r3, [r7, #4]
20000888:	6819      	ldr	r1, [r3, #0]
2000088a:	230b      	movs	r3, #11
2000088c:	18fb      	adds	r3, r7, r3
2000088e:	697a      	ldr	r2, [r7, #20]
20000890:	3204      	adds	r2, #4
20000892:	0052      	lsls	r2, r2, #1
20000894:	188a      	adds	r2, r1, r2
20000896:	3204      	adds	r2, #4
20000898:	7812      	ldrb	r2, [r2, #0]
2000089a:	701a      	strb	r2, [r3, #0]
		offsy = o->geo->px[i].y;
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	6819      	ldr	r1, [r3, #0]
200008a0:	230a      	movs	r3, #10
200008a2:	18fb      	adds	r3, r7, r3
200008a4:	697a      	ldr	r2, [r7, #20]
200008a6:	3204      	adds	r2, #4
200008a8:	0052      	lsls	r2, r2, #1
200008aa:	188a      	adds	r2, r1, r2
200008ac:	3205      	adds	r2, #5
200008ae:	7812      	ldrb	r2, [r2, #0]
200008b0:	701a      	strb	r2, [r3, #0]
		
		pixel(xx+offsx,yy+offsy, 1);
200008b2:	230b      	movs	r3, #11
200008b4:	18fb      	adds	r3, r7, r3
200008b6:	781a      	ldrb	r2, [r3, #0]
200008b8:	693b      	ldr	r3, [r7, #16]
200008ba:	18d0      	adds	r0, r2, r3
200008bc:	230a      	movs	r3, #10
200008be:	18fb      	adds	r3, r7, r3
200008c0:	781a      	ldrb	r2, [r3, #0]
200008c2:	68fb      	ldr	r3, [r7, #12]
200008c4:	18d3      	adds	r3, r2, r3
200008c6:	2201      	movs	r2, #1
200008c8:	0019      	movs	r1, r3
200008ca:	f7ff fe66 	bl	2000059a <pixel>
	for (int i = 0; i < o->geo->numpoints; i++) {
200008ce:	697b      	ldr	r3, [r7, #20]
200008d0:	3301      	adds	r3, #1
200008d2:	617b      	str	r3, [r7, #20]
200008d4:	687b      	ldr	r3, [r7, #4]
200008d6:	681b      	ldr	r3, [r3, #0]
200008d8:	681a      	ldr	r2, [r3, #0]
200008da:	697b      	ldr	r3, [r7, #20]
200008dc:	429a      	cmp	r2, r3
200008de:	dcd2      	bgt.n	20000886 <draw_object+0x1a>
	}
}
200008e0:	46c0      	nop			; (mov r8, r8)
200008e2:	46bd      	mov	sp, r7
200008e4:	b006      	add	sp, #24
200008e6:	bd80      	pop	{r7, pc}

200008e8 <clear_object>:

// clears the object from the screen through the pixel() function
void clear_object(POBJECT o) {
200008e8:	b580      	push	{r7, lr}
200008ea:	b088      	sub	sp, #32
200008ec:	af00      	add	r7, sp, #0
200008ee:	6078      	str	r0, [r7, #4]
	int xx,yy,offsx,offsy;
	xx = o->posx;
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	68db      	ldr	r3, [r3, #12]
200008f4:	61bb      	str	r3, [r7, #24]
	yy = o->posy;
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	691b      	ldr	r3, [r3, #16]
200008fa:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < o->geo->numpoints; i++) {
200008fc:	2300      	movs	r3, #0
200008fe:	61fb      	str	r3, [r7, #28]
20000900:	e01e      	b.n	20000940 <clear_object+0x58>
		offsx = o->geo->px[i].x;
20000902:	687b      	ldr	r3, [r7, #4]
20000904:	681a      	ldr	r2, [r3, #0]
20000906:	69fb      	ldr	r3, [r7, #28]
20000908:	3304      	adds	r3, #4
2000090a:	005b      	lsls	r3, r3, #1
2000090c:	18d3      	adds	r3, r2, r3
2000090e:	3304      	adds	r3, #4
20000910:	781b      	ldrb	r3, [r3, #0]
20000912:	613b      	str	r3, [r7, #16]
		offsy = o->geo->px[i].y;
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	681a      	ldr	r2, [r3, #0]
20000918:	69fb      	ldr	r3, [r7, #28]
2000091a:	3304      	adds	r3, #4
2000091c:	005b      	lsls	r3, r3, #1
2000091e:	18d3      	adds	r3, r2, r3
20000920:	3305      	adds	r3, #5
20000922:	781b      	ldrb	r3, [r3, #0]
20000924:	60fb      	str	r3, [r7, #12]
		
		pixel(xx+offsx,yy+offsy, 0);
20000926:	69ba      	ldr	r2, [r7, #24]
20000928:	693b      	ldr	r3, [r7, #16]
2000092a:	18d0      	adds	r0, r2, r3
2000092c:	697a      	ldr	r2, [r7, #20]
2000092e:	68fb      	ldr	r3, [r7, #12]
20000930:	18d3      	adds	r3, r2, r3
20000932:	2200      	movs	r2, #0
20000934:	0019      	movs	r1, r3
20000936:	f7ff fe30 	bl	2000059a <pixel>
	for (int i = 0; i < o->geo->numpoints; i++) {
2000093a:	69fb      	ldr	r3, [r7, #28]
2000093c:	3301      	adds	r3, #1
2000093e:	61fb      	str	r3, [r7, #28]
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	681b      	ldr	r3, [r3, #0]
20000944:	681a      	ldr	r2, [r3, #0]
20000946:	69fb      	ldr	r3, [r7, #28]
20000948:	429a      	cmp	r2, r3
2000094a:	dcda      	bgt.n	20000902 <clear_object+0x1a>
	}
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	b008      	add	sp, #32
20000952:	bd80      	pop	{r7, pc}

20000954 <move_object>:

// clears from pos A and then moves to pos B, taking in consideration walls (or in this case the edge of the screen)
void move_object(POBJECT o) {
20000954:	b580      	push	{r7, lr}
20000956:	b082      	sub	sp, #8
20000958:	af00      	add	r7, sp, #0
2000095a:	6078      	str	r0, [r7, #4]
	clear_object(o);
2000095c:	687b      	ldr	r3, [r7, #4]
2000095e:	0018      	movs	r0, r3
20000960:	f7ff ffc2 	bl	200008e8 <clear_object>
	o->posx += o->dirx;
20000964:	687b      	ldr	r3, [r7, #4]
20000966:	68da      	ldr	r2, [r3, #12]
20000968:	687b      	ldr	r3, [r7, #4]
2000096a:	685b      	ldr	r3, [r3, #4]
2000096c:	18d2      	adds	r2, r2, r3
2000096e:	687b      	ldr	r3, [r7, #4]
20000970:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	691a      	ldr	r2, [r3, #16]
20000976:	687b      	ldr	r3, [r7, #4]
20000978:	689b      	ldr	r3, [r3, #8]
2000097a:	18d2      	adds	r2, r2, r3
2000097c:	687b      	ldr	r3, [r7, #4]
2000097e:	611a      	str	r2, [r3, #16]
	
	if(o->posx < 1 || o->posx + o->geo->sizex > 128)
20000980:	687b      	ldr	r3, [r7, #4]
20000982:	68db      	ldr	r3, [r3, #12]
20000984:	2b00      	cmp	r3, #0
20000986:	dd07      	ble.n	20000998 <move_object+0x44>
20000988:	687b      	ldr	r3, [r7, #4]
2000098a:	68da      	ldr	r2, [r3, #12]
2000098c:	687b      	ldr	r3, [r7, #4]
2000098e:	681b      	ldr	r3, [r3, #0]
20000990:	685b      	ldr	r3, [r3, #4]
20000992:	18d3      	adds	r3, r2, r3
20000994:	2b80      	cmp	r3, #128	; 0x80
20000996:	dd04      	ble.n	200009a2 <move_object+0x4e>
		o->dirx = -o->dirx;
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	685b      	ldr	r3, [r3, #4]
2000099c:	425a      	negs	r2, r3
2000099e:	687b      	ldr	r3, [r7, #4]
200009a0:	605a      	str	r2, [r3, #4]
	if(o->posy < 1 || o->posy + o->geo->sizey > 64)
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	691b      	ldr	r3, [r3, #16]
200009a6:	2b00      	cmp	r3, #0
200009a8:	dd07      	ble.n	200009ba <move_object+0x66>
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	691a      	ldr	r2, [r3, #16]
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	681b      	ldr	r3, [r3, #0]
200009b2:	689b      	ldr	r3, [r3, #8]
200009b4:	18d3      	adds	r3, r2, r3
200009b6:	2b40      	cmp	r3, #64	; 0x40
200009b8:	dd04      	ble.n	200009c4 <move_object+0x70>
		o->diry = -o->diry;
200009ba:	687b      	ldr	r3, [r7, #4]
200009bc:	689b      	ldr	r3, [r3, #8]
200009be:	425a      	negs	r2, r3
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	609a      	str	r2, [r3, #8]
	
	draw_object(o);
200009c4:	687b      	ldr	r3, [r7, #4]
200009c6:	0018      	movs	r0, r3
200009c8:	f7ff ff50 	bl	2000086c <draw_object>
200009cc:	46c0      	nop			; (mov r8, r8)
200009ce:	46bd      	mov	sp, r7
200009d0:	b002      	add	sp, #8
200009d2:	bd80      	pop	{r7, pc}

200009d4 <ball_geometry>:
200009d4:	0000000c 	andeq	r0, r0, ip
200009d8:	00000004 	andeq	r0, r0, r4
200009dc:	00000004 	andeq	r0, r0, r4
200009e0:	02000100 	andeq	r0, r0, #0, 2
200009e4:	01010001 	tsteq	r1, r1
200009e8:	03010201 	movweq	r0, #4609	; 0x1201
200009ec:	01020002 	tsteq	r2, r2
200009f0:	03020202 	movweq	r0, #8706	; 0x2202
200009f4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000a08 <ball>:
20000a08:	200009d4 	ldrdcs	r0, [r0], -r4
	...
20000a14:	00000001 	andeq	r0, r0, r1
20000a18:	00000001 	andeq	r0, r0, r1
20000a1c:	2000086d 	andcs	r0, r0, sp, ror #16
20000a20:	200008e9 	andcs	r0, r0, r9, ror #17
20000a24:	20000955 	andcs	r0, r0, r5, asr r9
20000a28:	2000084d 	andcs	r0, r0, sp, asr #16
20000a2c:	200000e2 	andcs	r0, r0, r2, ror #1
20000a30:	200000e2 	andcs	r0, r0, r2, ror #1
20000a34:	200000c4 	andcs	r0, r0, r4, asr #1
20000a38:	200000e2 	andcs	r0, r0, r2, ror #1
20000a3c:	200000b4 	strhcs	r0, [r0], -r4
20000a40:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
20000a44:	200000a6 	andcs	r0, r0, r6, lsr #1
20000a48:	200000e2 	andcs	r0, r0, r2, ror #1
20000a4c:	200000d4 	ldrdcs	r0, [r0], -r4
20000a50:	200005fa 	strdcs	r0, [r0], -sl
20000a54:	20000604 	andcs	r0, r0, r4, lsl #12
20000a58:	2000060e 	andcs	r0, r0, lr, lsl #12
20000a5c:	20000618 	andcs	r0, r0, r8, lsl r6
20000a60:	20000622 	andcs	r0, r0, r2, lsr #12
20000a64:	2000062c 	andcs	r0, r0, ip, lsr #12
20000a68:	20000636 	andcs	r0, r0, r6, lsr r6
20000a6c:	20000640 	andcs	r0, r0, r0, asr #12

20000a70 <key>:
20000a70:	0a030201 	beq	200c127c <key+0xc080c>
20000a74:	0b060504 	bleq	20181e8c <key+0x18141c>
20000a78:	0c090807 	stceq	8, cr0, [r9], {7}
20000a7c:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000a4c <ball+0x44>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000261 	andeq	r0, r0, r1, ror #4
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000051 	andeq	r0, r0, r1, asr r0
  10:	0001670c 	andeq	r6, r1, ip, lsl #14
	...
  20:	07040200 	streq	r0, [r4, -r0, lsl #4]
  24:	00000011 	andeq	r0, r0, r1, lsl r0
  28:	00004503 	andeq	r4, r0, r3, lsl #10
  2c:	03020200 	movweq	r0, #8704	; 0x2200
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00004904 	andeq	r4, r0, r4, lsl #18
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	49050200 	stmdbmi	r5, {r9}
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	08010200 	stmdaeq	r1, {r9}
  4c:	000000ef 	andeq	r0, r0, pc, ror #1
  50:	00016105 	andeq	r6, r1, r5, lsl #2
  54:	28060200 	stmdacs	r6, {r9}
  58:	03000000 	movweq	r0, #0
  5c:	00000116 	andeq	r0, r0, r6, lsl r1
  60:	97080234 	smladxls	r8, r4, r2, r0
  64:	06000000 	streq	r0, [r0], -r0
  68:	00000137 	andeq	r0, r0, r7, lsr r1
  6c:	00970902 	addseq	r0, r7, r2, lsl #18
  70:	06000000 	streq	r0, [r0], -r0
  74:	0000001e 	andeq	r0, r0, lr, lsl r0
  78:	00970a02 	addseq	r0, r7, r2, lsl #20
  7c:	06040000 	streq	r0, [r4], -r0
  80:	000000e9 	andeq	r0, r0, r9, ror #1
  84:	00970b02 	addseq	r0, r7, r2, lsl #22
  88:	04080000 	streq	r0, [r8], #-0
  8c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
  90:	00009e0c 	andeq	r9, r0, ip, lsl #28
  94:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  9c:	50080074 	andpl	r0, r8, r4, ror r0
  a0:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
  a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  a8:	000000ae 	andeq	r0, r0, lr, lsr #1
  ac:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
  b0:	00015307 	andeq	r5, r1, r7, lsl #6
  b4:	01030500 	tsteq	r3, r0, lsl #10
  b8:	0d020000 	stceq	0, cr0, [r2, #-0]
  bc:	0000005b 	andeq	r0, r0, fp, asr r0
  c0:	00010205 	andeq	r0, r1, r5, lsl #4
  c4:	cb0d0200 	blgt	3408cc <startup-0x1fcbf734>
  c8:	0a000000 	beq	d0 <startup-0x1fffff30>
  cc:	00005b04 	andeq	r5, r0, r4, lsl #22
  d0:	01e80300 	mvneq	r0, r0, lsl #6
  d4:	02240000 	eoreq	r0, r4, #0
  d8:	00014a0f 	andeq	r4, r1, pc, lsl #20
  dc:	65670400 	strbvs	r0, [r7, #-1024]!	; 0xfffffc00
  e0:	1002006f 	andne	r0, r2, pc, rrx
  e4:	000000c0 	andeq	r0, r0, r0, asr #1
  e8:	004c0600 	subeq	r0, ip, r0, lsl #12
  ec:	11020000 	mrsne	r0, (UNDEF: 2)
  f0:	00000097 	muleq	r0, r7, r0
  f4:	01320604 	teqeq	r2, r4, lsl #12
  f8:	11020000 	mrsne	r0, (UNDEF: 2)
  fc:	00000097 	muleq	r0, r7, r0
 100:	01e30608 	mvneq	r0, r8, lsl #12
 104:	12020000 	andne	r0, r2, #0
 108:	00000097 	muleq	r0, r7, r0
 10c:	010c060c 	tsteq	ip, ip, lsl #12
 110:	12020000 	andne	r0, r2, #0
 114:	00000097 	muleq	r0, r7, r0
 118:	000c0610 	andeq	r0, ip, r0, lsl r6
 11c:	13020000 	movwne	r0, #8192	; 0x2000
 120:	0000015b 	andeq	r0, r0, fp, asr r1
 124:	02a00614 	adceq	r0, r0, #20, 12	; 0x1400000
 128:	14020000 	strne	r0, [r2], #-0
 12c:	0000015b 	andeq	r0, r0, fp, asr r1
 130:	015c0618 	cmpeq	ip, r8, lsl r6
 134:	15020000 	strne	r0, [r2, #-0]
 138:	0000015b 	andeq	r0, r0, fp, asr r1
 13c:	0024061c 	eoreq	r0, r4, ip, lsl r6
 140:	16020000 	strne	r0, [r2], -r0
 144:	00000176 	andeq	r0, r0, r6, ror r1
 148:	550b0020 	strpl	r0, [fp, #-32]	; 0xffffffe0
 14c:	0c000001 	stceq	0, cr0, [r0], {1}
 150:	00000155 	andeq	r0, r0, r5, asr r1
 154:	d1040a00 	tstle	r4, r0, lsl #20
 158:	0a000000 	beq	160 <startup-0x1ffffea0>
 15c:	00014a04 	andeq	r4, r1, r4, lsl #20
 160:	01760b00 	cmneq	r6, r0, lsl #22
 164:	550c0000 	strpl	r0, [ip, #-0]
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000097 	muleq	r0, r7, r0
 170:	0000970c 	andeq	r9, r0, ip, lsl #14
 174:	040a0000 	streq	r0, [sl], #-0
 178:	00000161 	andeq	r0, r0, r1, ror #2
 17c:	00014705 	andeq	r4, r1, r5, lsl #14
 180:	d1170200 	tstle	r7, r0, lsl #4
 184:	05000000 	streq	r0, [r0, #-0]
 188:	00000146 	andeq	r0, r0, r6, asr #2
 18c:	01551702 	cmpeq	r5, r2, lsl #14
 190:	370d0000 	strcc	r0, [sp, -r0]
 194:	01000000 	mrseq	r0, (UNDEF: 0)
 198:	0000b50a 	andeq	fp, r0, sl, lsl #10
 19c:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
 1a0:	0e200009 	cdpeq	0, 2, cr0, cr0, cr9, {0}
 1a4:	0000014e 	andeq	r0, r0, lr, asr #2
 1a8:	017c1501 	cmneq	ip, r1, lsl #10
 1ac:	03050000 	movweq	r0, #20480	; 0x5000
 1b0:	20000a08 	andcs	r0, r0, r8, lsl #20
 1b4:	0001410f 	andeq	r4, r1, pc, lsl #2
 1b8:	97330100 	ldrls	r0, [r3, -r0, lsl #2]!
 1bc:	50000000 	andpl	r0, r0, r0
 1c0:	ac200000 	stcge	0, cr0, [r0], #-0
 1c4:	01000000 	mrseq	r0, (UNDEF: 0)
 1c8:	00022f9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
 1cc:	012d1000 			; <UNDEFINED> instruction: 0x012d1000
 1d0:	33010000 	movwcc	r0, #4096	; 0x1000
 1d4:	00000097 	muleq	r0, r7, r0
 1d8:	10649102 	rsbne	r9, r4, r2, lsl #2
 1dc:	00000120 	andeq	r0, r0, r0, lsr #2
 1e0:	022f3301 	eoreq	r3, pc, #67108864	; 0x4000000
 1e4:	91020000 	mrsls	r0, (UNDEF: 2)
 1e8:	00631160 	rsbeq	r1, r3, r0, ror #2
 1ec:	023b3401 	eorseq	r3, fp, #16777216	; 0x1000000
 1f0:	91020000 	mrsls	r0, (UNDEF: 2)
 1f4:	00fd126b 	rscseq	r1, sp, fp, ror #4
 1f8:	34010000 	strcc	r0, [r1], #-0
 1fc:	0000023b 	andeq	r0, r0, fp, lsr r2
 200:	00011112 	andeq	r1, r1, r2, lsl r1
 204:	3b340100 	blcc	d0060c <startup-0x1f2ff9f4>
 208:	11000002 	tstne	r0, r2
 20c:	35010070 	strcc	r0, [r1, #-112]	; 0xffffff90
 210:	00000187 	andeq	r0, r0, r7, lsl #3
 214:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
 218:	20000076 	andcs	r0, r0, r6, ror r0
 21c:	0000007c 	andeq	r0, r0, ip, ror r0
 220:	00000014 	andeq	r0, r0, r4, lsl r0
 224:	97410100 	strbls	r0, [r1, -r0, lsl #2]
 228:	15000000 	strne	r0, [r0, #-0]
 22c:	0a000000 	beq	234 <startup-0x1ffffdcc>
 230:	00023504 	andeq	r3, r2, r4, lsl #10
 234:	3b040a00 	blcc	102a3c <startup-0x1fefd5c4>
 238:	02000002 	andeq	r0, r0, #2
 23c:	00f80801 	rscseq	r0, r8, r1, lsl #16
 240:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 244:	01000000 	mrseq	r0, (UNDEF: 0)
 248:	0000102b 	andeq	r1, r0, fp, lsr #32
 24c:	00004020 	andeq	r4, r0, r0, lsr #32
 250:	169c0100 	ldrne	r0, [ip], r0, lsl #2
 254:	00000125 	andeq	r0, r0, r5, lsr #2
 258:	00002201 	andeq	r2, r0, r1, lsl #4
 25c:	000c2000 	andeq	r2, ip, r0
 260:	9c010000 	stcls	0, cr0, [r1], {-0}
 264:	0000aa00 	andeq	sl, r0, r0, lsl #20
 268:	2b000400 	blcs	1270 <startup-0x1fffed90>
 26c:	04000001 	streq	r0, [r0], #-1
 270:	00005101 	andeq	r5, r0, r1, lsl #2
 274:	02050c00 	andeq	r0, r5, #0, 24
 278:	00fc0000 	rscseq	r0, ip, r0
 27c:	00d02000 	sbcseq	r2, r0, r0
 280:	00e40000 	rsceq	r0, r4, r0
 284:	00020000 	andeq	r0, r2, r0
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	0001ae24 	andeq	sl, r1, r4, lsr #28
 290:	00001e20 	andeq	r1, r0, r0, lsr #28
 294:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
 298:	03000000 	movweq	r0, #0
 29c:	0100736d 	tsteq	r0, sp, ror #6
 2a0:	00004424 	andeq	r4, r0, r4, lsr #8
 2a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2a8:	07040400 	streq	r0, [r4, -r0, lsl #8]
 2ac:	00000011 	andeq	r0, r0, r1, lsl r0
 2b0:	0001ed02 	andeq	lr, r1, r2, lsl #26
 2b4:	841d0100 	ldrhi	r0, [sp], #-256	; 0xffffff00
 2b8:	2a200001 	bcs	8002c4 <startup-0x1f7ffd3c>
 2bc:	01000000 	mrseq	r0, (UNDEF: 0)
 2c0:	0000849c 	muleq	r0, ip, r4
 2c4:	73750300 	cmnvc	r5, #0, 6
 2c8:	441d0100 	ldrmi	r0, [sp], #-256	; 0xffffff00
 2cc:	02000000 	andeq	r0, r0, #0
 2d0:	8c056c91 	stchi	12, cr6, [r5], {145}	; 0x91
 2d4:	1a200001 	bne	8002e0 <startup-0x1f7ffd20>
 2d8:	06000000 	streq	r0, [r0], -r0
 2dc:	1e010069 	cdpne	0, 0, cr0, cr1, cr9, {3}
 2e0:	00000084 	andeq	r0, r0, r4, lsl #1
 2e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 2e8:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 2ec:	00746e69 	rsbseq	r6, r4, r9, ror #28
 2f0:	0001f908 	andeq	pc, r1, r8, lsl #18
 2f4:	40130100 	andsmi	r0, r3, r0, lsl #2
 2f8:	44200001 	strtmi	r0, [r0], #-1
 2fc:	01000000 	mrseq	r0, (UNDEF: 0)
 300:	027f099c 	rsbseq	r0, pc, #156, 18	; 0x270000
 304:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 308:	200000fc 	strdcs	r0, [r0], -ip
 30c:	00000044 	andeq	r0, r0, r4, asr #32
 310:	b8009c01 	stmdalt	r0, {r0, sl, fp, ip, pc}
 314:	04000002 	streq	r0, [r0], #-2
 318:	0001c200 	andeq	ip, r1, r0, lsl #4
 31c:	51010400 	tstpl	r1, r0, lsl #8
 320:	0c000000 	stceq	0, cr0, [r0], {-0}
 324:	000002db 	ldrdeq	r0, [r0], -fp
 328:	200001cc 	andcs	r0, r0, ip, asr #3
 32c:	0000057c 	andeq	r0, r0, ip, ror r5
 330:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 334:	00039702 	andeq	r9, r3, r2, lsl #14
 338:	2c200100 	stfcss	f0, [r0], #-0
 33c:	03000000 	movweq	r0, #0
 340:	00ef0801 	rsceq	r0, pc, r1, lsl #16
 344:	d5040000 	strle	r0, [r4, #-0]
 348:	01000002 	tsteq	r0, r2
 34c:	00059ac4 	andeq	r9, r5, r4, asr #21
 350:	0001ae20 	andeq	sl, r1, r0, lsr #28
 354:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
 358:	05000000 	streq	r0, [r0, #-0]
 35c:	c4010078 	strgt	r0, [r1], #-120	; 0xffffff88
 360:	000000b5 	strheq	r0, [r0], -r5
 364:	055c9102 	ldrbeq	r9, [ip, #-258]	; 0xfffffefe
 368:	c4010079 	strgt	r0, [r1], #-121	; 0xffffff87
 36c:	000000b5 	strheq	r0, [r0], -r5
 370:	05589102 	ldrbeq	r9, [r8, #-258]	; 0xfffffefe
 374:	00746573 	rsbseq	r6, r4, r3, ror r5
 378:	00b5c401 	adcseq	ip, r5, r1, lsl #8
 37c:	91020000 	mrsls	r0, (UNDEF: 2)
 380:	03920654 	orrseq	r0, r2, #84, 12	; 0x5400000
 384:	ca010000 	bgt	4038c <startup-0x1ffbfc74>
 388:	000000bc 	strheq	r0, [r0], -ip
 38c:	066f9102 	strbteq	r9, [pc], -r2, lsl #2
 390:	000003d9 	ldrdeq	r0, [r0], -r9
 394:	00c3cb01 	sbceq	ip, r3, r1, lsl #22
 398:	91020000 	mrsls	r0, (UNDEF: 2)
 39c:	03c90668 	biceq	r0, r9, #104, 12	; 0x6800000
 3a0:	e5010000 	str	r0, [r1, #-0]
 3a4:	00000021 	andeq	r0, r0, r1, lsr #32
 3a8:	066e9102 	strbteq	r9, [lr], -r2, lsl #2
 3ac:	000003d4 	ldrdeq	r0, [r0], -r4
 3b0:	0021e501 	eoreq	lr, r1, r1, lsl #10
 3b4:	91020000 	mrsls	r0, (UNDEF: 2)
 3b8:	03630667 	cmneq	r3, #108003328	; 0x6700000
 3bc:	e6010000 	str	r0, [r1], -r0
 3c0:	000000bc 	strheq	r0, [r0], -ip
 3c4:	006d9102 	rsbeq	r9, sp, r2, lsl #2
 3c8:	11070403 	tstne	r7, r3, lsl #8
 3cc:	03000000 	movweq	r0, #0
 3d0:	00f80801 	rscseq	r0, r8, r1, lsl #16
 3d4:	04070000 	streq	r0, [r7], #-0
 3d8:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 3dc:	040e0400 	streq	r0, [lr], #-1024	; 0xfffffc00
 3e0:	b9010000 	stmdblt	r1, {}	; <UNPREDICTABLE>
 3e4:	20000542 	andcs	r0, r0, r2, asr #10
 3e8:	00000058 	andeq	r0, r0, r8, asr r0
 3ec:	01109c01 	tsteq	r0, r1, lsl #24
 3f0:	48080000 	stmdami	r8, {}	; <UNPREDICTABLE>
 3f4:	4a200005 	bmi	800410 <startup-0x1f7ffbf0>
 3f8:	06000000 	streq	r0, [r0], -r0
 3fc:	00000403 	andeq	r0, r0, r3, lsl #8
 400:	00c3ba01 	sbceq	fp, r3, r1, lsl #20
 404:	91020000 	mrsls	r0, (UNDEF: 2)
 408:	056c0874 	strbeq	r0, [ip, #-2164]!	; 0xfffff78c
 40c:	001a2000 	andseq	r2, sl, r0
 410:	61090000 	mrsvs	r0, (UNDEF: 9)
 414:	01006464 	tsteq	r0, r4, ror #8
 418:	0000c3bd 			; <UNDEFINED> instruction: 0x0000c3bd
 41c:	70910200 	addsvc	r0, r1, r0, lsl #4
 420:	0a000000 	beq	428 <startup-0x1ffffbd8>
 424:	00000423 	andeq	r0, r0, r3, lsr #8
 428:	04eca601 	strbteq	sl, [ip], #1537	; 0x601
 42c:	00562000 	subseq	r2, r6, r0
 430:	9c010000 	stcls	0, cr0, [r1], {-0}
 434:	0002c30b 	andeq	ip, r2, fp, lsl #6
 438:	21a00100 	lslcs	r0, r0, #2
 43c:	c2000000 	andgt	r0, r0, #0
 440:	2a200004 	bcs	800458 <startup-0x1f7ffba8>
 444:	01000000 	mrseq	r0, (UNDEF: 0)
 448:	0001499c 	muleq	r1, ip, r9
 44c:	03c90c00 	biceq	r0, r9, #0, 24
 450:	a0010000 	andge	r0, r1, r0
 454:	00000021 	andeq	r0, r0, r1, lsr #32
 458:	00779102 	rsbseq	r9, r7, r2, lsl #2
 45c:	00037f04 	andeq	r7, r3, r4, lsl #30
 460:	80980100 	addshi	r0, r8, r0, lsl #2
 464:	42200004 	eormi	r0, r0, #4
 468:	01000000 	mrseq	r0, (UNDEF: 0)
 46c:	00017b9c 	muleq	r1, ip, fp
 470:	02d00c00 	sbcseq	r0, r0, #0, 24
 474:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
 478:	00000021 	andeq	r0, r0, r1, lsr #32
 47c:	0c779102 	ldfeqp	f1, [r7], #-8
 480:	000003c9 	andeq	r0, r0, r9, asr #7
 484:	00219801 	eoreq	r9, r1, r1, lsl #16
 488:	91020000 	mrsls	r0, (UNDEF: 2)
 48c:	a6040076 			; <UNDEFINED> instruction: 0xa6040076
 490:	01000002 	tsteq	r0, r2
 494:	00044090 	muleq	r4, r0, r0
 498:	00004020 	andeq	r4, r0, r0, lsr #32
 49c:	ad9c0100 	ldfges	f0, [ip]
 4a0:	0c000001 	stceq	0, cr0, [r0], {1}
 4a4:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 4a8:	00219001 	eoreq	r9, r1, r1
 4ac:	91020000 	mrsls	r0, (UNDEF: 2)
 4b0:	03c90c77 	biceq	r0, r9, #30464	; 0x7700
 4b4:	90010000 	andls	r0, r1, r0
 4b8:	00000021 	andeq	r0, r0, r1, lsr #32
 4bc:	00769102 	rsbseq	r9, r6, r2, lsl #2
 4c0:	0003b404 	andeq	fp, r3, r4, lsl #8
 4c4:	c0750100 	rsbsgt	r0, r5, r0, lsl #2
 4c8:	80200003 	eorhi	r0, r0, r3
 4cc:	01000000 	mrseq	r0, (UNDEF: 0)
 4d0:	0001df9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 4d4:	04080c00 	streq	r0, [r8], #-3072	; 0xfffff400
 4d8:	75010000 	strvc	r0, [r1, #-0]
 4dc:	00000021 	andeq	r0, r0, r1, lsr #32
 4e0:	0c779102 	ldfeqp	f1, [r7], #-8
 4e4:	000003c9 	andeq	r0, r0, r9, asr #7
 4e8:	00217501 	eoreq	r7, r1, r1, lsl #10
 4ec:	91020000 	mrsls	r0, (UNDEF: 2)
 4f0:	df0b0076 	svcle	0x000b0076
 4f4:	01000003 	tsteq	r0, r3
 4f8:	00002c59 	andeq	r2, r0, r9, asr ip
 4fc:	00033000 	andeq	r3, r3, r0
 500:	00009020 	andeq	r9, r0, r0, lsr #32
 504:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 508:	0c000002 	stceq	0, cr0, [r0], {2}
 50c:	000003c9 	andeq	r0, r0, r9, asr #7
 510:	002c5901 	eoreq	r5, ip, r1, lsl #18
 514:	91020000 	mrsls	r0, (UNDEF: 2)
 518:	7672096f 	ldrbtvc	r0, [r2], -pc, ror #18
 51c:	2c610100 	stfcse	f0, [r1], #-0
 520:	02000000 	andeq	r0, r0, #0
 524:	0a007791 	beq	1e370 <startup-0x1ffe1c90>
 528:	0000036c 	andeq	r0, r0, ip, ror #6
 52c:	02cc4601 	sbceq	r4, ip, #1048576	; 0x100000
 530:	00642000 	rsbeq	r2, r4, r0
 534:	9c010000 	stcls	0, cr0, [r1], {-0}
 538:	0003c204 	andeq	ip, r3, r4, lsl #4
 53c:	7a340100 	bvc	d00944 <startup-0x1f2ff6bc>
 540:	52200002 	eorpl	r0, r0, #2
 544:	01000000 	mrseq	r0, (UNDEF: 0)
 548:	0002499c 	muleq	r2, ip, r9
 54c:	03c90c00 	biceq	r0, r9, #0, 24
 550:	34010000 	strcc	r0, [r1], #-0
 554:	00000021 	andeq	r0, r0, r1, lsr #32
 558:	00779102 	rsbseq	r9, r7, r2, lsl #2
 55c:	00028b04 	andeq	r8, r2, r4, lsl #22
 560:	4c2e0100 	stfmis	f0, [lr], #-0
 564:	2e200002 	cdpcs	0, 2, cr0, cr0, cr2, {0}
 568:	01000000 	mrseq	r0, (UNDEF: 0)
 56c:	00027b9c 	muleq	r2, ip, fp
 570:	035e0c00 	cmpeq	lr, #0, 24
 574:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 578:	00000021 	andeq	r0, r0, r1, lsr #32
 57c:	0c779102 	ldfeqp	f1, [r7], #-8
 580:	000002bc 			; <UNDEFINED> instruction: 0x000002bc
 584:	00212e01 	eoreq	r2, r1, r1, lsl #28
 588:	91020000 	mrsls	r0, (UNDEF: 2)
 58c:	ec0d0076 	stc	0, cr0, [sp], {118}	; 0x76
 590:	01000003 	tsteq	r0, r3
 594:	00020829 	andeq	r0, r2, r9, lsr #16
 598:	00004420 	andeq	r4, r0, r0, lsr #8
 59c:	9d9c0100 	ldflss	f0, [ip]
 5a0:	05000002 	streq	r0, [r0, #-2]
 5a4:	29010078 	stmdbcs	r1, {r3, r4, r5, r6}
 5a8:	00000021 	andeq	r0, r0, r1, lsr #32
 5ac:	00779102 	rsbseq	r9, r7, r2, lsl #2
 5b0:	00039f0e 	andeq	r9, r3, lr, lsl #30
 5b4:	cc230100 	stfgts	f0, [r3], #-0
 5b8:	3c200001 	stccc	0, cr0, [r0], #-4
 5bc:	01000000 	mrseq	r0, (UNDEF: 0)
 5c0:	0078059c 			; <UNDEFINED> instruction: 0x0078059c
 5c4:	00212301 	eoreq	r2, r1, r1, lsl #6
 5c8:	91020000 	mrsls	r0, (UNDEF: 2)
 5cc:	e5000077 	str	r0, [r0, #-119]	; 0xffffff89
 5d0:	04000000 	streq	r0, [r0], #-0
 5d4:	0002bc00 	andeq	fp, r2, r0, lsl #24
 5d8:	51010400 	tstpl	r1, r0, lsl #8
 5dc:	0c000000 	stceq	0, cr0, [r0], {-0}
 5e0:	00000451 	andeq	r0, r0, r1, asr r4
 5e4:	20000748 	andcs	r0, r0, r8, asr #14
 5e8:	00000104 	andeq	r0, r0, r4, lsl #2
 5ec:	00000327 	andeq	r0, r0, r7, lsr #6
 5f0:	00004402 	andeq	r4, r0, r2, lsl #8
 5f4:	00003100 	andeq	r3, r0, r0, lsl #2
 5f8:	00360300 	eorseq	r0, r6, r0, lsl #6
 5fc:	000f0000 	andeq	r0, pc, r0
 600:	00002104 	andeq	r2, r0, r4, lsl #2
 604:	07040500 	streq	r0, [r4, -r0, lsl #10]
 608:	00000153 	andeq	r0, r0, r3, asr r1
 60c:	ef080105 	svc	0x00080105
 610:	04000000 	streq	r0, [r0], #-0
 614:	0000003d 	andeq	r0, r0, sp, lsr r0
 618:	79656b06 	stmdbvc	r5!, {r1, r2, r8, r9, fp, sp, lr}^
 61c:	31090100 	mrscc	r0, (UNDEF: 25)
 620:	05000000 	streq	r0, [r0, #-0]
 624:	000a7003 	andeq	r7, sl, r3
 628:	04480720 	strbeq	r0, [r8], #-1824	; 0xfffff8e0
 62c:	24010000 	strcs	r0, [r1], #-0
 630:	0000003d 	andeq	r0, r0, sp, lsr r0
 634:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 638:	0000005c 	andeq	r0, r0, ip, asr r0
 63c:	00909c01 	addseq	r9, r0, r1, lsl #24
 640:	72080000 	andvc	r0, r8, #0
 644:	0100776f 	tsteq	r0, pc, ror #14
 648:	00009025 	andeq	r9, r0, r5, lsr #32
 64c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 650:	6c6f6308 	stclvs	3, cr6, [pc], #-32	; 638 <startup-0x1ffff9c8>
 654:	90250100 	eorls	r0, r5, r0, lsl #2
 658:	02000000 	andeq	r0, r0, #0
 65c:	09007091 	stmdbeq	r0, {r0, r4, r7, ip, sp, lr}
 660:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 664:	360a0074 			; <UNDEFINED> instruction: 0x360a0074
 668:	01000004 	tsteq	r0, r4
 66c:	00009017 	andeq	r9, r0, r7, lsl r0
 670:	00079800 	andeq	r9, r7, r0, lsl #16
 674:	00005820 	andeq	r5, r0, r0, lsr #16
 678:	bd9c0100 	ldflts	f0, [ip]
 67c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 680:	1b010063 	blne	40814 <startup-0x1ffbf7ec>
 684:	0000003d 	andeq	r0, r0, sp, lsr r0
 688:	00779102 	rsbseq	r9, r7, r2, lsl #2
 68c:	0004ce0b 	andeq	ip, r4, fp, lsl #28
 690:	480b0100 	stmdami	fp, {r8}
 694:	50200007 	eorpl	r0, r0, r7
 698:	01000000 	mrseq	r0, (UNDEF: 0)
 69c:	0000e19c 	muleq	r0, ip, r1
 6a0:	6f720c00 	svcvs	0x00720c00
 6a4:	0b010077 	bleq	40888 <startup-0x1ffbf778>
 6a8:	000000e1 	andeq	r0, r0, r1, ror #1
 6ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
 6b0:	11070405 	tstne	r7, r5, lsl #8
 6b4:	00000000 	andeq	r0, r0, r0
 6b8:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 6bc:	037e0004 	cmneq	lr, #4
 6c0:	01040000 	mrseq	r0, (UNDEF: 4)
 6c4:	00000051 	andeq	r0, r0, r1, asr r0
 6c8:	0005120c 	andeq	r1, r5, ip, lsl #4
 6cc:	00084c00 	andeq	r4, r8, r0, lsl #24
 6d0:	00018820 	andeq	r8, r1, r0, lsr #16
 6d4:	00041400 	andeq	r1, r4, r0, lsl #8
 6d8:	00450200 	subeq	r0, r5, r0, lsl #4
 6dc:	01020000 	mrseq	r0, (UNDEF: 2)
 6e0:	00004203 	andeq	r4, r0, r3, lsl #4
 6e4:	00780300 	rsbseq	r0, r8, r0, lsl #6
 6e8:	00420401 	subeq	r0, r2, r1, lsl #8
 6ec:	03000000 	movweq	r0, #0
 6f0:	05010079 	streq	r0, [r1, #-121]	; 0xffffff87
 6f4:	00000042 	andeq	r0, r0, r2, asr #32
 6f8:	01040001 	tsteq	r4, r1
 6fc:	0000ef08 	andeq	lr, r0, r8, lsl #30
 700:	01610500 	cmneq	r1, r0, lsl #10
 704:	06010000 	streq	r0, [r1], -r0
 708:	00000021 	andeq	r0, r0, r1, lsr #32
 70c:	00011602 	andeq	r1, r1, r2, lsl #12
 710:	08013400 	stmdaeq	r1, {sl, ip, sp}
 714:	00000090 	muleq	r0, r0, r0
 718:	00013706 	andeq	r3, r1, r6, lsl #14
 71c:	90090100 	andls	r0, r9, r0, lsl #2
 720:	00000000 	andeq	r0, r0, r0
 724:	00001e06 	andeq	r1, r0, r6, lsl #28
 728:	900a0100 	andls	r0, sl, r0, lsl #2
 72c:	04000000 	streq	r0, [r0], #-0
 730:	0000e906 	andeq	lr, r0, r6, lsl #18
 734:	900b0100 	andls	r0, fp, r0, lsl #2
 738:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 73c:	00787003 	rsbseq	r7, r8, r3
 740:	00970c01 	addseq	r0, r7, r1, lsl #24
 744:	000c0000 	andeq	r0, ip, r0
 748:	69050407 	stmdbvs	r5, {r0, r1, r2, sl}
 74c:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 750:	00000049 	andeq	r0, r0, r9, asr #32
 754:	000000a7 	andeq	r0, r0, r7, lsr #1
 758:	0000a709 	andeq	sl, r0, r9, lsl #14
 75c:	04001300 	streq	r1, [r0], #-768	; 0xfffffd00
 760:	01530704 	cmpeq	r3, r4, lsl #14
 764:	02050000 	andeq	r0, r5, #0
 768:	01000001 	tsteq	r0, r1
 76c:	0000b90d 	andeq	fp, r0, sp, lsl #18
 770:	54040a00 	strpl	r0, [r4], #-2560	; 0xfffff600
 774:	02000000 	andeq	r0, r0, #0
 778:	000001e8 	andeq	r0, r0, r8, ror #3
 77c:	380f0124 	stmdacc	pc, {r2, r5, r8}	; <UNPREDICTABLE>
 780:	03000001 	movweq	r0, #1
 784:	006f6567 	rsbeq	r6, pc, r7, ror #10
 788:	00ae1001 	adceq	r1, lr, r1
 78c:	06000000 	streq	r0, [r0], -r0
 790:	0000004c 	andeq	r0, r0, ip, asr #32
 794:	00901101 	addseq	r1, r0, r1, lsl #2
 798:	06040000 	streq	r0, [r4], -r0
 79c:	00000132 	andeq	r0, r0, r2, lsr r1
 7a0:	00901101 	addseq	r1, r0, r1, lsl #2
 7a4:	06080000 	streq	r0, [r8], -r0
 7a8:	000001e3 	andeq	r0, r0, r3, ror #3
 7ac:	00901201 	addseq	r1, r0, r1, lsl #4
 7b0:	060c0000 	streq	r0, [ip], -r0
 7b4:	0000010c 	andeq	r0, r0, ip, lsl #2
 7b8:	00901201 	addseq	r1, r0, r1, lsl #4
 7bc:	06100000 	ldreq	r0, [r0], -r0
 7c0:	0000000c 	andeq	r0, r0, ip
 7c4:	01491301 	cmpeq	r9, r1, lsl #6
 7c8:	06140000 	ldreq	r0, [r4], -r0
 7cc:	000002a0 	andeq	r0, r0, r0, lsr #5
 7d0:	01491401 	cmpeq	r9, r1, lsl #8
 7d4:	06180000 	ldreq	r0, [r8], -r0
 7d8:	0000015c 	andeq	r0, r0, ip, asr r1
 7dc:	01491501 	cmpeq	r9, r1, lsl #10
 7e0:	061c0000 	ldreq	r0, [ip], -r0
 7e4:	00000024 	andeq	r0, r0, r4, lsr #32
 7e8:	01641601 	cmneq	r4, r1, lsl #12
 7ec:	00200000 	eoreq	r0, r0, r0
 7f0:	0001430b 	andeq	r4, r1, fp, lsl #6
 7f4:	01430c00 	cmpeq	r3, r0, lsl #24
 7f8:	0a000000 	beq	800 <startup-0x1ffff800>
 7fc:	0000bf04 	andeq	fp, r0, r4, lsl #30
 800:	38040a00 	stmdacc	r4, {r9, fp}
 804:	0b000001 	bleq	810 <startup-0x1ffff7f0>
 808:	00000164 	andeq	r0, r0, r4, ror #2
 80c:	0001430c 	andeq	r4, r1, ip, lsl #6
 810:	00900c00 	addseq	r0, r0, r0, lsl #24
 814:	900c0000 	andls	r0, ip, r0
 818:	00000000 	andeq	r0, r0, r0
 81c:	014f040a 	cmpeq	pc, sl, lsl #8
 820:	46050000 	strmi	r0, [r5], -r0
 824:	01000001 	tsteq	r0, r1
 828:	00014317 	andeq	r4, r1, r7, lsl r3
 82c:	058d0d00 	streq	r0, [sp, #3328]	; 0xd00
 830:	3d010000 	stccc	0, cr0, [r1, #-0]
 834:	20000954 	andcs	r0, r0, r4, asr r9
 838:	00000080 	andeq	r0, r0, r0, lsl #1
 83c:	01979c01 	orrseq	r9, r7, r1, lsl #24
 840:	6f0e0000 	svcvs	0x000e0000
 844:	6a3d0100 	bvs	f40c4c <startup-0x1f0bf3b4>
 848:	02000001 	andeq	r0, r0, #1
 84c:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
 850:	00000505 	andeq	r0, r0, r5, lsl #10
 854:	08e82f01 	stmiaeq	r8!, {r0, r8, r9, sl, fp, sp}^
 858:	006c2000 	rsbeq	r2, ip, r0
 85c:	9c010000 	stcls	0, cr0, [r1], {-0}
 860:	0000021c 	andeq	r0, r0, ip, lsl r2
 864:	01006f0e 	tsteq	r0, lr, lsl #30
 868:	00016a2f 	andeq	r6, r1, pc, lsr #20
 86c:	5c910200 	lfmpl	f0, 4, [r1], {0}
 870:	0078780f 	rsbseq	r7, r8, pc, lsl #16
 874:	00903001 	addseq	r3, r0, r1
 878:	91020000 	mrsls	r0, (UNDEF: 2)
 87c:	79790f70 	ldmdbvc	r9!, {r4, r5, r6, r8, r9, sl, fp}^
 880:	90300100 	eorsls	r0, r0, r0, lsl #2
 884:	02000000 	andeq	r0, r0, #0
 888:	df106c91 	svcle	0x00106c91
 88c:	01000004 	tsteq	r0, r4
 890:	00009030 	andeq	r9, r0, r0, lsr r0
 894:	68910200 	ldmvs	r1, {r9}
 898:	0004e510 	andeq	lr, r4, r0, lsl r5
 89c:	90300100 	eorsls	r0, r0, r0, lsl #2
 8a0:	02000000 	andeq	r0, r0, #0
 8a4:	fc116491 	ldc2	4, cr6, [r1], {145}	; 0x91
 8a8:	50200008 	eorpl	r0, r0, r8
 8ac:	0f000000 	svceq	0x00000000
 8b0:	34010069 	strcc	r0, [r1], #-105	; 0xffffff97
 8b4:	00000090 	muleq	r0, r0, r0
 8b8:	11749102 	cmnne	r4, r2, lsl #2
 8bc:	20000902 	andcs	r0, r0, r2, lsl #18
 8c0:	00000038 	andeq	r0, r0, r8, lsr r0
 8c4:	0002d512 	andeq	sp, r2, r2, lsl r5
 8c8:	902a0100 	eorls	r0, sl, r0, lsl #2
 8cc:	13000000 	movwne	r0, #0
 8d0:	00000000 	andeq	r0, r0, r0
 8d4:	0004f20d 	andeq	pc, r4, sp, lsl #4
 8d8:	6c200100 	stfvss	f0, [r0], #-0
 8dc:	7c200008 	stcvc	0, cr0, [r0], #-32	; 0xffffffe0
 8e0:	01000000 	mrseq	r0, (UNDEF: 0)
 8e4:	0002a19c 	muleq	r2, ip, r1
 8e8:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 8ec:	016a2001 	cmneq	sl, r1
 8f0:	91020000 	mrsls	r0, (UNDEF: 2)
 8f4:	78780f64 	ldmdavc	r8!, {r2, r5, r6, r8, r9, sl, fp}^
 8f8:	90210100 	eorls	r0, r1, r0, lsl #2
 8fc:	02000000 	andeq	r0, r0, #0
 900:	790f7091 	stmdbvc	pc, {r0, r4, r7, ip, sp, lr}	; <UNPREDICTABLE>
 904:	21010079 	tstcs	r1, r9, ror r0
 908:	00000090 	muleq	r0, r0, r0
 90c:	106c9102 	rsbne	r9, ip, r2, lsl #2
 910:	000004df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 914:	02a12201 	adceq	r2, r1, #268435456	; 0x10000000
 918:	91020000 	mrsls	r0, (UNDEF: 2)
 91c:	04e5106b 	strbteq	r1, [r5], #107	; 0x6b
 920:	22010000 	andcs	r0, r1, #0
 924:	000002a1 	andeq	r0, r0, r1, lsr #5
 928:	116a9102 	cmnne	sl, r2, lsl #2
 92c:	20000880 	andcs	r0, r0, r0, lsl #17
 930:	00000060 	andeq	r0, r0, r0, rrx
 934:	0100690f 	tsteq	r0, pc, lsl #18
 938:	00009026 	andeq	r9, r0, r6, lsr #32
 93c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 940:	00088611 	andeq	r8, r8, r1, lsl r6
 944:	00004820 	andeq	r4, r0, r0, lsr #16
 948:	02d51200 	sbcseq	r1, r5, #0, 4
 94c:	2a010000 	bcs	40954 <startup-0x1ffbf6ac>
 950:	00000090 	muleq	r0, r0, r0
 954:	00000013 	andeq	r0, r0, r3, lsl r0
 958:	08010400 	stmdaeq	r1, {sl}
 95c:	000000f8 	strdeq	r0, [r0], -r8
 960:	00059914 	andeq	r9, r5, r4, lsl r9
 964:	4c1a0100 	ldfmis	f0, [sl], {-0}
 968:	20200008 	eorcs	r0, r0, r8
 96c:	01000000 	mrseq	r0, (UNDEF: 0)
 970:	006f0e9c 	mlseq	pc, ip, lr, r0	; <UNPREDICTABLE>
 974:	016a1a01 	cmneq	sl, r1, lsl #20
 978:	91020000 	mrsls	r0, (UNDEF: 2)
 97c:	04fe1574 	ldrbteq	r1, [lr], #1396	; 0x574
 980:	1a010000 	bne	40988 <startup-0x1ffbf678>
 984:	00000090 	muleq	r0, r0, r0
 988:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
 98c:	000004eb 	andeq	r0, r0, fp, ror #9
 990:	00901a01 	addseq	r1, r0, r1, lsl #20
 994:	91020000 	mrsls	r0, (UNDEF: 2)
 998:	Address 0x00000998 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00180219 	andseq	r0, r8, r9, lsl r2
  9c:	00340e00 	eorseq	r0, r4, r0, lsl #28
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	3f012e0f 	svccc	0x00012e0f
  b0:	3a0e0319 	bcc	380d1c <startup-0x1fc7f2e4>
  b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b8:	11134919 	tstne	r3, r9, lsl r9
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03000510 	movweq	r0, #1296	; 0x510
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  d4:	11000018 	tstne	r0, r8, lsl r0
  d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e4:	34120000 	ldrcc	r0, [r2], #-0
  e8:	3a0e0300 	bcc	380cf0 <startup-0x1fc7f310>
  ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  f0:	13000013 	movwne	r0, #19
  f4:	0111010b 	tsteq	r1, fp, lsl #2
  f8:	00000612 	andeq	r0, r0, r2, lsl r6
  fc:	3f012e14 	svccc	0x00012e14
 100:	3a0e0319 	bcc	380d6c <startup-0x1fc7f294>
 104:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 108:	00193c13 	andseq	r3, r9, r3, lsl ip
 10c:	00181500 	andseq	r1, r8, r0, lsl #10
 110:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 114:	03193f00 	tsteq	r9, #0, 30
 118:	3b0b3a0e 	blcc	2ce958 <startup-0x1fd316a8>
 11c:	1119270b 	tstne	r9, fp, lsl #14
 120:	40061201 	andmi	r1, r6, r1, lsl #4
 124:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 128:	01000000 	mrseq	r0, (UNDEF: 0)
 12c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 130:	0e030b13 	vmoveq.32	d3[0], r0
 134:	06120111 			; <UNDEFINED> instruction: 0x06120111
 138:	00001710 	andeq	r1, r0, r0, lsl r7
 13c:	3f012e02 	svccc	0x00012e02
 140:	3a0e0319 	bcc	380dac <startup-0x1fc7f254>
 144:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 148:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 14c:	96184006 	ldrls	r4, [r8], -r6
 150:	13011942 	movwne	r1, #6466	; 0x1942
 154:	05030000 	streq	r0, [r3, #-0]
 158:	3a080300 	bcc	200d60 <startup-0x1fdff2a0>
 15c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	00180213 	andseq	r0, r8, r3, lsl r2
 164:	00240400 	eoreq	r0, r4, r0, lsl #8
 168:	0b3e0b0b 	bleq	f82d9c <startup-0x1f07d264>
 16c:	00000e03 	andeq	r0, r0, r3, lsl #28
 170:	11010b05 	tstne	r1, r5, lsl #22
 174:	00061201 	andeq	r1, r6, r1, lsl #4
 178:	00340600 	eorseq	r0, r4, r0, lsl #12
 17c:	0b3a0803 	bleq	e82190 <startup-0x1f17de70>
 180:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 184:	00001802 	andeq	r1, r0, r2, lsl #16
 188:	0b002407 	bleq	91ac <startup-0x1fff6e54>
 18c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 190:	08000008 	stmdaeq	r0, {r3}
 194:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 198:	0b3a0e03 	bleq	e839ac <startup-0x1f17c654>
 19c:	01110b3b 	tsteq	r1, fp, lsr fp
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	00194297 	mulseq	r9, r7, r2
 1a8:	002e0900 	eoreq	r0, lr, r0, lsl #18
 1ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1b0:	0b3b0b3a 	bleq	ec2ea0 <startup-0x1f13d160>
 1b4:	01111927 	tsteq	r1, r7, lsr #18
 1b8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1bc:	00194297 	mulseq	r9, r7, r2
 1c0:	11010000 	mrsne	r0, (UNDEF: 1)
 1c4:	130e2501 	movwne	r2, #58625	; 0xe501
 1c8:	110e030b 	tstne	lr, fp, lsl #6
 1cc:	10061201 	andne	r1, r6, r1, lsl #4
 1d0:	02000017 	andeq	r0, r0, #23
 1d4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 1d8:	0b3b0b3a 	bleq	ec2ec8 <startup-0x1f13d138>
 1dc:	00001349 	andeq	r1, r0, r9, asr #6
 1e0:	0b002403 	bleq	91f4 <startup-0x1fff6e0c>
 1e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 1e8:	0400000e 	streq	r0, [r0], #-14
 1ec:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 1f0:	0b3a0e03 	bleq	e83a04 <startup-0x1f17c5fc>
 1f4:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1f8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1fc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 200:	00130119 	andseq	r0, r3, r9, lsl r1
 204:	00050500 	andeq	r0, r5, r0, lsl #10
 208:	0b3a0803 	bleq	e8221c <startup-0x1f17dde4>
 20c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 210:	00001802 	andeq	r1, r0, r2, lsl #16
 214:	03003406 	movweq	r3, #1030	; 0x406
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 220:	07000018 	smladeq	r0, r8, r0, r0
 224:	0b0b0024 	bleq	2c02bc <startup-0x1fd3fd44>
 228:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 22c:	0b080000 	bleq	200234 <startup-0x1fdffdcc>
 230:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 234:	09000006 	stmdbeq	r0, {r1, r2}
 238:	08030034 	stmdaeq	r3, {r2, r4, r5}
 23c:	0b3b0b3a 	bleq	ec2f2c <startup-0x1f13d0d4>
 240:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 244:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
 248:	03193f00 	tsteq	r9, #0, 30
 24c:	3b0b3a0e 	blcc	2cea8c <startup-0x1fd31574>
 250:	1119270b 	tstne	r9, fp, lsl #14
 254:	40061201 	andmi	r1, r6, r1, lsl #4
 258:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 25c:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
 260:	03193f01 	tsteq	r9, #1, 30
 264:	3b0b3a0e 	blcc	2ceaa4 <startup-0x1fd3155c>
 268:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 26c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 270:	96184006 	ldrls	r4, [r8], -r6
 274:	13011942 	movwne	r1, #6466	; 0x1942
 278:	050c0000 	streq	r0, [ip, #-0]
 27c:	3a0e0300 	bcc	380e84 <startup-0x1fc7f17c>
 280:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 284:	00180213 	andseq	r0, r8, r3, lsl r2
 288:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 28c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 290:	0b3b0b3a 	bleq	ec2f80 <startup-0x1f13d080>
 294:	01111927 	tsteq	r1, r7, lsr #18
 298:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 29c:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2a0:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 2a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 2a8:	0b3a0e03 	bleq	e83abc <startup-0x1f17c544>
 2ac:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2b0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2b4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2b8:	00000019 	andeq	r0, r0, r9, lsl r0
 2bc:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2c0:	030b130e 	movweq	r1, #45838	; 0xb30e
 2c4:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
 2c8:	00171006 	andseq	r1, r7, r6
 2cc:	01010200 	mrseq	r0, R9_usr
 2d0:	13011349 	movwne	r1, #4937	; 0x1349
 2d4:	21030000 	mrscs	r0, (UNDEF: 3)
 2d8:	2f134900 	svccs	0x00134900
 2dc:	0400000b 	streq	r0, [r0], #-11
 2e0:	13490026 	movtne	r0, #36902	; 0x9026
 2e4:	24050000 	strcs	r0, [r5], #-0
 2e8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 2ec:	000e030b 	andeq	r0, lr, fp, lsl #6
 2f0:	00340600 	eorseq	r0, r4, r0, lsl #12
 2f4:	0b3a0803 	bleq	e82308 <startup-0x1f17dcf8>
 2f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2fc:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 300:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 304:	03193f01 	tsteq	r9, #1, 30
 308:	3b0b3a0e 	blcc	2ceb48 <startup-0x1fd314b8>
 30c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 310:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 314:	96184006 	ldrls	r4, [r8], -r6
 318:	13011942 	movwne	r1, #6466	; 0x1942
 31c:	34080000 	strcc	r0, [r8], #-0
 320:	3a080300 	bcc	200f28 <startup-0x1fdff0d8>
 324:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 328:	00180213 	andseq	r0, r8, r3, lsl r2
 32c:	00240900 	eoreq	r0, r4, r0, lsl #18
 330:	0b3e0b0b 	bleq	f82f64 <startup-0x1f07d09c>
 334:	00000803 	andeq	r0, r0, r3, lsl #16
 338:	3f012e0a 	svccc	0x00012e0a
 33c:	3a0e0319 	bcc	380fa8 <startup-0x1fc7f058>
 340:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 344:	11134919 	tstne	r3, r9, lsl r9
 348:	40061201 	andmi	r1, r6, r1, lsl #4
 34c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 350:	00001301 	andeq	r1, r0, r1, lsl #6
 354:	3f012e0b 	svccc	0x00012e0b
 358:	3a0e0319 	bcc	380fc4 <startup-0x1fc7f03c>
 35c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 360:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 364:	97184006 	ldrls	r4, [r8, -r6]
 368:	13011942 	movwne	r1, #6466	; 0x1942
 36c:	050c0000 	streq	r0, [ip, #-0]
 370:	3a080300 	bcc	200f78 <startup-0x1fdff088>
 374:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 378:	00180213 	andseq	r0, r8, r3, lsl r2
 37c:	11010000 	mrsne	r0, (UNDEF: 1)
 380:	130e2501 	movwne	r2, #58625	; 0xe501
 384:	110e030b 	tstne	lr, fp, lsl #6
 388:	10061201 	andne	r1, r6, r1, lsl #4
 38c:	02000017 	andeq	r0, r0, #23
 390:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
 394:	0b3a0b0b 	bleq	e82fc8 <startup-0x1f17d038>
 398:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 39c:	0d030000 	stceq	0, cr0, [r3, #-0]
 3a0:	3a080300 	bcc	200fa8 <startup-0x1fdff058>
 3a4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3a8:	000b3813 	andeq	r3, fp, r3, lsl r8
 3ac:	00240400 	eoreq	r0, r4, r0, lsl #8
 3b0:	0b3e0b0b 	bleq	f82fe4 <startup-0x1f07d01c>
 3b4:	00000e03 	andeq	r0, r0, r3, lsl #28
 3b8:	03001605 	movweq	r1, #1541	; 0x605
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	0013490b 	andseq	r4, r3, fp, lsl #18
 3c4:	000d0600 	andeq	r0, sp, r0, lsl #12
 3c8:	0b3a0e03 	bleq	e83bdc <startup-0x1f17c424>
 3cc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3d0:	00000b38 	andeq	r0, r0, r8, lsr fp
 3d4:	0b002407 	bleq	93f8 <startup-0x1fff6c08>
 3d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3dc:	08000008 	stmdaeq	r0, {r3}
 3e0:	13490101 	movtne	r0, #37121	; 0x9101
 3e4:	00001301 	andeq	r1, r0, r1, lsl #6
 3e8:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 3ec:	000b2f13 	andeq	r2, fp, r3, lsl pc
 3f0:	000f0a00 	andeq	r0, pc, r0, lsl #20
 3f4:	13490b0b 	movtne	r0, #39691	; 0x9b0b
 3f8:	150b0000 	strne	r0, [fp, #-0]
 3fc:	01192701 	tsteq	r9, r1, lsl #14
 400:	0c000013 	stceq	0, cr0, [r0], {19}
 404:	13490005 	movtne	r0, #36869	; 0x9005
 408:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
 40c:	03193f01 	tsteq	r9, #1, 30
 410:	3b0b3a0e 	blcc	2cec50 <startup-0x1fd313b0>
 414:	1119270b 	tstne	r9, fp, lsl #14
 418:	40061201 	andmi	r1, r6, r1, lsl #4
 41c:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 420:	00001301 	andeq	r1, r0, r1, lsl #6
 424:	0300050e 	movweq	r0, #1294	; 0x50e
 428:	3b0b3a08 	blcc	2cec50 <startup-0x1fd313b0>
 42c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 430:	0f000018 	svceq	0x00000018
 434:	08030034 	stmdaeq	r3, {r2, r4, r5}
 438:	0b3b0b3a 	bleq	ec3128 <startup-0x1f13ced8>
 43c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 440:	34100000 	ldrcc	r0, [r0], #-0
 444:	3a0e0300 	bcc	38104c <startup-0x1fc7efb4>
 448:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 44c:	00180213 	andseq	r0, r8, r3, lsl r2
 450:	010b1100 	mrseq	r1, (UNDEF: 27)
 454:	06120111 			; <UNDEFINED> instruction: 0x06120111
 458:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 45c:	03193f01 	tsteq	r9, #1, 30
 460:	3b0b3a0e 	blcc	2ceca0 <startup-0x1fd31360>
 464:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 468:	13000019 	movwne	r0, #25
 46c:	00000018 	andeq	r0, r0, r8, lsl r0
 470:	3f012e14 	svccc	0x00012e14
 474:	3a0e0319 	bcc	3810e0 <startup-0x1fc7ef20>
 478:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 47c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 480:	97184006 	ldrls	r4, [r8, -r6]
 484:	00001942 	andeq	r1, r0, r2, asr #18
 488:	03000515 	movweq	r0, #1301	; 0x515
 48c:	3b0b3a0e 	blcc	2ceccc <startup-0x1fd31334>
 490:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 494:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000ec 	andeq	r0, r0, ip, ror #1
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02650002 	rsbeq	r0, r5, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000fc 	strdcs	r0, [r0], -ip
  3c:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03130002 	tsteq	r3, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001cc 	andcs	r0, r0, ip, asr #3
  5c:	0000057c 	andeq	r0, r0, ip, ror r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05cf0002 	strbeq	r0, [pc, #2]	; 76 <startup-0x1fffff8a>
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	20000748 	andcs	r0, r0, r8, asr #14
  7c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	06b80002 	ldrteq	r0, [r8], r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	2000084c 	andcs	r0, r0, ip, asr #16
  9c:	00000188 	andeq	r0, r0, r8, lsl #3
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000fc 	strdcs	r0, [r0], -ip
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000e0 	andeq	r0, r0, r0, ror #1
   4:	009e0002 	addseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	4320724d 			; <UNDEFINED> instruction: 0x4320724d
  28:	686e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	6f696c6f 	svcvs	0x00696c6f
  30:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  34:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  38:	542f7374 	strtpl	r7, [pc], #-884	; 40 <startup-0x1fffffc0>
  3c:	65426568 	strbvs	r6, [r2, #-1384]	; 0xfffffa98
  40:	6e4b7365 	cdpvs	3, 4, cr7, cr11, cr5, {3}
  44:	2f736565 	svccs	0x00736565
  48:	2f327241 	svccs	0x00327241
  4c:	30544144 	subscc	r4, r4, r4, asr #2
  50:	4d5f3731 	ldclmi	7, cr3, [pc, #-196]	; ffffff94 <key+0xdffff524>
  54:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  58:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  5c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  60:	5f646172 	svcpl	0x00646172
  64:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  68:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  6c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
  70:	2f432f67 	svccs	0x00432f67
  74:	30544144 	subscc	r4, r4, r4, asr #2
  78:	475f3731 	smmlarmi	pc, r1, r7, r3	; <UNPREDICTABLE>
  7c:	2f656d61 	svccs	0x00656d61
  80:	65646953 	strbvs	r6, [r4, #-2387]!	; 0xfffff6ad
  84:	6f726353 	svcvs	0x00726353
  88:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  8c:	74730000 	ldrbtvc	r0, [r3], #-0
  90:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  94:	00632e70 	rsbeq	r2, r3, r0, ror lr
  98:	6f000001 	svcvs	0x00000001
  9c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  a0:	00682e74 	rsbeq	r2, r8, r4, ror lr
  a4:	00000001 	andeq	r0, r0, r1
  a8:	00020500 	andeq	r0, r2, r0, lsl #10
  ac:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  b0:	5e130121 	mufplsp	f0, f3, f1
  b4:	01000302 	tsteq	r0, r2, lsl #6
  b8:	02050001 	andeq	r0, r5, #1
  bc:	20000010 	andcs	r0, r0, r0, lsl r0
  c0:	2f012a03 	svccs	0x00012a03
  c4:	594b3d3e 	stmdbpl	fp, {r1, r2, r3, r4, r5, r8, sl, fp, ip, sp}^
  c8:	2f305ae6 	svccs	0x00305ae6
  cc:	59683131 	stmdbpl	r8!, {r0, r4, r5, r8, ip, sp}^
  d0:	759f683d 	ldrvc	r6, [pc, #2109]	; 915 <startup-0x1ffff6eb>
  d4:	73768383 	cmnvc	r6, #201326594	; 0xc000002
  d8:	01040200 	mrseq	r0, R12_usr
  dc:	02207603 	eoreq	r7, r0, #3145728	; 0x300000
  e0:	01010005 	tsteq	r1, r5
  e4:	000000d7 	ldrdeq	r0, [r0], -r7
  e8:	00900002 	addseq	r0, r0, r2
  ec:	01020000 	mrseq	r0, (UNDEF: 2)
  f0:	000d0efb 	strdeq	r0, [sp], -fp
  f4:	01010101 	tsteq	r1, r1, lsl #2
  f8:	01000000 	mrseq	r0, (UNDEF: 0)
  fc:	43010000 	movwmi	r0, #4096	; 0x1000
 100:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 104:	2f737265 	svccs	0x00737265
 108:	4320724d 			; <UNDEFINED> instruction: 0x4320724d
 10c:	686e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 110:	6f696c6f 	svcvs	0x00696c6f
 114:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 118:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 11c:	542f7374 	strtpl	r7, [pc], #-884	; 124 <startup-0x1ffffedc>
 120:	65426568 	strbvs	r6, [r2, #-1384]	; 0xfffffa98
 124:	6e4b7365 	cdpvs	3, 4, cr7, cr11, cr5, {3}
 128:	2f736565 	svccs	0x00736565
 12c:	2f327241 	svccs	0x00327241
 130:	30544144 	subscc	r4, r4, r4, asr #2
 134:	4d5f3731 	ldclmi	7, cr3, [pc, #-196]	; 78 <startup-0x1fffff88>
 138:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 13c:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 140:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 144:	5f646172 	svcpl	0x00646172
 148:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 14c:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 150:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 154:	2f432f67 	svccs	0x00432f67
 158:	30544144 	subscc	r4, r4, r4, asr #2
 15c:	475f3731 	smmlarmi	pc, r1, r7, r3	; <UNPREDICTABLE>
 160:	2f656d61 	svccs	0x00656d61
 164:	65646953 	strbvs	r6, [r4, #-2387]!	; 0xfffff6ad
 168:	6f726353 	svcvs	0x00726353
 16c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 170:	65640000 	strbvs	r0, [r4, #-0]!
 174:	2e79616c 	rpwcsez	f6, f1, #4.0
 178:	00010063 	andeq	r0, r1, r3, rrx
 17c:	05000000 	streq	r0, [r0, #-0]
 180:	0000fc02 	andeq	pc, r0, r2, lsl #24
 184:	3d2f1a20 	vstmdbcc	pc!, {s2-s33}
 188:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 18c:	06010402 	streq	r0, [r1], -r2, lsl #8
 190:	3d750620 	ldclcc	6, cr0, [r5, #-128]!	; 0xffffff80
 194:	3d3d2f93 	ldccc	15, cr2, [sp, #-588]!	; 0xfffffdb4
 198:	02003d3d 	andeq	r3, r0, #3904	; 0xf40
 19c:	20060104 	andcs	r0, r6, r4, lsl #2
 1a0:	933d7506 	teqls	sp, #25165824	; 0x1800000
 1a4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1a8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1ac:	002d0304 	eoreq	r0, sp, r4, lsl #6
 1b0:	06010402 	streq	r0, [r1], -r2, lsl #8
 1b4:	4d5b063c 	ldclmi	6, cr0, [fp, #-240]	; 0xffffff10
 1b8:	04027550 	streq	r7, [r2], #-1360	; 0xfffffab0
 1bc:	64010100 	strvs	r0, [r1], #-256	; 0xffffff00
 1c0:	02000001 	andeq	r0, r0, #1
 1c4:	00009900 	andeq	r9, r0, r0, lsl #18
 1c8:	fb010200 	blx	409d2 <startup-0x1ffbf62e>
 1cc:	01000d0e 	tsteq	r0, lr, lsl #26
 1d0:	00010101 	andeq	r0, r1, r1, lsl #2
 1d4:	00010000 	andeq	r0, r1, r0
 1d8:	3a430100 	bcc	10c05e0 <startup-0x1ef3fa20>
 1dc:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 1e0:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 20 <startup-0x1fffffe0>
 1e4:	6f432072 	svcvs	0x00432072
 1e8:	6f686e72 	svcvs	0x00686e72
 1ec:	2f6f696c 	svccs	0x006f696c
 1f0:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1f4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1f8:	68542f73 	ldmdavs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 1fc:	65654265 	strbvs	r4, [r5, #-613]!	; 0xfffffd9b
 200:	656e4b73 	strbvs	r4, [lr, #-2931]!	; 0xfffff48d
 204:	412f7365 			; <UNDEFINED> instruction: 0x412f7365
 208:	442f3272 	strtmi	r3, [pc], #-626	; 210 <startup-0x1ffffdf0>
 20c:	31305441 	teqcc	r0, r1, asr #8
 210:	614d5f37 	cmpvs	sp, r7, lsr pc
 214:	6e696b73 	vmovvs.8	d9[7], r6
 218:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 21c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 220:	505f6461 	subspl	r6, pc, r1, ror #8
 224:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 228:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 22c:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 230:	442f432f 	strtmi	r4, [pc], #-815	; 238 <startup-0x1ffffdc8>
 234:	31305441 	teqcc	r0, r1, asr #8
 238:	61475f37 	cmpvs	r7, r7, lsr pc
 23c:	532f656d 			; <UNDEFINED> instruction: 0x532f656d
 240:	53656469 	cmnpl	r5, #1761607680	; 0x69000000
 244:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; c0 <startup-0x1fffff40>
 248:	0072656c 	rsbseq	r6, r2, ip, ror #10
 24c:	61726700 	cmnvs	r2, r0, lsl #14
 250:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 254:	70736964 	rsbsvc	r6, r3, r4, ror #18
 258:	2e79616c 	rpwcsez	f6, f1, #4.0
 25c:	00010063 	andeq	r0, r1, r3, rrx
 260:	05000000 	streq	r0, [r0, #-0]
 264:	0001cc02 	andeq	ip, r1, r2, lsl #24
 268:	01220320 			; <UNDEFINED> instruction: 0x01220320
 26c:	77839167 	strvc	r9, [r3, r7, ror #2]
 270:	6883d767 	stmvs	r3, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr, pc}
 274:	4d595991 	vldrmi.16	s11, [r9, #-290]	; 0xfffffede	; <UNPREDICTABLE>
 278:	740e0367 	strvc	r0, [lr], #-871	; 0xfffffc99
 27c:	03207203 			; <UNDEFINED> instruction: 0x03207203
 280:	74034a0e 	strvc	r4, [r3], #-2574	; 0xfffff5f2
 284:	4b223d20 	blmi	88f70c <startup-0x1f7708f4>
 288:	3d224b22 	vstmdbcc	r2!, {d4-d20}
 28c:	3d2f4d22 	stccc	13, cr4, [pc, #-136]!	; 20c <startup-0x1ffffdf4>
 290:	3d304b3d 	fldmdbxcc	r0!, {d4-d33}	;@ Deprecated
 294:	622f3d2f 	eorvs	r3, pc, #3008	; 0xbc0
 298:	3d3d2225 	lfmcc	f2, 4, [sp, #-148]!	; 0xffffff6c
 29c:	3d3d67be 	ldccc	7, cr6, [sp, #-760]!	; 0xfffffd08
 2a0:	3d30593d 			; <UNDEFINED> instruction: 0x3d30593d
 2a4:	593f3d59 	ldmdbpl	pc!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
 2a8:	3d59323d 	lfmcc	f3, 2, [r9, #-244]	; 0xffffff0c
 2ac:	91cb3d31 	bicls	r3, fp, r1, lsr sp
 2b0:	3d30594b 			; <UNDEFINED> instruction: 0x3d30594b
 2b4:	3d593f30 	ldclcc	15, cr3, [r9, #-192]	; 0xffffff40
 2b8:	313d5931 	teqcc	sp, r1, lsr r9
 2bc:	773d3d3d 			; <UNDEFINED> instruction: 0x773d3d3d
 2c0:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 2c4:	3d914d83 	ldccc	13, cr4, [r1, #524]	; 0x20c
 2c8:	4d834b59 	vstrmi	d4, [r3, #356]	; 0x164
 2cc:	4d675967 			; <UNDEFINED> instruction: 0x4d675967
 2d0:	3d3e3d2f 	ldccc	13, cr3, [lr, #-188]!	; 0xffffff44
 2d4:	4b4b3e3e 	blmi	12cfbd4 <startup-0x1ed3042c>
 2d8:	3d4c4b4b 	vstrcc	d20, [ip, #-300]	; 0xfffffed4
 2dc:	ad3d3d3f 	ldcge	13, cr3, [sp, #-252]!	; 0xffffff04
 2e0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2e4:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 2e8:	00490304 	subeq	r0, r9, r4, lsl #6
 2ec:	06010402 	streq	r0, [r1], -r2, lsl #8
 2f0:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 2f4:	00390602 	eorseq	r0, r9, r2, lsl #12
 2f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 2fc:	4d43063c 	stclmi	6, cr0, [r3, #-240]	; 0xffffff10
 300:	4ba30868 	blmi	fe8c24a8 <key+0xde8c1a38>
 304:	5a5a5aae 	bpl	1696dc4 <startup-0x1e96923c>
 308:	5a5a5a5a 	bpl	1696c78 <startup-0x1e969388>
 30c:	7a3d235a 	bvc	f4907c <startup-0x1f0b6f84>
 310:	4b764b3d 	blmi	1d9300c <startup-0x1e26cff4>
 314:	9fd7c969 	svcls	0x00d7c969
 318:	9fae3dc9 	svcls	0x00ae3dc9
 31c:	03ac4f03 			; <UNDEFINED> instruction: 0x03ac4f03
 320:	06022032 			; <UNDEFINED> instruction: 0x06022032
 324:	e9010100 	stmdb	r1, {r8}
 328:	02000000 	andeq	r0, r0, #0
 32c:	00009300 	andeq	r9, r0, r0, lsl #6
 330:	fb010200 	blx	40b3a <startup-0x1ffbf4c6>
 334:	01000d0e 	tsteq	r0, lr, lsl #26
 338:	00010101 	andeq	r0, r1, r1, lsl #2
 33c:	00010000 	andeq	r0, r1, r0
 340:	3a430100 	bcc	10c0748 <startup-0x1ef3f8b8>
 344:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 348:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 188 <startup-0x1ffffe78>
 34c:	6f432072 	svcvs	0x00432072
 350:	6f686e72 	svcvs	0x00686e72
 354:	2f6f696c 	svccs	0x006f696c
 358:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 35c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 360:	68542f73 	ldmdavs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 364:	65654265 	strbvs	r4, [r5, #-613]!	; 0xfffffd9b
 368:	656e4b73 	strbvs	r4, [lr, #-2931]!	; 0xfffff48d
 36c:	412f7365 			; <UNDEFINED> instruction: 0x412f7365
 370:	442f3272 	strtmi	r3, [pc], #-626	; 378 <startup-0x1ffffc88>
 374:	31305441 	teqcc	r0, r1, asr #8
 378:	614d5f37 	cmpvs	sp, r7, lsr pc
 37c:	6e696b73 	vmovvs.8	d9[7], r6
 380:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 384:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 388:	505f6461 	subspl	r6, pc, r1, ror #8
 38c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 390:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 394:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 398:	442f432f 	strtmi	r4, [pc], #-815	; 3a0 <startup-0x1ffffc60>
 39c:	31305441 	teqcc	r0, r1, asr #8
 3a0:	61475f37 	cmpvs	r7, r7, lsr pc
 3a4:	532f656d 			; <UNDEFINED> instruction: 0x532f656d
 3a8:	53656469 	cmnpl	r5, #1761607680	; 0x69000000
 3ac:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; 228 <startup-0x1ffffdd8>
 3b0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3b4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 3b8:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 3bc:	00632e64 	rsbeq	r2, r3, r4, ror #28
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	48020500 	stmdami	r2, {r8, sl}
 3c8:	03200007 			; <UNDEFINED> instruction: 0x03200007
 3cc:	914d010a 	cmpls	sp, sl, lsl #2
 3d0:	4b4b4b4b 	blmi	12d3104 <startup-0x1ed2cefc>
 3d4:	4b41764c 	blmi	105dd0c <startup-0x1efa22f4>
 3d8:	01040200 	mrseq	r0, R12_usr
 3dc:	2f065806 	svccs	0x00065806
 3e0:	01040200 	mrseq	r0, R12_usr
 3e4:	2f065806 	svccs	0x00065806
 3e8:	01040200 	mrseq	r0, R12_usr
 3ec:	2f065806 	svccs	0x00065806
 3f0:	01040200 	mrseq	r0, R12_usr
 3f4:	2f065806 	svccs	0x00065806
 3f8:	3d3e762f 	ldccc	6, cr7, [lr, #-188]!	; 0xffffff44
 3fc:	593d4b4b 	ldmdbpl	sp!, {r0, r1, r3, r6, r8, r9, fp, lr}
 400:	02040200 	andeq	r0, r4, #0, 4
 404:	0402006f 	streq	r0, [r2], #-111	; 0xffffff91
 408:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 40c:	02213d44 	eoreq	r3, r1, #68, 26	; 0x1100
 410:	01010007 	tsteq	r1, r7
 414:	00000101 	andeq	r0, r0, r1, lsl #2
 418:	00910002 	addseq	r0, r1, r2
 41c:	01020000 	mrseq	r0, (UNDEF: 2)
 420:	000d0efb 	strdeq	r0, [sp], -fp
 424:	01010101 	tsteq	r1, r1, lsl #2
 428:	01000000 	mrseq	r0, (UNDEF: 0)
 42c:	43010000 	movwmi	r0, #4096	; 0x1000
 430:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 434:	2f737265 	svccs	0x00737265
 438:	4320724d 			; <UNDEFINED> instruction: 0x4320724d
 43c:	686e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 440:	6f696c6f 	svcvs	0x00696c6f
 444:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 448:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 44c:	542f7374 	strtpl	r7, [pc], #-884	; 454 <startup-0x1ffffbac>
 450:	65426568 	strbvs	r6, [r2, #-1384]	; 0xfffffa98
 454:	6e4b7365 	cdpvs	3, 4, cr7, cr11, cr5, {3}
 458:	2f736565 	svccs	0x00736565
 45c:	2f327241 	svccs	0x00327241
 460:	30544144 	subscc	r4, r4, r4, asr #2
 464:	4d5f3731 	ldclmi	7, cr3, [pc, #-196]	; 3a8 <startup-0x1ffffc58>
 468:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 46c:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 470:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 474:	5f646172 	svcpl	0x00646172
 478:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 47c:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 480:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 484:	2f432f67 	svccs	0x00432f67
 488:	30544144 	subscc	r4, r4, r4, asr #2
 48c:	475f3731 	smmlarmi	pc, r1, r7, r3	; <UNPREDICTABLE>
 490:	2f656d61 	svccs	0x00656d61
 494:	65646953 	strbvs	r6, [r4, #-2387]!	; 0xfffff6ad
 498:	6f726353 	svcvs	0x00726353
 49c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4a0:	626f0000 	rsbvs	r0, pc, #0
 4a4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 4a8:	0100632e 	tsteq	r0, lr, lsr #6
 4ac:	00000000 	andeq	r0, r0, r0
 4b0:	084c0205 	stmdaeq	ip, {r0, r2, r9}^
 4b4:	19032000 	stmdbne	r3, {sp}
 4b8:	3d3d6701 	ldccc	7, cr6, [sp, #-4]!
 4bc:	3e3d4d4d 	cdpcc	13, 3, cr4, cr13, cr13, {2}
 4c0:	03040200 	movweq	r0, #16896	; 0x4200
 4c4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4c8:	0200ad03 	andeq	sl, r0, #3, 26	; 0xc0
 4cc:	00ae0304 	adceq	r0, lr, r4, lsl #6
 4d0:	d2030402 	andle	r0, r3, #33554432	; 0x2000000
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	6c063c06 	stcvs	12, cr3, [r6], {6}
 4dc:	3e3d4c4d 	cdpcc	12, 3, cr4, cr13, cr13, {2}
 4e0:	03040200 	movweq	r0, #16896	; 0x4200
 4e4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 4e8:	02009103 	andeq	r9, r0, #-1073741824	; 0xc0000000
 4ec:	00920304 	addseq	r0, r2, r4, lsl #6
 4f0:	9a030402 	bls	c1500 <startup-0x1ff3eb00>
 4f4:	01040200 	mrseq	r0, R12_usr
 4f8:	6c063c06 	stcvs	12, cr3, [r6], {6}
 4fc:	754b4b4d 	strbvc	r4, [fp, #-2893]	; 0xfffff4b3
 500:	04020076 	streq	r0, [r2], #-118	; 0xffffff8a
 504:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 508:	02005983 	andeq	r5, r0, #2146304	; 0x20c000
 50c:	4a060104 	bmi	180924 <startup-0x1fe7f6dc>
 510:	4b5a8306 	blmi	16a1130 <startup-0x1e95eed0>
 514:	01000402 	tsteq	r0, r2, lsl #8
 518:	Address 0x00000518 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  10:	736e7500 	cmnvc	lr, #0, 10
  14:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  18:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  1c:	69730074 	ldmdbvs	r3!, {r2, r4, r5, r6}^
  20:	0078657a 	rsbseq	r6, r8, sl, ror r5
  24:	5f746573 	svcpl	0x00746573
  28:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
  2c:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
  30:	615f7469 	cmpvs	pc, r9, ror #8
  34:	62007070 	andvs	r7, r0, #112	; 0x70
  38:	5f6c6c61 	svcpl	0x006c6c61
  3c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffea8 <key+0xdffff438>
  40:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  44:	6f507400 	svcvs	0x00507400
  48:	00746e69 	rsbseq	r6, r4, r9, ror #28
  4c:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  50:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
  54:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
  58:	332e3620 			; <UNDEFINED> instruction: 0x332e3620
  5c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  60:	30373130 	eorscc	r3, r7, r0, lsr r1
  64:	20303236 	eorscs	r3, r0, r6, lsr r2
  68:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  6c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  70:	415b2029 	cmpmi	fp, r9, lsr #32
  74:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff32a <key+0xdfffe8ba>
  78:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  7c:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  80:	72622d36 	rsbvc	r2, r2, #3456	; 0xd80
  84:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  88:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  8c:	6f697369 	svcvs	0x00697369
  90:	3432206e 	ldrtcc	r2, [r2], #-110	; 0xffffff92
  94:	37333439 			; <UNDEFINED> instruction: 0x37333439
  98:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  9c:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  a0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  a4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  a8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  ac:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  b0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  b4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  b8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  bc:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  c0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
  c4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
  c8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
  cc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
  d0:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
  d4:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
  d8:	20672d20 	rsbcs	r2, r7, r0, lsr #26
  dc:	20304f2d 	eorscs	r4, r0, sp, lsr #30
  e0:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
  e4:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
  e8:	7a697300 	bvc	1a5ccf0 <startup-0x1e5a3310>
  ec:	75007965 	strvc	r7, [r0, #-2405]	; 0xfffff69b
  f0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  f4:	2064656e 	rsbcs	r6, r4, lr, ror #10
  f8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  fc:	70736800 	rsbsvc	r6, r3, r0, lsl #16
 100:	47500064 	ldrbmi	r0, [r0, -r4, rrx]
 104:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 108:	00595254 	subseq	r5, r9, r4, asr r2
 10c:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 110:	70737600 	rsbsvc	r7, r3, r0, lsl #12
 114:	47740064 	ldrbmi	r0, [r4, -r4, rrx]!
 118:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 11c:	00797274 	rsbseq	r7, r9, r4, ror r2
 120:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 124:	61747300 	cmnvs	r4, r0, lsl #6
 128:	70757472 	rsbsvc	r7, r5, r2, ror r4
 12c:	67726100 	ldrbvs	r6, [r2, -r0, lsl #2]!
 130:	69640063 	stmdbvs	r4!, {r0, r1, r5, r6}^
 134:	6e007972 			; <UNDEFINED> instruction: 0x6e007972
 138:	6f706d75 	svcvs	0x00706d75
 13c:	73746e69 	cmnvc	r4, #1680	; 0x690
 140:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 144:	4f50006e 	svcmi	0x0050006e
 148:	43454a42 	movtmi	r4, #23106	; 0x5a42
 14c:	61620054 	qdsubvs	r0, r4, r2
 150:	73006c6c 	movwvc	r6, #3180	; 0xc6c
 154:	74657a69 	strbtvc	r7, [r5], #-2665	; 0xfffff597
 158:	00657079 	rsbeq	r7, r5, r9, ror r0
 15c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 160:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 164:	4300544e 	movwmi	r5, #1102	; 0x44e
 168:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 16c:	2f737265 	svccs	0x00737265
 170:	4320724d 			; <UNDEFINED> instruction: 0x4320724d
 174:	686e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 178:	6f696c6f 	svcvs	0x00696c6f
 17c:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 180:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 184:	542f7374 	strtpl	r7, [pc], #-884	; 18c <startup-0x1ffffe74>
 188:	65426568 	strbvs	r6, [r2, #-1384]	; 0xfffffa98
 18c:	6e4b7365 	cdpvs	3, 4, cr7, cr11, cr5, {3}
 190:	2f736565 	svccs	0x00736565
 194:	2f327241 	svccs	0x00327241
 198:	30544144 	subscc	r4, r4, r4, asr #2
 19c:	4d5f3731 	ldclmi	7, cr3, [pc, #-196]	; e0 <startup-0x1fffff20>
 1a0:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1a4:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 1a8:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 1ac:	5f646172 	svcpl	0x00646172
 1b0:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 1b4:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 1b8:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 1bc:	2f432f67 	svccs	0x00432f67
 1c0:	30544144 	subscc	r4, r4, r4, asr #2
 1c4:	475f3731 	smmlarmi	pc, r1, r7, r3	; <UNPREDICTABLE>
 1c8:	2f656d61 	svccs	0x00656d61
 1cc:	65646953 	strbvs	r6, [r4, #-2387]!	; 0xfffff6ad
 1d0:	6f726353 	svcvs	0x00726353
 1d4:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 1d8:	6174732f 	cmnvs	r4, pc, lsr #6
 1dc:	70757472 	rsbsvc	r7, r5, r2, ror r4
 1e0:	7000632e 	andvc	r6, r0, lr, lsr #6
 1e4:	0078736f 	rsbseq	r7, r8, pc, ror #6
 1e8:	6a624f74 	bvs	1893fc0 <startup-0x1e76c040>
 1ec:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1f0:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 136 <startup-0x1ffffeca>	; <UNPREDICTABLE>
 1f4:	6f726b69 	svcvs	0x00726b69
 1f8:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 1fc:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff8a3 <key+0xdfffee33>
 200:	736e3030 	cmnvc	lr, #48	; 0x30
 204:	2f3a4300 	svccs	0x003a4300
 208:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 20c:	724d2f73 	subvc	r2, sp, #460	; 0x1cc
 210:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 214:	6c6f686e 	stclvs	8, cr6, [pc], #-440	; 64 <startup-0x1fffff9c>
 218:	442f6f69 	strtmi	r6, [pc], #-3945	; 220 <startup-0x1ffffde0>
 21c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 220:	73746e65 	cmnvc	r4, #1616	; 0x650
 224:	6568542f 	strbvs	r5, [r8, #-1071]!	; 0xfffffbd1
 228:	73656542 	cmnvc	r5, #276824064	; 0x10800000
 22c:	65656e4b 	strbvs	r6, [r5, #-3659]!	; 0xfffff1b5
 230:	72412f73 	subvc	r2, r1, #460	; 0x1cc
 234:	41442f32 	cmpmi	r4, r2, lsr pc
 238:	37313054 			; <UNDEFINED> instruction: 0x37313054
 23c:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
 240:	6f6e696b 	svcvs	0x006e696b
 244:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 248:	61726574 	cmnvs	r2, r4, ror r5
 24c:	72505f64 	subsvc	r5, r0, #100, 30	; 0x190
 250:	6172676f 	cmnvs	r2, pc, ror #14
 254:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 258:	2f676e69 	svccs	0x00676e69
 25c:	41442f43 	cmpmi	r4, r3, asr #30
 260:	37313054 			; <UNDEFINED> instruction: 0x37313054
 264:	6d61475f 	stclvs	7, cr4, [r1, #-380]!	; 0xfffffe84
 268:	69532f65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 26c:	63536564 	cmpvs	r3, #100, 10	; 0x19000000
 270:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 274:	642f7265 	strtvs	r7, [pc], #-613	; 27c <startup-0x1ffffd84>
 278:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 27c:	6400632e 	strvs	r6, [r0], #-814	; 0xfffffcd2
 280:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 284:	3035325f 	eorscc	r3, r5, pc, asr r2
 288:	6700736e 	strvs	r7, [r0, -lr, ror #6]
 28c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 290:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 294:	5f6c7274 	svcpl	0x006c7274
 298:	5f746962 	svcpl	0x00746962
 29c:	5f746573 	svcpl	0x00746573
 2a0:	61656c63 	cmnvs	r5, r3, ror #24
 2a4:	72670072 	rsbvc	r0, r7, #114	; 0x72
 2a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2ac:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 2b0:	5f657469 	svcpl	0x00657469
 2b4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 2b8:	00646e61 	rsbeq	r6, r4, r1, ror #28
 2bc:	61656c63 	cmnvs	r5, r3, ror #24
 2c0:	67007872 	smlsdxvs	r0, r2, r8, r7
 2c4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2c8:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2cc:	5f646165 	svcpl	0x00646165
 2d0:	61746164 	cmnvs	r4, r4, ror #2
 2d4:	78697000 	stmdavc	r9!, {ip, sp, lr}^
 2d8:	43006c65 	movwmi	r6, #3173	; 0xc65
 2dc:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2e0:	2f737265 	svccs	0x00737265
 2e4:	4320724d 			; <UNDEFINED> instruction: 0x4320724d
 2e8:	686e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 2ec:	6f696c6f 	svcvs	0x00696c6f
 2f0:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
 2f4:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 2f8:	542f7374 	strtpl	r7, [pc], #-884	; 300 <startup-0x1ffffd00>
 2fc:	65426568 	strbvs	r6, [r2, #-1384]	; 0xfffffa98
 300:	6e4b7365 	cdpvs	3, 4, cr7, cr11, cr5, {3}
 304:	2f736565 	svccs	0x00736565
 308:	2f327241 	svccs	0x00327241
 30c:	30544144 	subscc	r4, r4, r4, asr #2
 310:	4d5f3731 	ldclmi	7, cr3, [pc, #-196]	; 254 <startup-0x1ffffdac>
 314:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 318:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 31c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 320:	5f646172 	svcpl	0x00646172
 324:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 328:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 32c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 330:	2f432f67 	svccs	0x00432f67
 334:	30544144 	subscc	r4, r4, r4, asr #2
 338:	475f3731 	smmlarmi	pc, r1, r7, r3	; <UNPREDICTABLE>
 33c:	2f656d61 	svccs	0x00656d61
 340:	65646953 	strbvs	r6, [r4, #-2387]!	; 0xfffff6ad
 344:	6f726353 	svcvs	0x00726353
 348:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 34c:	6172672f 	cmnvs	r2, pc, lsr #14
 350:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 354:	70736964 	rsbsvc	r6, r3, r4, ror #18
 358:	2e79616c 	rpwcsez	f6, f1, #4.0
 35c:	65730063 	ldrbvs	r0, [r3, #-99]!	; 0xffffff9d
 360:	78007874 	stmdavc	r0, {r2, r4, r5, r6, fp, ip, sp, lr}
 364:	7379665f 	cmnvc	r9, #99614720	; 0x5f00000
 368:	006b7369 	rsbeq	r7, fp, r9, ror #6
 36c:	70617267 	rsbvc	r7, r1, r7, ror #4
 370:	5f636968 	svcpl	0x00636968
 374:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 378:	6165725f 	cmnvs	r5, pc, asr r2
 37c:	67007964 	strvs	r7, [r0, -r4, ror #18]
 380:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 384:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 388:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 38c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 390:	616d0061 	cmnvs	sp, r1, rrx
 394:	75006b73 	strvc	r6, [r0, #-2931]	; 0xfffff48d
 398:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 39c:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 3a0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3a4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3a8:	5f6c7274 	svcpl	0x006c7274
 3ac:	5f746962 	svcpl	0x00746962
 3b0:	00746573 	rsbseq	r6, r4, r3, ror r5
 3b4:	70617267 	rsbvc	r7, r1, r7, ror #4
 3b8:	5f636968 	svcpl	0x00636968
 3bc:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 3c0:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
 3c4:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 3c8:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 3cc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 204 <startup-0x1ffffdfc>
 3d0:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3d4:	706d6574 	rsbvc	r6, sp, r4, ror r5
 3d8:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
 3dc:	67007865 	strvs	r7, [r0, -r5, ror #16]
 3e0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3e4:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 3e8:	00646165 	rsbeq	r6, r4, r5, ror #2
 3ec:	70617267 	rsbvc	r7, r1, r7, ror #4
 3f0:	5f636968 	svcpl	0x00636968
 3f4:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 3f8:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 3fc:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 400:	70007261 	andvc	r7, r0, r1, ror #4
 404:	00656761 	rsbeq	r6, r5, r1, ror #14
 408:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 40c:	72670065 	rsbvc	r0, r7, #101	; 0x65
 410:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 414:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 418:	5f726165 	svcpl	0x00726165
 41c:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 420:	67006e65 	strvs	r6, [r0, -r5, ror #28]
 424:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 428:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 42c:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 430:	7a696c61 	bvc	1a5b5bc <startup-0x1e5a4a44>
 434:	656b0065 	strbvs	r0, [fp, #-101]!	; 0xffffff9b
 438:	616f6279 	smcvs	63017	; 0xf629
 43c:	65476472 	strbvs	r6, [r7, #-1138]	; 0xfffffb8e
 440:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; 278 <startup-0x1ffffd88>
 444:	006e6d75 	rsbeq	r6, lr, r5, ror sp
 448:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 44c:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 450:	2f3a4300 	svccs	0x003a4300
 454:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 458:	724d2f73 	subvc	r2, sp, #460	; 0x1cc
 45c:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 460:	6c6f686e 	stclvs	8, cr6, [pc], #-440	; 2b0 <startup-0x1ffffd50>
 464:	442f6f69 	strtmi	r6, [pc], #-3945	; 46c <startup-0x1ffffb94>
 468:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 46c:	73746e65 	cmnvc	r4, #1616	; 0x650
 470:	6568542f 	strbvs	r5, [r8, #-1071]!	; 0xfffffbd1
 474:	73656542 	cmnvc	r5, #276824064	; 0x10800000
 478:	65656e4b 	strbvs	r6, [r5, #-3659]!	; 0xfffff1b5
 47c:	72412f73 	subvc	r2, r1, #460	; 0x1cc
 480:	41442f32 	cmpmi	r4, r2, lsr pc
 484:	37313054 			; <UNDEFINED> instruction: 0x37313054
 488:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
 48c:	6f6e696b 	svcvs	0x006e696b
 490:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 494:	61726574 	cmnvs	r2, r4, ror r5
 498:	72505f64 	subsvc	r5, r0, #100, 30	; 0x190
 49c:	6172676f 	cmnvs	r2, pc, ror #14
 4a0:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 4a4:	2f676e69 	svccs	0x00676e69
 4a8:	41442f43 	cmpmi	r4, r3, asr #30
 4ac:	37313054 			; <UNDEFINED> instruction: 0x37313054
 4b0:	6d61475f 	stclvs	7, cr4, [r1, #-380]!	; 0xfffffe84
 4b4:	69532f65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 4b8:	63536564 	cmpvs	r3, #100, 10	; 0x19000000
 4bc:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4c0:	6b2f7265 	blvs	bdce5c <startup-0x1f4231a4>
 4c4:	6f627965 	svcvs	0x00627965
 4c8:	2e647261 	cdpcs	2, 6, cr7, cr4, cr1, {3}
 4cc:	656b0063 	strbvs	r0, [fp, #-99]!	; 0xffffff9d
 4d0:	616f6279 	smcvs	63017	; 0xf629
 4d4:	63416472 	movtvs	r6, #5234	; 0x1472
 4d8:	61766974 	cmnvs	r6, r4, ror r9
 4dc:	6f006574 	svcvs	0x00006574
 4e0:	78736666 	ldmdavc	r3!, {r1, r2, r5, r6, r9, sl, sp, lr}^
 4e4:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
 4e8:	73007973 	movwvc	r7, #2419	; 0x973
 4ec:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 4f0:	72640079 	rsbvc	r0, r4, #121	; 0x79
 4f4:	6f5f7761 	svcvs	0x005f7761
 4f8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4fc:	70730074 	rsbsvc	r0, r3, r4, ror r0
 500:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 504:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 508:	6f5f7261 	svcvs	0x005f7261
 50c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 510:	3a430074 	bcc	10c06e8 <startup-0x1ef3f918>
 514:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 518:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 358 <startup-0x1ffffca8>
 51c:	6f432072 	svcvs	0x00432072
 520:	6f686e72 	svcvs	0x00686e72
 524:	2f6f696c 	svccs	0x006f696c
 528:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 52c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 530:	68542f73 	ldmdavs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 534:	65654265 	strbvs	r4, [r5, #-613]!	; 0xfffffd9b
 538:	656e4b73 	strbvs	r4, [lr, #-2931]!	; 0xfffff48d
 53c:	412f7365 			; <UNDEFINED> instruction: 0x412f7365
 540:	442f3272 	strtmi	r3, [pc], #-626	; 548 <startup-0x1ffffab8>
 544:	31305441 	teqcc	r0, r1, asr #8
 548:	614d5f37 	cmpvs	sp, r7, lsr pc
 54c:	6e696b73 	vmovvs.8	d9[7], r6
 550:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 554:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 558:	505f6461 	subspl	r6, pc, r1, ror #8
 55c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 560:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 564:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 568:	442f432f 	strtmi	r4, [pc], #-815	; 570 <startup-0x1ffffa90>
 56c:	31305441 	teqcc	r0, r1, asr #8
 570:	61475f37 	cmpvs	r7, r7, lsr pc
 574:	532f656d 			; <UNDEFINED> instruction: 0x532f656d
 578:	53656469 	cmnpl	r5, #1761607680	; 0x69000000
 57c:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; 3f8 <startup-0x1ffffc08>
 580:	2f72656c 	svccs	0x0072656c
 584:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 588:	632e7463 			; <UNDEFINED> instruction: 0x632e7463
 58c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 590:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 594:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 598:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 59c:	6a626f5f 	bvs	189c320 <startup-0x1e763ce0>
 5a0:	5f746365 	svcpl	0x00746365
 5a4:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 5a8:	Address 0x000005a8 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d32 	rsbsvc	r2, r5, r2, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	30323630 	eorscc	r3, r2, r0, lsr r6
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	33343934 	teqcc	r4, #52, 18	; 0xd0000
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000040 	andeq	r0, r0, r0, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000020 	andeq	r0, r0, r0, lsr #32
  40:	00000000 	andeq	r0, r0, r0
  44:	20000050 	andcs	r0, r0, r0, asr r0
  48:	000000ac 	andeq	r0, r0, ip, lsr #1
  4c:	400c0e41 	andmi	r0, ip, r1, asr #28
  50:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  54:	018e4002 	orreq	r4, lr, r2
  58:	41200e41 			; <UNDEFINED> instruction: 0x41200e41
  5c:	0000070d 	andeq	r0, r0, sp, lsl #14
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	200000fc 	strdcs	r0, [r0], -ip
  7c:	00000044 	andeq	r0, r0, r4, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	00000018 	andeq	r0, r0, r8, lsl r0
  90:	00000060 	andeq	r0, r0, r0, rrx
  94:	20000140 	andcs	r0, r0, r0, asr #2
  98:	00000044 	andeq	r0, r0, r4, asr #32
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000060 	andeq	r0, r0, r0, rrx
  b0:	20000184 	andcs	r0, r0, r4, lsl #3
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	180e4101 	stmdane	lr, {r0, r8, lr}
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	200001ae 	andcs	r0, r0, lr, lsr #3
  d4:	0000001e 	andeq	r0, r0, lr, lsl r0
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	100e4101 	andne	r4, lr, r1, lsl #2
  e4:	00070d41 	andeq	r0, r7, r1, asr #26
  e8:	0000000c 	andeq	r0, r0, ip
  ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f0:	7c020001 	stcvc	0, cr0, [r2], {1}
  f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000e8 	andeq	r0, r0, r8, ror #1
 100:	200001cc 	andcs	r0, r0, ip, asr #3
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000e8 	andeq	r0, r0, r8, ror #1
 120:	20000208 	andcs	r0, r0, r8, lsl #4
 124:	00000044 	andeq	r0, r0, r4, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000e8 	andeq	r0, r0, r8, ror #1
 140:	2000024c 	andcs	r0, r0, ip, asr #4
 144:	0000002e 	andeq	r0, r0, lr, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000e8 	andeq	r0, r0, r8, ror #1
 160:	2000027a 	andcs	r0, r0, sl, ror r2
 164:	00000052 	andeq	r0, r0, r2, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	00000018 	andeq	r0, r0, r8, lsl r0
 17c:	000000e8 	andeq	r0, r0, r8, ror #1
 180:	200002cc 	andcs	r0, r0, ip, asr #5
 184:	00000064 	andeq	r0, r0, r4, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000e8 	andeq	r0, r0, r8, ror #1
 19c:	20000330 	andcs	r0, r0, r0, lsr r3
 1a0:	00000090 	muleq	r0, r0, r0
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000e8 	andeq	r0, r0, r8, ror #1
 1bc:	200003c0 	andcs	r0, r0, r0, asr #7
 1c0:	00000080 	andeq	r0, r0, r0, lsl #1
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000e8 	andeq	r0, r0, r8, ror #1
 1dc:	20000440 	andcs	r0, r0, r0, asr #8
 1e0:	00000040 	andeq	r0, r0, r0, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000000e8 	andeq	r0, r0, r8, ror #1
 1fc:	20000480 	andcs	r0, r0, r0, lsl #9
 200:	00000042 	andeq	r0, r0, r2, asr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	000000e8 	andeq	r0, r0, r8, ror #1
 21c:	200004c2 	andcs	r0, r0, r2, asr #9
 220:	0000002a 	andeq	r0, r0, sl, lsr #32
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	100e4101 	andne	r4, lr, r1, lsl #2
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	000000e8 	andeq	r0, r0, r8, ror #1
 23c:	200004ec 	andcs	r0, r0, ip, ror #9
 240:	00000056 	andeq	r0, r0, r6, asr r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000000e8 	andeq	r0, r0, r8, ror #1
 258:	20000542 	andcs	r0, r0, r2, asr #10
 25c:	00000058 	andeq	r0, r0, r8, asr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000020 	andeq	r0, r0, r0, lsr #32
 274:	000000e8 	andeq	r0, r0, r8, ror #1
 278:	2000059a 	mulcs	r0, sl, r5
 27c:	000001ae 	andeq	r0, r0, lr, lsr #3
 280:	400c0e41 	andmi	r0, ip, r1, asr #28
 284:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 288:	018e4002 	orreq	r4, lr, r2
 28c:	41300e41 	teqmi	r0, r1, asr #28
 290:	0000070d 	andeq	r0, r0, sp, lsl #14
 294:	0000000c 	andeq	r0, r0, ip
 298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000294 	muleq	r0, r4, r2
 2ac:	20000748 	andcs	r0, r0, r8, asr #14
 2b0:	00000050 	andeq	r0, r0, r0, asr r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	100e4101 	andne	r4, lr, r1, lsl #2
 2c0:	00070d41 	andeq	r0, r7, r1, asr #26
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000294 	muleq	r0, r4, r2
 2cc:	20000798 	mulcs	r0, r8, r7
 2d0:	00000058 	andeq	r0, r0, r8, asr r0
 2d4:	40080e41 	andmi	r0, r8, r1, asr #28
 2d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2dc:	100e4101 	andne	r4, lr, r1, lsl #2
 2e0:	00070d41 	andeq	r0, r7, r1, asr #26
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000294 	muleq	r0, r4, r2
 2ec:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 2f0:	0000005c 	andeq	r0, r0, ip, asr r0
 2f4:	40080e41 	andmi	r0, r8, r1, asr #28
 2f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2fc:	100e4101 	andne	r4, lr, r1, lsl #2
 300:	00070d41 	andeq	r0, r7, r1, asr #26
 304:	0000000c 	andeq	r0, r0, ip
 308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 30c:	7c020001 	stcvc	0, cr0, [r2], {1}
 310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000304 	andeq	r0, r0, r4, lsl #6
 31c:	2000084c 	andcs	r0, r0, ip, asr #16
 320:	00000020 	andeq	r0, r0, r0, lsr #32
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	180e4101 	stmdane	lr, {r0, r8, lr}
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000304 	andeq	r0, r0, r4, lsl #6
 33c:	2000086c 	andcs	r0, r0, ip, ror #16
 340:	0000007c 	andeq	r0, r0, ip, ror r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	200e4101 	andcs	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000304 	andeq	r0, r0, r4, lsl #6
 35c:	200008e8 	andcs	r0, r0, r8, ror #17
 360:	0000006c 	andeq	r0, r0, ip, rrx
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000304 	andeq	r0, r0, r4, lsl #6
 37c:	20000954 	andcs	r0, r0, r4, asr r9
 380:	00000080 	andeq	r0, r0, r0, lsl #1
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
