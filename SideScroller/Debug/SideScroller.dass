
./Debug/SideScroller.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
};

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup (void) {
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f824 	bl	20000050 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:

void init_app(void) {
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	PORT_MODER = 0x55555555;
20000014:	4b08      	ldr	r3, [pc, #32]	; (20000038 <init_app+0x28>)
20000016:	4a09      	ldr	r2, [pc, #36]	; (2000003c <init_app+0x2c>)
20000018:	601a      	str	r2, [r3, #0]
	
	GPIO_MODER = 0x55005555;
2000001a:	4b09      	ldr	r3, [pc, #36]	; (20000040 <init_app+0x30>)
2000001c:	4a09      	ldr	r2, [pc, #36]	; (20000044 <init_app+0x34>)
2000001e:	601a      	str	r2, [r3, #0]
	GPIO_PUPDR = 0x00AA0000;
20000020:	4b09      	ldr	r3, [pc, #36]	; (20000048 <init_app+0x38>)
20000022:	22aa      	movs	r2, #170	; 0xaa
20000024:	0412      	lsls	r2, r2, #16
20000026:	601a      	str	r2, [r3, #0]
	GPIO_ODR_HIGH &= 0x00FF;
20000028:	4b08      	ldr	r3, [pc, #32]	; (2000004c <init_app+0x3c>)
2000002a:	4a08      	ldr	r2, [pc, #32]	; (2000004c <init_app+0x3c>)
2000002c:	7812      	ldrb	r2, [r2, #0]
2000002e:	b2d2      	uxtb	r2, r2
20000030:	701a      	strb	r2, [r3, #0]
}
20000032:	46c0      	nop			; (mov r8, r8)
20000034:	46bd      	mov	sp, r7
20000036:	bd80      	pop	{r7, pc}
20000038:	40021000 	andmi	r1, r2, r0
2000003c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000040:	40020c00 	andmi	r0, r2, r0, lsl #24
20000044:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000048:	40020c0c 	andmi	r0, r2, ip, lsl #24
2000004c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000050 <main>:

int main(int argc, char **argv) {
20000050:	b590      	push	{r4, r7, lr}
20000052:	b087      	sub	sp, #28
20000054:	af00      	add	r7, sp, #0
20000056:	6078      	str	r0, [r7, #4]
20000058:	6039      	str	r1, [r7, #0]
	char c;
	POBJECT player = &player;
2000005a:	2310      	movs	r3, #16
2000005c:	18fb      	adds	r3, r7, r3
2000005e:	613b      	str	r3, [r7, #16]
	POBJECT proj = &proj;
20000060:	230c      	movs	r3, #12
20000062:	18fb      	adds	r3, r7, r3
20000064:	60fb      	str	r3, [r7, #12]
	
	init_app();
20000066:	f7ff ffd3 	bl	20000010 <init_app>
	graphic_initialize();
2000006a:	f000 fa39 	bl	200004e0 <graphic_initialize>
	
	#ifndef SIMULATOR
		graphic_clear_screen();
2000006e:	f000 fa62 	bl	20000536 <graphic_clear_screen>
	#endif
	
	player->set_speed(player,4,1);
20000072:	693b      	ldr	r3, [r7, #16]
20000074:	6a1b      	ldr	r3, [r3, #32]
20000076:	6938      	ldr	r0, [r7, #16]
20000078:	2201      	movs	r2, #1
2000007a:	2104      	movs	r1, #4
2000007c:	4798      	blx	r3
	while(1) {
		player->move(player);
2000007e:	693b      	ldr	r3, [r7, #16]
20000080:	69db      	ldr	r3, [r3, #28]
20000082:	693a      	ldr	r2, [r7, #16]
20000084:	0010      	movs	r0, r2
20000086:	4798      	blx	r3
		proj->move(proj);
20000088:	68fb      	ldr	r3, [r7, #12]
2000008a:	69db      	ldr	r3, [r3, #28]
2000008c:	68fa      	ldr	r2, [r7, #12]
2000008e:	0010      	movs	r0, r2
20000090:	4798      	blx	r3
		delay_milli(40);
20000092:	2028      	movs	r0, #40	; 0x28
20000094:	f000 f87d 	bl	20000192 <delay_milli>
		c = keyboard();
20000098:	2317      	movs	r3, #23
2000009a:	18fc      	adds	r4, r7, r3
2000009c:	f000 fba2 	bl	200007e4 <keyboard>
200000a0:	0003      	movs	r3, r0
200000a2:	7023      	strb	r3, [r4, #0]
		
		switch(c) {
200000a4:	2317      	movs	r3, #23
200000a6:	18fb      	adds	r3, r7, r3
200000a8:	781b      	ldrb	r3, [r3, #0]
200000aa:	2b02      	cmp	r3, #2
200000ac:	d002      	beq.n	200000b4 <main+0x64>
200000ae:	2b08      	cmp	r3, #8
200000b0:	d008      	beq.n	200000c4 <main+0x74>
200000b2:	e00e      	b.n	200000d2 <main+0x82>
			case 2: player->set_speed(player,0,-2); break;
200000b4:	693b      	ldr	r3, [r7, #16]
200000b6:	6a1b      	ldr	r3, [r3, #32]
200000b8:	6938      	ldr	r0, [r7, #16]
200000ba:	2202      	movs	r2, #2
200000bc:	4252      	negs	r2, r2
200000be:	2100      	movs	r1, #0
200000c0:	4798      	blx	r3
200000c2:	e00c      	b.n	200000de <main+0x8e>
			case 8: player->set_speed(player,0,2); break;
200000c4:	693b      	ldr	r3, [r7, #16]
200000c6:	6a1b      	ldr	r3, [r3, #32]
200000c8:	6938      	ldr	r0, [r7, #16]
200000ca:	2202      	movs	r2, #2
200000cc:	2100      	movs	r1, #0
200000ce:	4798      	blx	r3
200000d0:	e005      	b.n	200000de <main+0x8e>
			//case 5: break;
			default: player->set_speed(player,0,0);
200000d2:	693b      	ldr	r3, [r7, #16]
200000d4:	6a1b      	ldr	r3, [r3, #32]
200000d6:	6938      	ldr	r0, [r7, #16]
200000d8:	2200      	movs	r2, #0
200000da:	2100      	movs	r1, #0
200000dc:	4798      	blx	r3
	while(1) {
200000de:	e7ce      	b.n	2000007e <main+0x2e>

200000e0 <delay_250ns>:
#define		COUNTFLAG	*((volatile unsigned int *) (STK_CTRL+0xF))
#define 	STK_LOAD	*((volatile unsigned int *) (SYS_TICK+0x4))
#define 	STK_VAL		*((volatile unsigned int *) (SYS_TICK+0x8))

// delays with 41 clock cycles (42-1, approx 250ns)
void delay_250ns(void) {
200000e0:	b580      	push	{r7, lr}
200000e2:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
200000e4:	4b0c      	ldr	r3, [pc, #48]	; (20000118 <delay_250ns+0x38>)
200000e6:	2200      	movs	r2, #0
200000e8:	601a      	str	r2, [r3, #0]
	STK_LOAD = 41;	// how many cycles you want to delay with
200000ea:	4b0c      	ldr	r3, [pc, #48]	; (2000011c <delay_250ns+0x3c>)
200000ec:	2229      	movs	r2, #41	; 0x29
200000ee:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
200000f0:	4b0b      	ldr	r3, [pc, #44]	; (20000120 <delay_250ns+0x40>)
200000f2:	2200      	movs	r2, #0
200000f4:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;	// activates timer
200000f6:	4b08      	ldr	r3, [pc, #32]	; (20000118 <delay_250ns+0x38>)
200000f8:	2205      	movs	r2, #5
200000fa:	601a      	str	r2, [r3, #0]
	while(!(COUNTFLAG & 1)) {}
200000fc:	46c0      	nop			; (mov r8, r8)
200000fe:	4b06      	ldr	r3, [pc, #24]	; (20000118 <delay_250ns+0x38>)
20000100:	681b      	ldr	r3, [r3, #0]
20000102:	330f      	adds	r3, #15
20000104:	681b      	ldr	r3, [r3, #0]
20000106:	2201      	movs	r2, #1
20000108:	4013      	ands	r3, r2
2000010a:	d0f8      	beq.n	200000fe <delay_250ns+0x1e>
	STK_CTRL = 0;
2000010c:	4b02      	ldr	r3, [pc, #8]	; (20000118 <delay_250ns+0x38>)
2000010e:	2200      	movs	r2, #0
20000110:	601a      	str	r2, [r3, #0]
}
20000112:	46c0      	nop			; (mov r8, r8)
20000114:	46bd      	mov	sp, r7
20000116:	bd80      	pop	{r7, pc}
20000118:	e000e010 	and	lr, r0, r0, lsl r0
2000011c:	e000e014 	and	lr, r0, r4, lsl r0
20000120:	e000e018 	and	lr, r0, r8, lsl r0

20000124 <delay_500ns>:

// delays with 83 clock cycles (84-1, approx 500ns)
void delay_500ns() {
20000124:	b580      	push	{r7, lr}
20000126:	af00      	add	r7, sp, #0
	STK_CTRL = 0;
20000128:	4b0c      	ldr	r3, [pc, #48]	; (2000015c <delay_500ns+0x38>)
2000012a:	2200      	movs	r2, #0
2000012c:	601a      	str	r2, [r3, #0]
	STK_LOAD = 83;
2000012e:	4b0c      	ldr	r3, [pc, #48]	; (20000160 <delay_500ns+0x3c>)
20000130:	2253      	movs	r2, #83	; 0x53
20000132:	601a      	str	r2, [r3, #0]
	STK_VAL = 0;
20000134:	4b0b      	ldr	r3, [pc, #44]	; (20000164 <delay_500ns+0x40>)
20000136:	2200      	movs	r2, #0
20000138:	601a      	str	r2, [r3, #0]
	STK_CTRL = 5;
2000013a:	4b08      	ldr	r3, [pc, #32]	; (2000015c <delay_500ns+0x38>)
2000013c:	2205      	movs	r2, #5
2000013e:	601a      	str	r2, [r3, #0]
	while(!(COUNTFLAG & 1)) {}
20000140:	46c0      	nop			; (mov r8, r8)
20000142:	4b06      	ldr	r3, [pc, #24]	; (2000015c <delay_500ns+0x38>)
20000144:	681b      	ldr	r3, [r3, #0]
20000146:	330f      	adds	r3, #15
20000148:	681b      	ldr	r3, [r3, #0]
2000014a:	2201      	movs	r2, #1
2000014c:	4013      	ands	r3, r2
2000014e:	d0f8      	beq.n	20000142 <delay_500ns+0x1e>
	STK_CTRL = 0;
20000150:	4b02      	ldr	r3, [pc, #8]	; (2000015c <delay_500ns+0x38>)
20000152:	2200      	movs	r2, #0
20000154:	601a      	str	r2, [r3, #0]
}
20000156:	46c0      	nop			; (mov r8, r8)
20000158:	46bd      	mov	sp, r7
2000015a:	bd80      	pop	{r7, pc}
2000015c:	e000e010 	and	lr, r0, r0, lsl r0
20000160:	e000e014 	and	lr, r0, r4, lsl r0
20000164:	e000e018 	and	lr, r0, r8, lsl r0

20000168 <delay_mikro>:

// runs delay_250ns four times per us
void delay_mikro(unsigned int us) {
20000168:	b580      	push	{r7, lr}
2000016a:	b084      	sub	sp, #16
2000016c:	af00      	add	r7, sp, #0
2000016e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4*us; i++) {
20000170:	2300      	movs	r3, #0
20000172:	60fb      	str	r3, [r7, #12]
20000174:	e004      	b.n	20000180 <delay_mikro+0x18>
		delay_250ns();
20000176:	f7ff ffb3 	bl	200000e0 <delay_250ns>
	for(int i = 0; i < 4*us; i++) {
2000017a:	68fb      	ldr	r3, [r7, #12]
2000017c:	3301      	adds	r3, #1
2000017e:	60fb      	str	r3, [r7, #12]
20000180:	687b      	ldr	r3, [r7, #4]
20000182:	009a      	lsls	r2, r3, #2
20000184:	68fb      	ldr	r3, [r7, #12]
20000186:	429a      	cmp	r2, r3
20000188:	d8f5      	bhi.n	20000176 <delay_mikro+0xe>
	}
}
2000018a:	46c0      	nop			; (mov r8, r8)
2000018c:	46bd      	mov	sp, r7
2000018e:	b004      	add	sp, #16
20000190:	bd80      	pop	{r7, pc}

20000192 <delay_milli>:

#define SIMULATOR
// runs delay_mikro 1000 times per ms
void delay_milli(unsigned int ms) {
20000192:	b580      	push	{r7, lr}
20000194:	b082      	sub	sp, #8
20000196:	af00      	add	r7, sp, #0
20000198:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		ms = ms / 1000;
2000019a:	687a      	ldr	r2, [r7, #4]
2000019c:	23fa      	movs	r3, #250	; 0xfa
2000019e:	0099      	lsls	r1, r3, #2
200001a0:	0010      	movs	r0, r2
200001a2:	f000 fc43 	bl	20000a2c <__udivsi3>
200001a6:	0003      	movs	r3, r0
200001a8:	607b      	str	r3, [r7, #4]
		ms++;
200001aa:	687b      	ldr	r3, [r7, #4]
200001ac:	3301      	adds	r3, #1
200001ae:	607b      	str	r3, [r7, #4]
	#endif
	
	delay_mikro(ms);
200001b0:	687b      	ldr	r3, [r7, #4]
200001b2:	0018      	movs	r0, r3
200001b4:	f7ff ffd8 	bl	20000168 <delay_mikro>
200001b8:	46c0      	nop			; (mov r8, r8)
200001ba:	46bd      	mov	sp, r7
200001bc:	b002      	add	sp, #8
200001be:	bd80      	pop	{r7, pc}

200001c0 <graphic_ctrl_bit_set>:
#define		LCD_BUSY		0x80

typedef unsigned char uint8_t;

// välj den displayen vi vill använda och ettställ de biter som är 1 i x
void graphic_ctrl_bit_set(uint8_t x) {
200001c0:	b580      	push	{r7, lr}
200001c2:	b082      	sub	sp, #8
200001c4:	af00      	add	r7, sp, #0
200001c6:	0002      	movs	r2, r0
200001c8:	1dfb      	adds	r3, r7, #7
200001ca:	701a      	strb	r2, [r3, #0]
	PORT_ODR_LOW |= x;
200001cc:	490a      	ldr	r1, [pc, #40]	; (200001f8 <graphic_ctrl_bit_set+0x38>)
200001ce:	4b0a      	ldr	r3, [pc, #40]	; (200001f8 <graphic_ctrl_bit_set+0x38>)
200001d0:	781b      	ldrb	r3, [r3, #0]
200001d2:	b2da      	uxtb	r2, r3
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	781b      	ldrb	r3, [r3, #0]
200001d8:	4313      	orrs	r3, r2
200001da:	b2db      	uxtb	r3, r3
200001dc:	700b      	strb	r3, [r1, #0]
	PORT_ODR_LOW &= ~B_SELECT;
200001de:	4a06      	ldr	r2, [pc, #24]	; (200001f8 <graphic_ctrl_bit_set+0x38>)
200001e0:	4b05      	ldr	r3, [pc, #20]	; (200001f8 <graphic_ctrl_bit_set+0x38>)
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	b2db      	uxtb	r3, r3
200001e6:	2104      	movs	r1, #4
200001e8:	438b      	bics	r3, r1
200001ea:	b2db      	uxtb	r3, r3
200001ec:	7013      	strb	r3, [r2, #0]
}
200001ee:	46c0      	nop			; (mov r8, r8)
200001f0:	46bd      	mov	sp, r7
200001f2:	b002      	add	sp, #8
200001f4:	bd80      	pop	{r7, pc}
200001f6:	46c0      	nop			; (mov r8, r8)
200001f8:	40021014 	andmi	r1, r2, r4, lsl r0

200001fc <graphic_ctrl_bit_clear>:

// välj den displayen vi vill använda och nollställ de biter som är 1 i x
void graphic_ctrl_bit_clear(uint8_t x) {
200001fc:	b580      	push	{r7, lr}
200001fe:	b082      	sub	sp, #8
20000200:	af00      	add	r7, sp, #0
20000202:	0002      	movs	r2, r0
20000204:	1dfb      	adds	r3, r7, #7
20000206:	701a      	strb	r2, [r3, #0]
	PORT_ODR_LOW &= ~x;
20000208:	490c      	ldr	r1, [pc, #48]	; (2000023c <graphic_ctrl_bit_clear+0x40>)
2000020a:	4b0c      	ldr	r3, [pc, #48]	; (2000023c <graphic_ctrl_bit_clear+0x40>)
2000020c:	781b      	ldrb	r3, [r3, #0]
2000020e:	b2db      	uxtb	r3, r3
20000210:	b25b      	sxtb	r3, r3
20000212:	1dfa      	adds	r2, r7, #7
20000214:	7812      	ldrb	r2, [r2, #0]
20000216:	b252      	sxtb	r2, r2
20000218:	43d2      	mvns	r2, r2
2000021a:	b252      	sxtb	r2, r2
2000021c:	4013      	ands	r3, r2
2000021e:	b25b      	sxtb	r3, r3
20000220:	b2db      	uxtb	r3, r3
20000222:	700b      	strb	r3, [r1, #0]
	PORT_ODR_LOW &= ~B_SELECT;
20000224:	4a05      	ldr	r2, [pc, #20]	; (2000023c <graphic_ctrl_bit_clear+0x40>)
20000226:	4b05      	ldr	r3, [pc, #20]	; (2000023c <graphic_ctrl_bit_clear+0x40>)
20000228:	781b      	ldrb	r3, [r3, #0]
2000022a:	b2db      	uxtb	r3, r3
2000022c:	2104      	movs	r1, #4
2000022e:	438b      	bics	r3, r1
20000230:	b2db      	uxtb	r3, r3
20000232:	7013      	strb	r3, [r2, #0]
}
20000234:	46c0      	nop			; (mov r8, r8)
20000236:	46bd      	mov	sp, r7
20000238:	b002      	add	sp, #8
2000023a:	bd80      	pop	{r7, pc}
2000023c:	40021014 	andmi	r1, r2, r4, lsl r0

20000240 <graphic_ctrl_bit_set_clear>:

void graphic_ctrl_bit_set_clear(uint8_t setx, uint8_t clearx) {
20000240:	b580      	push	{r7, lr}
20000242:	b082      	sub	sp, #8
20000244:	af00      	add	r7, sp, #0
20000246:	0002      	movs	r2, r0
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	701a      	strb	r2, [r3, #0]
2000024c:	1dbb      	adds	r3, r7, #6
2000024e:	1c0a      	adds	r2, r1, #0
20000250:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(setx);
20000252:	1dfb      	adds	r3, r7, #7
20000254:	781b      	ldrb	r3, [r3, #0]
20000256:	0018      	movs	r0, r3
20000258:	f7ff ffb2 	bl	200001c0 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(clearx);
2000025c:	1dbb      	adds	r3, r7, #6
2000025e:	781b      	ldrb	r3, [r3, #0]
20000260:	0018      	movs	r0, r3
20000262:	f7ff ffcb 	bl	200001fc <graphic_ctrl_bit_clear>
}
20000266:	46c0      	nop			; (mov r8, r8)
20000268:	46bd      	mov	sp, r7
2000026a:	b002      	add	sp, #8
2000026c:	bd80      	pop	{r7, pc}

2000026e <select_controller>:

// konfigurera CS-signalerna
void select_controller(uint8_t controller) {
2000026e:	b580      	push	{r7, lr}
20000270:	b082      	sub	sp, #8
20000272:	af00      	add	r7, sp, #0
20000274:	0002      	movs	r2, r0
20000276:	1dfb      	adds	r3, r7, #7
20000278:	701a      	strb	r2, [r3, #0]
	switch(controller) {
2000027a:	1dfb      	adds	r3, r7, #7
2000027c:	781b      	ldrb	r3, [r3, #0]
2000027e:	2b08      	cmp	r3, #8
20000280:	d00c      	beq.n	2000029c <select_controller+0x2e>
20000282:	dc02      	bgt.n	2000028a <select_controller+0x1c>
20000284:	2b00      	cmp	r3, #0
20000286:	d005      	beq.n	20000294 <select_controller+0x26>
			break;
		case (B_CS1 | B_CS2):
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
			break;
	}
}
20000288:	e016      	b.n	200002b8 <select_controller+0x4a>
	switch(controller) {
2000028a:	2b10      	cmp	r3, #16
2000028c:	d00b      	beq.n	200002a6 <select_controller+0x38>
2000028e:	2b18      	cmp	r3, #24
20000290:	d00e      	beq.n	200002b0 <select_controller+0x42>
}
20000292:	e011      	b.n	200002b8 <select_controller+0x4a>
			graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000294:	2018      	movs	r0, #24
20000296:	f7ff ffb1 	bl	200001fc <graphic_ctrl_bit_clear>
			break;
2000029a:	e00d      	b.n	200002b8 <select_controller+0x4a>
			graphic_ctrl_bit_set_clear(B_CS1, B_CS2);
2000029c:	2110      	movs	r1, #16
2000029e:	2008      	movs	r0, #8
200002a0:	f7ff ffce 	bl	20000240 <graphic_ctrl_bit_set_clear>
			break;
200002a4:	e008      	b.n	200002b8 <select_controller+0x4a>
			graphic_ctrl_bit_set_clear(B_CS2, B_CS1);
200002a6:	2108      	movs	r1, #8
200002a8:	2010      	movs	r0, #16
200002aa:	f7ff ffc9 	bl	20000240 <graphic_ctrl_bit_set_clear>
			break;
200002ae:	e003      	b.n	200002b8 <select_controller+0x4a>
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
200002b0:	2018      	movs	r0, #24
200002b2:	f7ff ff85 	bl	200001c0 <graphic_ctrl_bit_set>
			break;
200002b6:	46c0      	nop			; (mov r8, r8)
}
200002b8:	46c0      	nop			; (mov r8, r8)
200002ba:	46bd      	mov	sp, r7
200002bc:	b002      	add	sp, #8
200002be:	bd80      	pop	{r7, pc}

200002c0 <graphic_wait_ready>:

// Undersöker BUSY-flaggan (B7) och returnerar först då denna blivit 0
void graphic_wait_ready(void) {
200002c0:	b580      	push	{r7, lr}
200002c2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
200002c4:	2040      	movs	r0, #64	; 0x40
200002c6:	f7ff ff99 	bl	200001fc <graphic_ctrl_bit_clear>
	PORT_MODER = 0x00005555;
200002ca:	4b12      	ldr	r3, [pc, #72]	; (20000314 <graphic_wait_ready+0x54>)
200002cc:	4a12      	ldr	r2, [pc, #72]	; (20000318 <graphic_wait_ready+0x58>)
200002ce:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set_clear(B_RW, B_RS);
200002d0:	2101      	movs	r1, #1
200002d2:	2002      	movs	r0, #2
200002d4:	f7ff ffb4 	bl	20000240 <graphic_ctrl_bit_set_clear>
	delay_500ns();
200002d8:	f7ff ff24 	bl	20000124 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200002dc:	2040      	movs	r0, #64	; 0x40
200002de:	f7ff ff6f 	bl	200001c0 <graphic_ctrl_bit_set>
		delay_500ns();
200002e2:	f7ff ff1f 	bl	20000124 <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
200002e6:	2040      	movs	r0, #64	; 0x40
200002e8:	f7ff ff88 	bl	200001fc <graphic_ctrl_bit_clear>
		delay_500ns();
200002ec:	f7ff ff1a 	bl	20000124 <delay_500ns>
		if ((PORT_IDR_HIGH & LCD_BUSY) == 0) 
200002f0:	4b0a      	ldr	r3, [pc, #40]	; (2000031c <graphic_wait_ready+0x5c>)
200002f2:	781b      	ldrb	r3, [r3, #0]
200002f4:	b2db      	uxtb	r3, r3
200002f6:	b25b      	sxtb	r3, r3
200002f8:	2b00      	cmp	r3, #0
200002fa:	da00      	bge.n	200002fe <graphic_wait_ready+0x3e>
		graphic_ctrl_bit_set(B_E);
200002fc:	e7ee      	b.n	200002dc <graphic_wait_ready+0x1c>
			break;	
200002fe:	46c0      	nop			; (mov r8, r8)
	}
	graphic_ctrl_bit_set(B_E);
20000300:	2040      	movs	r0, #64	; 0x40
20000302:	f7ff ff5d 	bl	200001c0 <graphic_ctrl_bit_set>
	PORT_MODER = 0x55555555;
20000306:	4b03      	ldr	r3, [pc, #12]	; (20000314 <graphic_wait_ready+0x54>)
20000308:	4a05      	ldr	r2, [pc, #20]	; (20000320 <graphic_wait_ready+0x60>)
2000030a:	601a      	str	r2, [r3, #0]
}
2000030c:	46c0      	nop			; (mov r8, r8)
2000030e:	46bd      	mov	sp, r7
20000310:	bd80      	pop	{r7, pc}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	40021000 	andmi	r1, r2, r0
20000318:	00005555 	andeq	r5, r0, r5, asr r5
2000031c:	40021011 	andmi	r1, r2, r1, lsl r0
20000320:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000324 <graphic_read>:

// reads from the graphic display
// waits for screens in  @controller
unsigned char graphic_read(unsigned char controller) {
20000324:	b580      	push	{r7, lr}
20000326:	b084      	sub	sp, #16
20000328:	af00      	add	r7, sp, #0
2000032a:	0002      	movs	r2, r0
2000032c:	1dfb      	adds	r3, r7, #7
2000032e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);		// (stop workcycle)
20000330:	2040      	movs	r0, #64	; 0x40
20000332:	f7ff ff63 	bl	200001fc <graphic_ctrl_bit_clear>
	PORT_MODER = 0x00005555;			// set ctrl 15-8 to inports, 7-0 to outports
20000336:	4b1b      	ldr	r3, [pc, #108]	; (200003a4 <graphic_read+0x80>)
20000338:	4a1b      	ldr	r2, [pc, #108]	; (200003a8 <graphic_read+0x84>)
2000033a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS | B_RW);	// set reset and read/write bits
2000033c:	2003      	movs	r0, #3
2000033e:	f7ff ff3f 	bl	200001c0 <graphic_ctrl_bit_set>
	select_controller(controller);		
20000342:	1dfb      	adds	r3, r7, #7
20000344:	781b      	ldrb	r3, [r3, #0]
20000346:	0018      	movs	r0, r3
20000348:	f7ff ff91 	bl	2000026e <select_controller>
	delay_500ns();
2000034c:	f7ff feea 	bl	20000124 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
20000350:	2040      	movs	r0, #64	; 0x40
20000352:	f7ff ff35 	bl	200001c0 <graphic_ctrl_bit_set>
	unsigned char rv = PORT_IDR_HIGH;	// read data register
20000356:	4a15      	ldr	r2, [pc, #84]	; (200003ac <graphic_read+0x88>)
20000358:	230f      	movs	r3, #15
2000035a:	18fb      	adds	r3, r7, r3
2000035c:	7812      	ldrb	r2, [r2, #0]
2000035e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);		// (stop workycle)
20000360:	2040      	movs	r0, #64	; 0x40
20000362:	f7ff ff4b 	bl	200001fc <graphic_ctrl_bit_clear>
	PORT_MODER = 0x55555555;			// set ctrl to outports
20000366:	4b0f      	ldr	r3, [pc, #60]	; (200003a4 <graphic_read+0x80>)
20000368:	4a11      	ldr	r2, [pc, #68]	; (200003b0 <graphic_read+0x8c>)
2000036a:	601a      	str	r2, [r3, #0]
	
	// wait for screen 1 if reading from screen 1
	if(controller & B_CS1) {	
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	781b      	ldrb	r3, [r3, #0]
20000370:	2208      	movs	r2, #8
20000372:	4013      	ands	r3, r2
20000374:	d004      	beq.n	20000380 <graphic_read+0x5c>
		select_controller(B_CS1);
20000376:	2008      	movs	r0, #8
20000378:	f7ff ff79 	bl	2000026e <select_controller>
		graphic_wait_ready();
2000037c:	f7ff ffa0 	bl	200002c0 <graphic_wait_ready>
	}
	
	// !! 
	if(controller & B_CS2) {
20000380:	1dfb      	adds	r3, r7, #7
20000382:	781b      	ldrb	r3, [r3, #0]
20000384:	2210      	movs	r2, #16
20000386:	4013      	ands	r3, r2
20000388:	d004      	beq.n	20000394 <graphic_read+0x70>
		select_controller(B_CS2);
2000038a:	2010      	movs	r0, #16
2000038c:	f7ff ff6f 	bl	2000026e <select_controller>
		graphic_wait_ready();
20000390:	f7ff ff96 	bl	200002c0 <graphic_wait_ready>
	}
	
	return rv;
20000394:	230f      	movs	r3, #15
20000396:	18fb      	adds	r3, r7, r3
20000398:	781b      	ldrb	r3, [r3, #0]
}
2000039a:	0018      	movs	r0, r3
2000039c:	46bd      	mov	sp, r7
2000039e:	b004      	add	sp, #16
200003a0:	bd80      	pop	{r7, pc}
200003a2:	46c0      	nop			; (mov r8, r8)
200003a4:	40021000 	andmi	r1, r2, r0
200003a8:	00005555 	andeq	r5, r0, r5, asr r5
200003ac:	40021011 	andmi	r1, r2, r1, lsl r0
200003b0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003b4 <graphic_write>:

// writes @value to specified @controller(s)
void graphic_write(uint8_t value, uint8_t controller) {
200003b4:	b580      	push	{r7, lr}
200003b6:	b082      	sub	sp, #8
200003b8:	af00      	add	r7, sp, #0
200003ba:	0002      	movs	r2, r0
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	701a      	strb	r2, [r3, #0]
200003c0:	1dbb      	adds	r3, r7, #6
200003c2:	1c0a      	adds	r2, r1, #0
200003c4:	701a      	strb	r2, [r3, #0]
	PORT_ODR_HIGH = value;				// set outpins
200003c6:	4a1a      	ldr	r2, [pc, #104]	; (20000430 <graphic_write+0x7c>)
200003c8:	1dfb      	adds	r3, r7, #7
200003ca:	781b      	ldrb	r3, [r3, #0]
200003cc:	7013      	strb	r3, [r2, #0]
	select_controller(controller);		
200003ce:	1dbb      	adds	r3, r7, #6
200003d0:	781b      	ldrb	r3, [r3, #0]
200003d2:	0018      	movs	r0, r3
200003d4:	f7ff ff4b 	bl	2000026e <select_controller>
	delay_500ns();
200003d8:	f7ff fea4 	bl	20000124 <delay_500ns>
	
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
200003dc:	2040      	movs	r0, #64	; 0x40
200003de:	f7ff feef 	bl	200001c0 <graphic_ctrl_bit_set>
	delay_500ns();						// wait for display to handle outpins' data
200003e2:	f7ff fe9f 	bl	20000124 <delay_500ns>
	
	graphic_ctrl_bit_clear(B_E);		// (stop workcycle)
200003e6:	2040      	movs	r0, #64	; 0x40
200003e8:	f7ff ff08 	bl	200001fc <graphic_ctrl_bit_clear>
	
	// wait for screen 1
	if(controller & B_CS1) {
200003ec:	1dbb      	adds	r3, r7, #6
200003ee:	781b      	ldrb	r3, [r3, #0]
200003f0:	2208      	movs	r2, #8
200003f2:	4013      	ands	r3, r2
200003f4:	d004      	beq.n	20000400 <graphic_write+0x4c>
		select_controller(B_CS1);
200003f6:	2008      	movs	r0, #8
200003f8:	f7ff ff39 	bl	2000026e <select_controller>
		graphic_wait_ready();
200003fc:	f7ff ff60 	bl	200002c0 <graphic_wait_ready>
	}
	// !
	if(controller & B_CS2) {
20000400:	1dbb      	adds	r3, r7, #6
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	2210      	movs	r2, #16
20000406:	4013      	ands	r3, r2
20000408:	d004      	beq.n	20000414 <graphic_write+0x60>
		select_controller(B_CS2);
2000040a:	2010      	movs	r0, #16
2000040c:	f7ff ff2f 	bl	2000026e <select_controller>
		graphic_wait_ready();
20000410:	f7ff ff56 	bl	200002c0 <graphic_wait_ready>
	}
	
	PORT_ODR_HIGH = 0;					// clear outpins' data
20000414:	4b06      	ldr	r3, [pc, #24]	; (20000430 <graphic_write+0x7c>)
20000416:	2200      	movs	r2, #0
20000418:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);			// (start workcycle)
2000041a:	2040      	movs	r0, #64	; 0x40
2000041c:	f7ff fed0 	bl	200001c0 <graphic_ctrl_bit_set>
	select_controller(0);				// clear selected controller to preserve the data we've written
20000420:	2000      	movs	r0, #0
20000422:	f7ff ff24 	bl	2000026e <select_controller>
}
20000426:	46c0      	nop			; (mov r8, r8)
20000428:	46bd      	mov	sp, r7
2000042a:	b002      	add	sp, #8
2000042c:	bd80      	pop	{r7, pc}
2000042e:	46c0      	nop			; (mov r8, r8)
20000430:	40021015 	andmi	r1, r2, r5, lsl r0

20000434 <graphic_write_command>:

// writes a @command to the screen(s) specified in @controller
void graphic_write_command(uint8_t command, uint8_t controller) {
20000434:	b580      	push	{r7, lr}
20000436:	b082      	sub	sp, #8
20000438:	af00      	add	r7, sp, #0
2000043a:	0002      	movs	r2, r0
2000043c:	1dfb      	adds	r3, r7, #7
2000043e:	701a      	strb	r2, [r3, #0]
20000440:	1dbb      	adds	r3, r7, #6
20000442:	1c0a      	adds	r2, r1, #0
20000444:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);			// (stop workcycle)
20000446:	2040      	movs	r0, #64	; 0x40
20000448:	f7ff fed8 	bl	200001fc <graphic_ctrl_bit_clear>
	select_controller(controller);			// choose screen
2000044c:	1dbb      	adds	r3, r7, #6
2000044e:	781b      	ldrb	r3, [r3, #0]
20000450:	0018      	movs	r0, r3
20000452:	f7ff ff0c 	bl	2000026e <select_controller>
	graphic_ctrl_bit_clear(B_RS | B_RW);	// RS = 0 to write command, RW = 0 to write at all
20000456:	2003      	movs	r0, #3
20000458:	f7ff fed0 	bl	200001fc <graphic_ctrl_bit_clear>
	graphic_write(command, controller);		// actually write the command
2000045c:	1dbb      	adds	r3, r7, #6
2000045e:	781a      	ldrb	r2, [r3, #0]
20000460:	1dfb      	adds	r3, r7, #7
20000462:	781b      	ldrb	r3, [r3, #0]
20000464:	0011      	movs	r1, r2
20000466:	0018      	movs	r0, r3
20000468:	f7ff ffa4 	bl	200003b4 <graphic_write>
}
2000046c:	46c0      	nop			; (mov r8, r8)
2000046e:	46bd      	mov	sp, r7
20000470:	b002      	add	sp, #8
20000472:	bd80      	pop	{r7, pc}

20000474 <graphic_write_data>:

// paints @data to the screen(s) specified in @controller
void graphic_write_data(uint8_t data, uint8_t controller) {
20000474:	b580      	push	{r7, lr}
20000476:	b082      	sub	sp, #8
20000478:	af00      	add	r7, sp, #0
2000047a:	0002      	movs	r2, r0
2000047c:	1dfb      	adds	r3, r7, #7
2000047e:	701a      	strb	r2, [r3, #0]
20000480:	1dbb      	adds	r3, r7, #6
20000482:	1c0a      	adds	r2, r1, #0
20000484:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);			// (stop workcycle)
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff feb8 	bl	200001fc <graphic_ctrl_bit_clear>
	select_controller(controller);			// choose screen
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	0018      	movs	r0, r3
20000492:	f7ff feec 	bl	2000026e <select_controller>
	graphic_ctrl_bit_set_clear(B_RS, B_RW);	// RS = 1 to not write command, RW = 0 to write at all
20000496:	2102      	movs	r1, #2
20000498:	2001      	movs	r0, #1
2000049a:	f7ff fed1 	bl	20000240 <graphic_ctrl_bit_set_clear>
	graphic_write(data, controller);		// actually
2000049e:	1dbb      	adds	r3, r7, #6
200004a0:	781a      	ldrb	r2, [r3, #0]
200004a2:	1dfb      	adds	r3, r7, #7
200004a4:	781b      	ldrb	r3, [r3, #0]
200004a6:	0011      	movs	r1, r2
200004a8:	0018      	movs	r0, r3
200004aa:	f7ff ff83 	bl	200003b4 <graphic_write>
}
200004ae:	46c0      	nop			; (mov r8, r8)
200004b0:	46bd      	mov	sp, r7
200004b2:	b002      	add	sp, #8
200004b4:	bd80      	pop	{r7, pc}

200004b6 <graphic_read_data>:


uint8_t graphic_read_data(uint8_t controller) {
200004b6:	b580      	push	{r7, lr}
200004b8:	b082      	sub	sp, #8
200004ba:	af00      	add	r7, sp, #0
200004bc:	0002      	movs	r2, r0
200004be:	1dfb      	adds	r3, r7, #7
200004c0:	701a      	strb	r2, [r3, #0]
	(void) graphic_read(controller);			// called to clear junk
200004c2:	1dfb      	adds	r3, r7, #7
200004c4:	781b      	ldrb	r3, [r3, #0]
200004c6:	0018      	movs	r0, r3
200004c8:	f7ff ff2c 	bl	20000324 <graphic_read>
	return graphic_read(controller);
200004cc:	1dfb      	adds	r3, r7, #7
200004ce:	781b      	ldrb	r3, [r3, #0]
200004d0:	0018      	movs	r0, r3
200004d2:	f7ff ff27 	bl	20000324 <graphic_read>
200004d6:	0003      	movs	r3, r0
}
200004d8:	0018      	movs	r0, r3
200004da:	46bd      	mov	sp, r7
200004dc:	b002      	add	sp, #8
200004de:	bd80      	pop	{r7, pc}

200004e0 <graphic_initialize>:

// initierar och förbereder grafikdisplayen
void graphic_initialize(void) {
200004e0:	b580      	push	{r7, lr}
200004e2:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200004e4:	2040      	movs	r0, #64	; 0x40
200004e6:	f7ff fe6b 	bl	200001c0 <graphic_ctrl_bit_set>
	delay_mikro(10);
200004ea:	200a      	movs	r0, #10
200004ec:	f7ff fe3c 	bl	20000168 <delay_mikro>
	
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200004f0:	2078      	movs	r0, #120	; 0x78
200004f2:	f7ff fe83 	bl	200001fc <graphic_ctrl_bit_clear>
	delay_milli(30);
200004f6:	201e      	movs	r0, #30
200004f8:	f7ff fe4b 	bl	20000192 <delay_milli>
	
	graphic_ctrl_bit_set(B_RST);
200004fc:	2020      	movs	r0, #32
200004fe:	f7ff fe5f 	bl	200001c0 <graphic_ctrl_bit_set>
	
	graphic_write_command(LCD_OFF, B_CS1 | B_CS2);
20000502:	2118      	movs	r1, #24
20000504:	203e      	movs	r0, #62	; 0x3e
20000506:	f7ff ff95 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1 | B_CS2);			// toggle display
2000050a:	2118      	movs	r1, #24
2000050c:	203f      	movs	r0, #63	; 0x3f
2000050e:	f7ff ff91 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1 | B_CS2);	// start = 0
20000512:	2118      	movs	r1, #24
20000514:	20c0      	movs	r0, #192	; 0xc0
20000516:	f7ff ff8d 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1 | B_CS2);		// add = 0
2000051a:	2118      	movs	r1, #24
2000051c:	2040      	movs	r0, #64	; 0x40
2000051e:	f7ff ff89 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1 | B_CS2);		// page = 0
20000522:	2118      	movs	r1, #24
20000524:	20b8      	movs	r0, #184	; 0xb8
20000526:	f7ff ff85 	bl	20000434 <graphic_write_command>
	
	select_controller(0);									// deaktivera båda CS-signalerna
2000052a:	2000      	movs	r0, #0
2000052c:	f7ff fe9f 	bl	2000026e <select_controller>
}
20000530:	46c0      	nop			; (mov r8, r8)
20000532:	46bd      	mov	sp, r7
20000534:	bd80      	pop	{r7, pc}

20000536 <graphic_clear_screen>:

// Nollställer alla pixlar i grafikminnet
void graphic_clear_screen(void) {
20000536:	b580      	push	{r7, lr}
20000538:	b082      	sub	sp, #8
2000053a:	af00      	add	r7, sp, #0
	for(int page = 0; page < 8; page++) {
2000053c:	2300      	movs	r3, #0
2000053e:	607b      	str	r3, [r7, #4]
20000540:	e01e      	b.n	20000580 <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | page, B_CS1 | B_CS2);
20000542:	687b      	ldr	r3, [r7, #4]
20000544:	b25b      	sxtb	r3, r3
20000546:	2248      	movs	r2, #72	; 0x48
20000548:	4252      	negs	r2, r2
2000054a:	4313      	orrs	r3, r2
2000054c:	b25b      	sxtb	r3, r3
2000054e:	b2db      	uxtb	r3, r3
20000550:	2118      	movs	r1, #24
20000552:	0018      	movs	r0, r3
20000554:	f7ff ff6e 	bl	20000434 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1 | B_CS2);
20000558:	2118      	movs	r1, #24
2000055a:	2040      	movs	r0, #64	; 0x40
2000055c:	f7ff ff6a 	bl	20000434 <graphic_write_command>
		for(int add = 0; add < 64; add++) {
20000560:	2300      	movs	r3, #0
20000562:	603b      	str	r3, [r7, #0]
20000564:	e006      	b.n	20000574 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1 | B_CS2);
20000566:	2118      	movs	r1, #24
20000568:	2000      	movs	r0, #0
2000056a:	f7ff ff83 	bl	20000474 <graphic_write_data>
		for(int add = 0; add < 64; add++) {
2000056e:	683b      	ldr	r3, [r7, #0]
20000570:	3301      	adds	r3, #1
20000572:	603b      	str	r3, [r7, #0]
20000574:	683b      	ldr	r3, [r7, #0]
20000576:	2b3f      	cmp	r3, #63	; 0x3f
20000578:	ddf5      	ble.n	20000566 <graphic_clear_screen+0x30>
	for(int page = 0; page < 8; page++) {
2000057a:	687b      	ldr	r3, [r7, #4]
2000057c:	3301      	adds	r3, #1
2000057e:	607b      	str	r3, [r7, #4]
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	2b07      	cmp	r3, #7
20000584:	dddd      	ble.n	20000542 <graphic_clear_screen+0xc>
		}
	}
}
20000586:	46c0      	nop			; (mov r8, r8)
20000588:	46bd      	mov	sp, r7
2000058a:	b002      	add	sp, #8
2000058c:	bd80      	pop	{r7, pc}

2000058e <pixel>:

// funktion för att tända eller släcka en enskild pixel
void pixel(unsigned x, unsigned y, unsigned set) {
2000058e:	b590      	push	{r4, r7, lr}
20000590:	b089      	sub	sp, #36	; 0x24
20000592:	af00      	add	r7, sp, #0
20000594:	60f8      	str	r0, [r7, #12]
20000596:	60b9      	str	r1, [r7, #8]
20000598:	607a      	str	r2, [r7, #4]
	// kolla om x och y är tillåtna värden
	if(x < 1 | y < 1 | x > 128 | y > 64)
2000059a:	68fb      	ldr	r3, [r7, #12]
2000059c:	425a      	negs	r2, r3
2000059e:	4153      	adcs	r3, r2
200005a0:	b2da      	uxtb	r2, r3
200005a2:	68bb      	ldr	r3, [r7, #8]
200005a4:	4259      	negs	r1, r3
200005a6:	414b      	adcs	r3, r1
200005a8:	b2db      	uxtb	r3, r3
200005aa:	4313      	orrs	r3, r2
200005ac:	b2db      	uxtb	r3, r3
200005ae:	0019      	movs	r1, r3
200005b0:	68fb      	ldr	r3, [r7, #12]
200005b2:	2280      	movs	r2, #128	; 0x80
200005b4:	429a      	cmp	r2, r3
200005b6:	419b      	sbcs	r3, r3
200005b8:	425b      	negs	r3, r3
200005ba:	b2db      	uxtb	r3, r3
200005bc:	430b      	orrs	r3, r1
200005be:	68ba      	ldr	r2, [r7, #8]
200005c0:	2140      	movs	r1, #64	; 0x40
200005c2:	4291      	cmp	r1, r2
200005c4:	4192      	sbcs	r2, r2
200005c6:	4252      	negs	r2, r2
200005c8:	b2d2      	uxtb	r2, r2
200005ca:	4313      	orrs	r3, r2
200005cc:	d000      	beq.n	200005d0 <pixel+0x42>
200005ce:	e0ae      	b.n	2000072e <pixel+0x1a0>
		return;
	
	// skapa en bitmask för pixeln
	char mask;
	int index = (y-1)/8;
200005d0:	68bb      	ldr	r3, [r7, #8]
200005d2:	3b01      	subs	r3, #1
200005d4:	08db      	lsrs	r3, r3, #3
200005d6:	61bb      	str	r3, [r7, #24]
	switch((y-1) % 8) {
200005d8:	68bb      	ldr	r3, [r7, #8]
200005da:	3b01      	subs	r3, #1
200005dc:	2207      	movs	r2, #7
200005de:	4013      	ands	r3, r2
200005e0:	2b07      	cmp	r3, #7
200005e2:	d82c      	bhi.n	2000063e <pixel+0xb0>
200005e4:	009a      	lsls	r2, r3, #2
200005e6:	4b54      	ldr	r3, [pc, #336]	; (20000738 <pixel+0x1aa>)
200005e8:	18d3      	adds	r3, r2, r3
200005ea:	681b      	ldr	r3, [r3, #0]
200005ec:	469f      	mov	pc, r3
		case 0:
			mask = 1; break;
200005ee:	231f      	movs	r3, #31
200005f0:	18fb      	adds	r3, r7, r3
200005f2:	2201      	movs	r2, #1
200005f4:	701a      	strb	r2, [r3, #0]
200005f6:	e023      	b.n	20000640 <pixel+0xb2>
		case 1:
			mask = 2; break;
200005f8:	231f      	movs	r3, #31
200005fa:	18fb      	adds	r3, r7, r3
200005fc:	2202      	movs	r2, #2
200005fe:	701a      	strb	r2, [r3, #0]
20000600:	e01e      	b.n	20000640 <pixel+0xb2>
		case 2:
			mask = 4; break;
20000602:	231f      	movs	r3, #31
20000604:	18fb      	adds	r3, r7, r3
20000606:	2204      	movs	r2, #4
20000608:	701a      	strb	r2, [r3, #0]
2000060a:	e019      	b.n	20000640 <pixel+0xb2>
		case 3:
			mask = 8; break;
2000060c:	231f      	movs	r3, #31
2000060e:	18fb      	adds	r3, r7, r3
20000610:	2208      	movs	r2, #8
20000612:	701a      	strb	r2, [r3, #0]
20000614:	e014      	b.n	20000640 <pixel+0xb2>
		case 4:
			mask = 16; break;
20000616:	231f      	movs	r3, #31
20000618:	18fb      	adds	r3, r7, r3
2000061a:	2210      	movs	r2, #16
2000061c:	701a      	strb	r2, [r3, #0]
2000061e:	e00f      	b.n	20000640 <pixel+0xb2>
		case 5:
			mask = 32; break;
20000620:	231f      	movs	r3, #31
20000622:	18fb      	adds	r3, r7, r3
20000624:	2220      	movs	r2, #32
20000626:	701a      	strb	r2, [r3, #0]
20000628:	e00a      	b.n	20000640 <pixel+0xb2>
		case 6:
			mask = 64; break;
2000062a:	231f      	movs	r3, #31
2000062c:	18fb      	adds	r3, r7, r3
2000062e:	2240      	movs	r2, #64	; 0x40
20000630:	701a      	strb	r2, [r3, #0]
20000632:	e005      	b.n	20000640 <pixel+0xb2>
		case 7:
			mask = 128; break;
20000634:	231f      	movs	r3, #31
20000636:	18fb      	adds	r3, r7, r3
20000638:	2280      	movs	r2, #128	; 0x80
2000063a:	701a      	strb	r2, [r3, #0]
2000063c:	e000      	b.n	20000640 <pixel+0xb2>
		default:
			break;
2000063e:	46c0      	nop			; (mov r8, r8)
	}
	
	if(!set)
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	2b00      	cmp	r3, #0
20000644:	d106      	bne.n	20000654 <pixel+0xc6>
		mask = ~mask;
20000646:	231f      	movs	r3, #31
20000648:	18fb      	adds	r3, r7, r3
2000064a:	221f      	movs	r2, #31
2000064c:	18ba      	adds	r2, r7, r2
2000064e:	7812      	ldrb	r2, [r2, #0]
20000650:	43d2      	mvns	r2, r2
20000652:	701a      	strb	r2, [r3, #0]
	
	// bestäm fysiska koordinater och välj styrkrets
	uint8_t controller, temp;
	char x_fysisk;
	
	if(x > 64) {
20000654:	68fb      	ldr	r3, [r7, #12]
20000656:	2b40      	cmp	r3, #64	; 0x40
20000658:	d90a      	bls.n	20000670 <pixel+0xe2>
		controller = B_CS2; 
2000065a:	231e      	movs	r3, #30
2000065c:	18fb      	adds	r3, r7, r3
2000065e:	2210      	movs	r2, #16
20000660:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 65;
20000662:	68fb      	ldr	r3, [r7, #12]
20000664:	b2da      	uxtb	r2, r3
20000666:	231d      	movs	r3, #29
20000668:	18fb      	adds	r3, r7, r3
2000066a:	3a41      	subs	r2, #65	; 0x41
2000066c:	701a      	strb	r2, [r3, #0]
2000066e:	e009      	b.n	20000684 <pixel+0xf6>
	} else {
		controller = B_CS1;
20000670:	231e      	movs	r3, #30
20000672:	18fb      	adds	r3, r7, r3
20000674:	2208      	movs	r2, #8
20000676:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 1;
20000678:	68fb      	ldr	r3, [r7, #12]
2000067a:	b2da      	uxtb	r2, r3
2000067c:	231d      	movs	r3, #29
2000067e:	18fb      	adds	r3, r7, r3
20000680:	3a01      	subs	r2, #1
20000682:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
20000684:	231d      	movs	r3, #29
20000686:	18fb      	adds	r3, r7, r3
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	2240      	movs	r2, #64	; 0x40
2000068c:	4313      	orrs	r3, r2
2000068e:	b2da      	uxtb	r2, r3
20000690:	231e      	movs	r3, #30
20000692:	18fb      	adds	r3, r7, r3
20000694:	781b      	ldrb	r3, [r3, #0]
20000696:	0019      	movs	r1, r3
20000698:	0010      	movs	r0, r2
2000069a:	f7ff fecb 	bl	20000434 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
2000069e:	69bb      	ldr	r3, [r7, #24]
200006a0:	b25b      	sxtb	r3, r3
200006a2:	2248      	movs	r2, #72	; 0x48
200006a4:	4252      	negs	r2, r2
200006a6:	4313      	orrs	r3, r2
200006a8:	b25b      	sxtb	r3, r3
200006aa:	b2da      	uxtb	r2, r3
200006ac:	231e      	movs	r3, #30
200006ae:	18fb      	adds	r3, r7, r3
200006b0:	781b      	ldrb	r3, [r3, #0]
200006b2:	0019      	movs	r1, r3
200006b4:	0010      	movs	r0, r2
200006b6:	f7ff febd 	bl	20000434 <graphic_write_command>
	temp = graphic_read_data(controller);
200006ba:	2317      	movs	r3, #23
200006bc:	18fc      	adds	r4, r7, r3
200006be:	231e      	movs	r3, #30
200006c0:	18fb      	adds	r3, r7, r3
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	0018      	movs	r0, r3
200006c6:	f7ff fef6 	bl	200004b6 <graphic_read_data>
200006ca:	0003      	movs	r3, r0
200006cc:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200006ce:	231d      	movs	r3, #29
200006d0:	18fb      	adds	r3, r7, r3
200006d2:	781b      	ldrb	r3, [r3, #0]
200006d4:	2240      	movs	r2, #64	; 0x40
200006d6:	4313      	orrs	r3, r2
200006d8:	b2da      	uxtb	r2, r3
200006da:	231e      	movs	r3, #30
200006dc:	18fb      	adds	r3, r7, r3
200006de:	781b      	ldrb	r3, [r3, #0]
200006e0:	0019      	movs	r1, r3
200006e2:	0010      	movs	r0, r2
200006e4:	f7ff fea6 	bl	20000434 <graphic_write_command>
	if(set)
200006e8:	687b      	ldr	r3, [r7, #4]
200006ea:	2b00      	cmp	r3, #0
200006ec:	d00a      	beq.n	20000704 <pixel+0x176>
		mask = mask | temp;
200006ee:	231f      	movs	r3, #31
200006f0:	18fb      	adds	r3, r7, r3
200006f2:	221f      	movs	r2, #31
200006f4:	18b9      	adds	r1, r7, r2
200006f6:	2217      	movs	r2, #23
200006f8:	18ba      	adds	r2, r7, r2
200006fa:	7809      	ldrb	r1, [r1, #0]
200006fc:	7812      	ldrb	r2, [r2, #0]
200006fe:	430a      	orrs	r2, r1
20000700:	701a      	strb	r2, [r3, #0]
20000702:	e009      	b.n	20000718 <pixel+0x18a>
	else
		mask = mask & temp;
20000704:	231f      	movs	r3, #31
20000706:	18fb      	adds	r3, r7, r3
20000708:	221f      	movs	r2, #31
2000070a:	18ba      	adds	r2, r7, r2
2000070c:	2117      	movs	r1, #23
2000070e:	1879      	adds	r1, r7, r1
20000710:	7812      	ldrb	r2, [r2, #0]
20000712:	7809      	ldrb	r1, [r1, #0]
20000714:	400a      	ands	r2, r1
20000716:	701a      	strb	r2, [r3, #0]
	graphic_write_data(mask, controller);
20000718:	231e      	movs	r3, #30
2000071a:	18fb      	adds	r3, r7, r3
2000071c:	781a      	ldrb	r2, [r3, #0]
2000071e:	231f      	movs	r3, #31
20000720:	18fb      	adds	r3, r7, r3
20000722:	781b      	ldrb	r3, [r3, #0]
20000724:	0011      	movs	r1, r2
20000726:	0018      	movs	r0, r3
20000728:	f7ff fea4 	bl	20000474 <graphic_write_data>
2000072c:	e000      	b.n	20000730 <pixel+0x1a2>
		return;
2000072e:	46c0      	nop			; (mov r8, r8)
20000730:	46bd      	mov	sp, r7
20000732:	b009      	add	sp, #36	; 0x24
20000734:	bd90      	pop	{r4, r7, pc}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	20000c28 	andcs	r0, r0, r8, lsr #24

2000073c <keyboardActivate>:
#define GPIO_ODR_LOW *((volatile unsigned char*) (GPIO_D+0x14))
#define GPIO_ODR_HIGH *((volatile unsigned char*) (GPIO_D+0x15))

unsigned const char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};

void keyboardActivate(unsigned int row){
2000073c:	b580      	push	{r7, lr}
2000073e:	b082      	sub	sp, #8
20000740:	af00      	add	r7, sp, #0
20000742:	6078      	str	r0, [r7, #4]
	//Aktivera angiven rad hos tangentbordet eller deaktivera samtliga
	
	switch(row){
20000744:	687b      	ldr	r3, [r7, #4]
20000746:	2b01      	cmp	r3, #1
20000748:	d009      	beq.n	2000075e <keyboardActivate+0x22>
2000074a:	d304      	bcc.n	20000756 <keyboardActivate+0x1a>
2000074c:	2b02      	cmp	r3, #2
2000074e:	d00a      	beq.n	20000766 <keyboardActivate+0x2a>
20000750:	2b03      	cmp	r3, #3
20000752:	d00c      	beq.n	2000076e <keyboardActivate+0x32>
20000754:	e00f      	b.n	20000776 <keyboardActivate+0x3a>
		case 0: GPIO_ODR_HIGH = 0x10; break;
20000756:	4b0c      	ldr	r3, [pc, #48]	; (20000788 <keyboardActivate+0x4c>)
20000758:	2210      	movs	r2, #16
2000075a:	701a      	strb	r2, [r3, #0]
2000075c:	e00f      	b.n	2000077e <keyboardActivate+0x42>
		case 1: GPIO_ODR_HIGH = 0x20; break;
2000075e:	4b0a      	ldr	r3, [pc, #40]	; (20000788 <keyboardActivate+0x4c>)
20000760:	2220      	movs	r2, #32
20000762:	701a      	strb	r2, [r3, #0]
20000764:	e00b      	b.n	2000077e <keyboardActivate+0x42>
		case 2: GPIO_ODR_HIGH = 0x40; break;
20000766:	4b08      	ldr	r3, [pc, #32]	; (20000788 <keyboardActivate+0x4c>)
20000768:	2240      	movs	r2, #64	; 0x40
2000076a:	701a      	strb	r2, [r3, #0]
2000076c:	e007      	b.n	2000077e <keyboardActivate+0x42>
		case 3: GPIO_ODR_HIGH = 0x80; break;
2000076e:	4b06      	ldr	r3, [pc, #24]	; (20000788 <keyboardActivate+0x4c>)
20000770:	2280      	movs	r2, #128	; 0x80
20000772:	701a      	strb	r2, [r3, #0]
20000774:	e003      	b.n	2000077e <keyboardActivate+0x42>
		default: GPIO_ODR_HIGH = 0x00; break;
20000776:	4b04      	ldr	r3, [pc, #16]	; (20000788 <keyboardActivate+0x4c>)
20000778:	2200      	movs	r2, #0
2000077a:	701a      	strb	r2, [r3, #0]
2000077c:	46c0      	nop			; (mov r8, r8)
	}
}
2000077e:	46c0      	nop			; (mov r8, r8)
20000780:	46bd      	mov	sp, r7
20000782:	b002      	add	sp, #8
20000784:	bd80      	pop	{r7, pc}
20000786:	46c0      	nop			; (mov r8, r8)
20000788:	40020c15 	andmi	r0, r2, r5, lsl ip

2000078c <keyboardGetColumn>:

int keyboardGetColumn(void){
2000078c:	b580      	push	{r7, lr}
2000078e:	b082      	sub	sp, #8
20000790:	af00      	add	r7, sp, #0
	//Om någon tangent i den aktiverade raden är nedtryckt
	// returneras dess kolumnnummer. Annars 0.
	
	unsigned char c;
	c = GPIO_IDR_HIGH;
20000792:	4a13      	ldr	r2, [pc, #76]	; (200007e0 <keyboardGetColumn+0x54>)
20000794:	1dfb      	adds	r3, r7, #7
20000796:	7812      	ldrb	r2, [r2, #0]
20000798:	701a      	strb	r2, [r3, #0]
	if(c & 0x8){return 3;}
2000079a:	1dfb      	adds	r3, r7, #7
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	2208      	movs	r2, #8
200007a0:	4013      	ands	r3, r2
200007a2:	d001      	beq.n	200007a8 <keyboardGetColumn+0x1c>
200007a4:	2303      	movs	r3, #3
200007a6:	e016      	b.n	200007d6 <keyboardGetColumn+0x4a>
	if(c & 0x4){return 2;}
200007a8:	1dfb      	adds	r3, r7, #7
200007aa:	781b      	ldrb	r3, [r3, #0]
200007ac:	2204      	movs	r2, #4
200007ae:	4013      	ands	r3, r2
200007b0:	d001      	beq.n	200007b6 <keyboardGetColumn+0x2a>
200007b2:	2302      	movs	r3, #2
200007b4:	e00f      	b.n	200007d6 <keyboardGetColumn+0x4a>
	if(c & 0x2){return 1;}
200007b6:	1dfb      	adds	r3, r7, #7
200007b8:	781b      	ldrb	r3, [r3, #0]
200007ba:	2202      	movs	r2, #2
200007bc:	4013      	ands	r3, r2
200007be:	d001      	beq.n	200007c4 <keyboardGetColumn+0x38>
200007c0:	2301      	movs	r3, #1
200007c2:	e008      	b.n	200007d6 <keyboardGetColumn+0x4a>
	if(c & 0x1){return 0;}
200007c4:	1dfb      	adds	r3, r7, #7
200007c6:	781b      	ldrb	r3, [r3, #0]
200007c8:	2201      	movs	r2, #1
200007ca:	4013      	ands	r3, r2
200007cc:	d001      	beq.n	200007d2 <keyboardGetColumn+0x46>
200007ce:	2300      	movs	r3, #0
200007d0:	e001      	b.n	200007d6 <keyboardGetColumn+0x4a>
	return -1;
200007d2:	2301      	movs	r3, #1
200007d4:	425b      	negs	r3, r3
	}
200007d6:	0018      	movs	r0, r3
200007d8:	46bd      	mov	sp, r7
200007da:	b002      	add	sp, #8
200007dc:	bd80      	pop	{r7, pc}
200007de:	46c0      	nop			; (mov r8, r8)
200007e0:	40020c11 	andmi	r0, r2, r1, lsl ip

200007e4 <keyboard>:

unsigned char keyboard(void){
200007e4:	b580      	push	{r7, lr}
200007e6:	b082      	sub	sp, #8
200007e8:	af00      	add	r7, sp, #0
	int row, col;
	for(row = 0; row < 4; row++){
200007ea:	2300      	movs	r3, #0
200007ec:	607b      	str	r3, [r7, #4]
200007ee:	e019      	b.n	20000824 <keyboard+0x40>
		keyboardActivate(row);
200007f0:	687b      	ldr	r3, [r7, #4]
200007f2:	0018      	movs	r0, r3
200007f4:	f7ff ffa2 	bl	2000073c <keyboardActivate>
		col = keyboardGetColumn();
200007f8:	f7ff ffc8 	bl	2000078c <keyboardGetColumn>
200007fc:	0003      	movs	r3, r0
200007fe:	603b      	str	r3, [r7, #0]
		if (col != -1){
20000800:	683b      	ldr	r3, [r7, #0]
20000802:	3301      	adds	r3, #1
20000804:	d00b      	beq.n	2000081e <keyboard+0x3a>
			keyboardActivate(-1);
20000806:	2301      	movs	r3, #1
20000808:	425b      	negs	r3, r3
2000080a:	0018      	movs	r0, r3
2000080c:	f7ff ff96 	bl	2000073c <keyboardActivate>
			return key[4*row + col];
20000810:	687b      	ldr	r3, [r7, #4]
20000812:	009a      	lsls	r2, r3, #2
20000814:	683b      	ldr	r3, [r7, #0]
20000816:	18d3      	adds	r3, r2, r3
20000818:	4a08      	ldr	r2, [pc, #32]	; (2000083c <keyboard+0x58>)
2000081a:	5cd3      	ldrb	r3, [r2, r3]
2000081c:	e009      	b.n	20000832 <keyboard+0x4e>
	for(row = 0; row < 4; row++){
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	3301      	adds	r3, #1
20000822:	607b      	str	r3, [r7, #4]
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	2b03      	cmp	r3, #3
20000828:	dde2      	ble.n	200007f0 <keyboard+0xc>
		}
	}
	keyboardActivate(0);
2000082a:	2000      	movs	r0, #0
2000082c:	f7ff ff86 	bl	2000073c <keyboardActivate>
	return 0xFF;
20000830:	23ff      	movs	r3, #255	; 0xff
20000832:	0018      	movs	r0, r3
20000834:	46bd      	mov	sp, r7
20000836:	b002      	add	sp, #8
20000838:	bd80      	pop	{r7, pc}
2000083a:	46c0      	nop			; (mov r8, r8)
2000083c:	20000c48 	andcs	r0, r0, r8, asr #24

20000840 <set_object_speed>:
	void(*move)(struct tObj *);
	void(*set_speed)(struct tObj *, int, int);
} OBJECT, *POBJECT;

// changes the objects speed
void set_object_speed(POBJECT o, int speedx, int speedy) {
20000840:	b580      	push	{r7, lr}
20000842:	b084      	sub	sp, #16
20000844:	af00      	add	r7, sp, #0
20000846:	60f8      	str	r0, [r7, #12]
20000848:	60b9      	str	r1, [r7, #8]
2000084a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000084c:	68fb      	ldr	r3, [r7, #12]
2000084e:	68ba      	ldr	r2, [r7, #8]
20000850:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000852:	68fb      	ldr	r3, [r7, #12]
20000854:	687a      	ldr	r2, [r7, #4]
20000856:	609a      	str	r2, [r3, #8]
}
20000858:	46c0      	nop			; (mov r8, r8)
2000085a:	46bd      	mov	sp, r7
2000085c:	b004      	add	sp, #16
2000085e:	bd80      	pop	{r7, pc}

20000860 <draw_object>:

// draws the object to the screen through the pixel() function
void draw_object(POBJECT o) {
20000860:	b580      	push	{r7, lr}
20000862:	b086      	sub	sp, #24
20000864:	af00      	add	r7, sp, #0
20000866:	6078      	str	r0, [r7, #4]
	int xx,yy;
	char offsx, offsy;
	xx = o->posx;
20000868:	687b      	ldr	r3, [r7, #4]
2000086a:	68db      	ldr	r3, [r3, #12]
2000086c:	613b      	str	r3, [r7, #16]
	yy = o->posy;
2000086e:	687b      	ldr	r3, [r7, #4]
20000870:	691b      	ldr	r3, [r3, #16]
20000872:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < o->geo->numpoints; i++) {
20000874:	2300      	movs	r3, #0
20000876:	617b      	str	r3, [r7, #20]
20000878:	e026      	b.n	200008c8 <draw_object+0x68>
		offsx = o->geo->px[i].x;
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	6819      	ldr	r1, [r3, #0]
2000087e:	230b      	movs	r3, #11
20000880:	18fb      	adds	r3, r7, r3
20000882:	697a      	ldr	r2, [r7, #20]
20000884:	3204      	adds	r2, #4
20000886:	0052      	lsls	r2, r2, #1
20000888:	188a      	adds	r2, r1, r2
2000088a:	3204      	adds	r2, #4
2000088c:	7812      	ldrb	r2, [r2, #0]
2000088e:	701a      	strb	r2, [r3, #0]
		offsy = o->geo->px[i].y;
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	6819      	ldr	r1, [r3, #0]
20000894:	230a      	movs	r3, #10
20000896:	18fb      	adds	r3, r7, r3
20000898:	697a      	ldr	r2, [r7, #20]
2000089a:	3204      	adds	r2, #4
2000089c:	0052      	lsls	r2, r2, #1
2000089e:	188a      	adds	r2, r1, r2
200008a0:	3205      	adds	r2, #5
200008a2:	7812      	ldrb	r2, [r2, #0]
200008a4:	701a      	strb	r2, [r3, #0]
		
		pixel(xx+offsx,yy+offsy, 1);
200008a6:	230b      	movs	r3, #11
200008a8:	18fb      	adds	r3, r7, r3
200008aa:	781a      	ldrb	r2, [r3, #0]
200008ac:	693b      	ldr	r3, [r7, #16]
200008ae:	18d0      	adds	r0, r2, r3
200008b0:	230a      	movs	r3, #10
200008b2:	18fb      	adds	r3, r7, r3
200008b4:	781a      	ldrb	r2, [r3, #0]
200008b6:	68fb      	ldr	r3, [r7, #12]
200008b8:	18d3      	adds	r3, r2, r3
200008ba:	2201      	movs	r2, #1
200008bc:	0019      	movs	r1, r3
200008be:	f7ff fe66 	bl	2000058e <pixel>
	for (int i = 0; i < o->geo->numpoints; i++) {
200008c2:	697b      	ldr	r3, [r7, #20]
200008c4:	3301      	adds	r3, #1
200008c6:	617b      	str	r3, [r7, #20]
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	681b      	ldr	r3, [r3, #0]
200008cc:	681a      	ldr	r2, [r3, #0]
200008ce:	697b      	ldr	r3, [r7, #20]
200008d0:	429a      	cmp	r2, r3
200008d2:	dcd2      	bgt.n	2000087a <draw_object+0x1a>
	}
}
200008d4:	46c0      	nop			; (mov r8, r8)
200008d6:	46bd      	mov	sp, r7
200008d8:	b006      	add	sp, #24
200008da:	bd80      	pop	{r7, pc}

200008dc <clear_object>:

// clears the object from the screen through the pixel() function
void clear_object(POBJECT o) {
200008dc:	b580      	push	{r7, lr}
200008de:	b088      	sub	sp, #32
200008e0:	af00      	add	r7, sp, #0
200008e2:	6078      	str	r0, [r7, #4]
	int xx,yy,offsx,offsy;
	xx = o->posx;
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	68db      	ldr	r3, [r3, #12]
200008e8:	61bb      	str	r3, [r7, #24]
	yy = o->posy;
200008ea:	687b      	ldr	r3, [r7, #4]
200008ec:	691b      	ldr	r3, [r3, #16]
200008ee:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < o->geo->numpoints; i++) {
200008f0:	2300      	movs	r3, #0
200008f2:	61fb      	str	r3, [r7, #28]
200008f4:	e01e      	b.n	20000934 <clear_object+0x58>
		offsx = o->geo->px[i].x;
200008f6:	687b      	ldr	r3, [r7, #4]
200008f8:	681a      	ldr	r2, [r3, #0]
200008fa:	69fb      	ldr	r3, [r7, #28]
200008fc:	3304      	adds	r3, #4
200008fe:	005b      	lsls	r3, r3, #1
20000900:	18d3      	adds	r3, r2, r3
20000902:	3304      	adds	r3, #4
20000904:	781b      	ldrb	r3, [r3, #0]
20000906:	613b      	str	r3, [r7, #16]
		offsy = o->geo->px[i].y;
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	681a      	ldr	r2, [r3, #0]
2000090c:	69fb      	ldr	r3, [r7, #28]
2000090e:	3304      	adds	r3, #4
20000910:	005b      	lsls	r3, r3, #1
20000912:	18d3      	adds	r3, r2, r3
20000914:	3305      	adds	r3, #5
20000916:	781b      	ldrb	r3, [r3, #0]
20000918:	60fb      	str	r3, [r7, #12]
		
		pixel(xx+offsx,yy+offsy, 0);
2000091a:	69ba      	ldr	r2, [r7, #24]
2000091c:	693b      	ldr	r3, [r7, #16]
2000091e:	18d0      	adds	r0, r2, r3
20000920:	697a      	ldr	r2, [r7, #20]
20000922:	68fb      	ldr	r3, [r7, #12]
20000924:	18d3      	adds	r3, r2, r3
20000926:	2200      	movs	r2, #0
20000928:	0019      	movs	r1, r3
2000092a:	f7ff fe30 	bl	2000058e <pixel>
	for (int i = 0; i < o->geo->numpoints; i++) {
2000092e:	69fb      	ldr	r3, [r7, #28]
20000930:	3301      	adds	r3, #1
20000932:	61fb      	str	r3, [r7, #28]
20000934:	687b      	ldr	r3, [r7, #4]
20000936:	681b      	ldr	r3, [r3, #0]
20000938:	681a      	ldr	r2, [r3, #0]
2000093a:	69fb      	ldr	r3, [r7, #28]
2000093c:	429a      	cmp	r2, r3
2000093e:	dcda      	bgt.n	200008f6 <clear_object+0x1a>
	}
}
20000940:	46c0      	nop			; (mov r8, r8)
20000942:	46bd      	mov	sp, r7
20000944:	b008      	add	sp, #32
20000946:	bd80      	pop	{r7, pc}

20000948 <move_object>:

// clears from pos A and then moves to pos B, taking in consideration walls (or in this case the edge of the screen)
void move_object(POBJECT o) {
20000948:	b580      	push	{r7, lr}
2000094a:	b082      	sub	sp, #8
2000094c:	af00      	add	r7, sp, #0
2000094e:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	0018      	movs	r0, r3
20000954:	f7ff ffc2 	bl	200008dc <clear_object>
	
	if(o->posx < 1 || o->posx + o->geo->sizex > 128)
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	68db      	ldr	r3, [r3, #12]
2000095c:	2b00      	cmp	r3, #0
2000095e:	dd07      	ble.n	20000970 <move_object+0x28>
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	68da      	ldr	r2, [r3, #12]
20000964:	687b      	ldr	r3, [r7, #4]
20000966:	681b      	ldr	r3, [r3, #0]
20000968:	685b      	ldr	r3, [r3, #4]
2000096a:	18d3      	adds	r3, r2, r3
2000096c:	2b80      	cmp	r3, #128	; 0x80
2000096e:	dd02      	ble.n	20000976 <move_object+0x2e>
		o->dirx = 0;
20000970:	687b      	ldr	r3, [r7, #4]
20000972:	2200      	movs	r2, #0
20000974:	605a      	str	r2, [r3, #4]
	if(o->posy < 1 || o->posy + o->geo->sizey > 64)
20000976:	687b      	ldr	r3, [r7, #4]
20000978:	691b      	ldr	r3, [r3, #16]
2000097a:	2b00      	cmp	r3, #0
2000097c:	dd07      	ble.n	2000098e <move_object+0x46>
2000097e:	687b      	ldr	r3, [r7, #4]
20000980:	691a      	ldr	r2, [r3, #16]
20000982:	687b      	ldr	r3, [r7, #4]
20000984:	681b      	ldr	r3, [r3, #0]
20000986:	689b      	ldr	r3, [r3, #8]
20000988:	18d3      	adds	r3, r2, r3
2000098a:	2b40      	cmp	r3, #64	; 0x40
2000098c:	dd02      	ble.n	20000994 <move_object+0x4c>
		o->diry = 0;
2000098e:	687b      	ldr	r3, [r7, #4]
20000990:	2200      	movs	r2, #0
20000992:	609a      	str	r2, [r3, #8]
	
	o->posx += o->dirx;
20000994:	687b      	ldr	r3, [r7, #4]
20000996:	68da      	ldr	r2, [r3, #12]
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	685b      	ldr	r3, [r3, #4]
2000099c:	18d2      	adds	r2, r2, r3
2000099e:	687b      	ldr	r3, [r7, #4]
200009a0:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	691a      	ldr	r2, [r3, #16]
200009a6:	687b      	ldr	r3, [r7, #4]
200009a8:	689b      	ldr	r3, [r3, #8]
200009aa:	18d2      	adds	r2, r2, r3
200009ac:	687b      	ldr	r3, [r7, #4]
200009ae:	611a      	str	r2, [r3, #16]
	
	draw_object(o);
200009b0:	687b      	ldr	r3, [r7, #4]
200009b2:	0018      	movs	r0, r3
200009b4:	f7ff ff54 	bl	20000860 <draw_object>
}
200009b8:	46c0      	nop			; (mov r8, r8)
200009ba:	46bd      	mov	sp, r7
200009bc:	b002      	add	sp, #8
200009be:	bd80      	pop	{r7, pc}

200009c0 <move_proj_object>:

void move_proj_object(POBJECT o, POBJECT p) {
200009c0:	b580      	push	{r7, lr}
200009c2:	b082      	sub	sp, #8
200009c4:	af00      	add	r7, sp, #0
200009c6:	6078      	str	r0, [r7, #4]
200009c8:	6039      	str	r1, [r7, #0]
	clear_object(o);
200009ca:	687b      	ldr	r3, [r7, #4]
200009cc:	0018      	movs	r0, r3
200009ce:	f7ff ff85 	bl	200008dc <clear_object>
	
	if(o->posx < 1 || o->posx + o->geo->sizex > 128) {
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	68db      	ldr	r3, [r3, #12]
200009d6:	2b00      	cmp	r3, #0
200009d8:	dd07      	ble.n	200009ea <move_proj_object+0x2a>
200009da:	687b      	ldr	r3, [r7, #4]
200009dc:	68da      	ldr	r2, [r3, #12]
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	681b      	ldr	r3, [r3, #0]
200009e2:	685b      	ldr	r3, [r3, #4]
200009e4:	18d3      	adds	r3, r2, r3
200009e6:	2b80      	cmp	r3, #128	; 0x80
200009e8:	dd09      	ble.n	200009fe <move_proj_object+0x3e>
		o->posx = p->posx+4;
200009ea:	683b      	ldr	r3, [r7, #0]
200009ec:	68db      	ldr	r3, [r3, #12]
200009ee:	1d1a      	adds	r2, r3, #4
200009f0:	687b      	ldr	r3, [r7, #4]
200009f2:	60da      	str	r2, [r3, #12]
		o->posy = p->posy+2;
200009f4:	683b      	ldr	r3, [r7, #0]
200009f6:	691b      	ldr	r3, [r3, #16]
200009f8:	1c9a      	adds	r2, r3, #2
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	611a      	str	r2, [r3, #16]
	}
	/*if(o->posy < 1 || o->posy + o->geo->sizey > 64)
		o->diry = 0;*/
	
	o->posx += o->dirx;
200009fe:	687b      	ldr	r3, [r7, #4]
20000a00:	68da      	ldr	r2, [r3, #12]
20000a02:	687b      	ldr	r3, [r7, #4]
20000a04:	685b      	ldr	r3, [r3, #4]
20000a06:	18d2      	adds	r2, r2, r3
20000a08:	687b      	ldr	r3, [r7, #4]
20000a0a:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000a0c:	687b      	ldr	r3, [r7, #4]
20000a0e:	691a      	ldr	r2, [r3, #16]
20000a10:	687b      	ldr	r3, [r7, #4]
20000a12:	689b      	ldr	r3, [r3, #8]
20000a14:	18d2      	adds	r2, r2, r3
20000a16:	687b      	ldr	r3, [r7, #4]
20000a18:	611a      	str	r2, [r3, #16]
	
	draw_object(o);
20000a1a:	687b      	ldr	r3, [r7, #4]
20000a1c:	0018      	movs	r0, r3
20000a1e:	f7ff ff1f 	bl	20000860 <draw_object>
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	46bd      	mov	sp, r7
20000a26:	b002      	add	sp, #8
20000a28:	bd80      	pop	{r7, pc}
	...

20000a2c <__udivsi3>:
20000a2c:	2200      	movs	r2, #0
20000a2e:	0843      	lsrs	r3, r0, #1
20000a30:	428b      	cmp	r3, r1
20000a32:	d374      	bcc.n	20000b1e <__udivsi3+0xf2>
20000a34:	0903      	lsrs	r3, r0, #4
20000a36:	428b      	cmp	r3, r1
20000a38:	d35f      	bcc.n	20000afa <__udivsi3+0xce>
20000a3a:	0a03      	lsrs	r3, r0, #8
20000a3c:	428b      	cmp	r3, r1
20000a3e:	d344      	bcc.n	20000aca <__udivsi3+0x9e>
20000a40:	0b03      	lsrs	r3, r0, #12
20000a42:	428b      	cmp	r3, r1
20000a44:	d328      	bcc.n	20000a98 <__udivsi3+0x6c>
20000a46:	0c03      	lsrs	r3, r0, #16
20000a48:	428b      	cmp	r3, r1
20000a4a:	d30d      	bcc.n	20000a68 <__udivsi3+0x3c>
20000a4c:	22ff      	movs	r2, #255	; 0xff
20000a4e:	0209      	lsls	r1, r1, #8
20000a50:	ba12      	rev	r2, r2
20000a52:	0c03      	lsrs	r3, r0, #16
20000a54:	428b      	cmp	r3, r1
20000a56:	d302      	bcc.n	20000a5e <__udivsi3+0x32>
20000a58:	1212      	asrs	r2, r2, #8
20000a5a:	0209      	lsls	r1, r1, #8
20000a5c:	d065      	beq.n	20000b2a <__udivsi3+0xfe>
20000a5e:	0b03      	lsrs	r3, r0, #12
20000a60:	428b      	cmp	r3, r1
20000a62:	d319      	bcc.n	20000a98 <__udivsi3+0x6c>
20000a64:	e000      	b.n	20000a68 <__udivsi3+0x3c>
20000a66:	0a09      	lsrs	r1, r1, #8
20000a68:	0bc3      	lsrs	r3, r0, #15
20000a6a:	428b      	cmp	r3, r1
20000a6c:	d301      	bcc.n	20000a72 <__udivsi3+0x46>
20000a6e:	03cb      	lsls	r3, r1, #15
20000a70:	1ac0      	subs	r0, r0, r3
20000a72:	4152      	adcs	r2, r2
20000a74:	0b83      	lsrs	r3, r0, #14
20000a76:	428b      	cmp	r3, r1
20000a78:	d301      	bcc.n	20000a7e <__udivsi3+0x52>
20000a7a:	038b      	lsls	r3, r1, #14
20000a7c:	1ac0      	subs	r0, r0, r3
20000a7e:	4152      	adcs	r2, r2
20000a80:	0b43      	lsrs	r3, r0, #13
20000a82:	428b      	cmp	r3, r1
20000a84:	d301      	bcc.n	20000a8a <__udivsi3+0x5e>
20000a86:	034b      	lsls	r3, r1, #13
20000a88:	1ac0      	subs	r0, r0, r3
20000a8a:	4152      	adcs	r2, r2
20000a8c:	0b03      	lsrs	r3, r0, #12
20000a8e:	428b      	cmp	r3, r1
20000a90:	d301      	bcc.n	20000a96 <__udivsi3+0x6a>
20000a92:	030b      	lsls	r3, r1, #12
20000a94:	1ac0      	subs	r0, r0, r3
20000a96:	4152      	adcs	r2, r2
20000a98:	0ac3      	lsrs	r3, r0, #11
20000a9a:	428b      	cmp	r3, r1
20000a9c:	d301      	bcc.n	20000aa2 <__udivsi3+0x76>
20000a9e:	02cb      	lsls	r3, r1, #11
20000aa0:	1ac0      	subs	r0, r0, r3
20000aa2:	4152      	adcs	r2, r2
20000aa4:	0a83      	lsrs	r3, r0, #10
20000aa6:	428b      	cmp	r3, r1
20000aa8:	d301      	bcc.n	20000aae <__udivsi3+0x82>
20000aaa:	028b      	lsls	r3, r1, #10
20000aac:	1ac0      	subs	r0, r0, r3
20000aae:	4152      	adcs	r2, r2
20000ab0:	0a43      	lsrs	r3, r0, #9
20000ab2:	428b      	cmp	r3, r1
20000ab4:	d301      	bcc.n	20000aba <__udivsi3+0x8e>
20000ab6:	024b      	lsls	r3, r1, #9
20000ab8:	1ac0      	subs	r0, r0, r3
20000aba:	4152      	adcs	r2, r2
20000abc:	0a03      	lsrs	r3, r0, #8
20000abe:	428b      	cmp	r3, r1
20000ac0:	d301      	bcc.n	20000ac6 <__udivsi3+0x9a>
20000ac2:	020b      	lsls	r3, r1, #8
20000ac4:	1ac0      	subs	r0, r0, r3
20000ac6:	4152      	adcs	r2, r2
20000ac8:	d2cd      	bcs.n	20000a66 <__udivsi3+0x3a>
20000aca:	09c3      	lsrs	r3, r0, #7
20000acc:	428b      	cmp	r3, r1
20000ace:	d301      	bcc.n	20000ad4 <__udivsi3+0xa8>
20000ad0:	01cb      	lsls	r3, r1, #7
20000ad2:	1ac0      	subs	r0, r0, r3
20000ad4:	4152      	adcs	r2, r2
20000ad6:	0983      	lsrs	r3, r0, #6
20000ad8:	428b      	cmp	r3, r1
20000ada:	d301      	bcc.n	20000ae0 <__udivsi3+0xb4>
20000adc:	018b      	lsls	r3, r1, #6
20000ade:	1ac0      	subs	r0, r0, r3
20000ae0:	4152      	adcs	r2, r2
20000ae2:	0943      	lsrs	r3, r0, #5
20000ae4:	428b      	cmp	r3, r1
20000ae6:	d301      	bcc.n	20000aec <__udivsi3+0xc0>
20000ae8:	014b      	lsls	r3, r1, #5
20000aea:	1ac0      	subs	r0, r0, r3
20000aec:	4152      	adcs	r2, r2
20000aee:	0903      	lsrs	r3, r0, #4
20000af0:	428b      	cmp	r3, r1
20000af2:	d301      	bcc.n	20000af8 <__udivsi3+0xcc>
20000af4:	010b      	lsls	r3, r1, #4
20000af6:	1ac0      	subs	r0, r0, r3
20000af8:	4152      	adcs	r2, r2
20000afa:	08c3      	lsrs	r3, r0, #3
20000afc:	428b      	cmp	r3, r1
20000afe:	d301      	bcc.n	20000b04 <__udivsi3+0xd8>
20000b00:	00cb      	lsls	r3, r1, #3
20000b02:	1ac0      	subs	r0, r0, r3
20000b04:	4152      	adcs	r2, r2
20000b06:	0883      	lsrs	r3, r0, #2
20000b08:	428b      	cmp	r3, r1
20000b0a:	d301      	bcc.n	20000b10 <__udivsi3+0xe4>
20000b0c:	008b      	lsls	r3, r1, #2
20000b0e:	1ac0      	subs	r0, r0, r3
20000b10:	4152      	adcs	r2, r2
20000b12:	0843      	lsrs	r3, r0, #1
20000b14:	428b      	cmp	r3, r1
20000b16:	d301      	bcc.n	20000b1c <__udivsi3+0xf0>
20000b18:	004b      	lsls	r3, r1, #1
20000b1a:	1ac0      	subs	r0, r0, r3
20000b1c:	4152      	adcs	r2, r2
20000b1e:	1a41      	subs	r1, r0, r1
20000b20:	d200      	bcs.n	20000b24 <__udivsi3+0xf8>
20000b22:	4601      	mov	r1, r0
20000b24:	4152      	adcs	r2, r2
20000b26:	4610      	mov	r0, r2
20000b28:	4770      	bx	lr
20000b2a:	e7ff      	b.n	20000b2c <__udivsi3+0x100>
20000b2c:	b501      	push	{r0, lr}
20000b2e:	2000      	movs	r0, #0
20000b30:	f000 f806 	bl	20000b40 <__aeabi_idiv0>
20000b34:	bd02      	pop	{r1, pc}
20000b36:	46c0      	nop			; (mov r8, r8)

20000b38 <__aeabi_uidivmod>:
20000b38:	2900      	cmp	r1, #0
20000b3a:	d0f7      	beq.n	20000b2c <__udivsi3+0x100>
20000b3c:	e776      	b.n	20000a2c <__udivsi3>
20000b3e:	4770      	bx	lr

20000b40 <__aeabi_idiv0>:
20000b40:	4770      	bx	lr
20000b42:	46c0      	nop			; (mov r8, r8)

20000b44 <player_geometry>:
20000b44:	0000000d 	andeq	r0, r0, sp
20000b48:	00000005 	andeq	r0, r0, r5
20000b4c:	00000004 	andeq	r0, r0, r4
20000b50:	01000000 	mrseq	r0, (UNDEF: 0)
20000b54:	01020101 	tsteq	r2, r1, lsl #2
20000b58:	02010103 	andeq	r0, r1, #-1073741824	; 0xc0000000
20000b5c:	02040202 	andeq	r0, r4, #536870912	; 0x20000000
20000b60:	03010300 	movweq	r0, #4864	; 0x1300
20000b64:	03030302 	movweq	r0, #13058	; 0x3302
20000b68:	00000304 	andeq	r0, r0, r4, lsl #6
	...

20000b78 <proj_geometry>:
20000b78:	00000004 	andeq	r0, r0, r4
20000b7c:	00000002 	andeq	r0, r0, r2
20000b80:	00000002 	andeq	r0, r0, r2
20000b84:	01000000 	mrseq	r0, (UNDEF: 0)
20000b88:	01010001 	tsteq	r1, r1
	...

20000bac <enemy_geometry>:
20000bac:	00000008 	andeq	r0, r0, r8
20000bb0:	00000003 	andeq	r0, r0, r3
20000bb4:	00000007 	andeq	r0, r0, r7
20000bb8:	01010000 	mrseq	r0, (UNDEF: 1)
20000bbc:	03010202 	movweq	r0, #4610	; 0x1202
20000bc0:	04020302 	streq	r0, [r2], #-770	; 0xfffffcfe
20000bc4:	06000501 	streq	r0, [r0], -r1, lsl #10
	...

20000be0 <player>:
20000be0:	20000b44 	andcs	r0, r0, r4, asr #22
	...
20000bec:	00000001 	andeq	r0, r0, r1
20000bf0:	00000001 	andeq	r0, r0, r1
20000bf4:	20000861 	andcs	r0, r0, r1, ror #16
20000bf8:	200008dd 	ldrdcs	r0, [r0], -sp
20000bfc:	20000949 	andcs	r0, r0, r9, asr #18
20000c00:	20000841 	andcs	r0, r0, r1, asr #16

20000c04 <projectile>:
20000c04:	20000b78 	andcs	r0, r0, r8, ror fp
20000c08:	0000000a 	andeq	r0, r0, sl
	...
20000c14:	00000040 	andeq	r0, r0, r0, asr #32
20000c18:	20000861 	andcs	r0, r0, r1, ror #16
20000c1c:	200008dd 	ldrdcs	r0, [r0], -sp
20000c20:	20000949 	andcs	r0, r0, r9, asr #18
20000c24:	20000841 	andcs	r0, r0, r1, asr #16
20000c28:	200005ee 	andcs	r0, r0, lr, ror #11
20000c2c:	200005f8 	strdcs	r0, [r0], -r8
20000c30:	20000602 	andcs	r0, r0, r2, lsl #12
20000c34:	2000060c 	andcs	r0, r0, ip, lsl #12
20000c38:	20000616 	andcs	r0, r0, r6, lsl r6
20000c3c:	20000620 	andcs	r0, r0, r0, lsr #12
20000c40:	2000062a 	andcs	r0, r0, sl, lsr #12
20000c44:	20000634 	andcs	r0, r0, r4, lsr r6

20000c48 <key>:
20000c48:	0a030201 	beq	200c1454 <key+0xc080c>
20000c4c:	0b060504 	bleq	20182064 <key+0x18141c>
20000c50:	0c090807 	stceq	8, cr0, [r9], {7}
20000c54:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20000c24 <projectile+0x20>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000028e 	andeq	r0, r0, lr, lsl #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000005e 	andeq	r0, r0, lr, asr r0
  10:	00018e0c 	andeq	r8, r1, ip, lsl #28
	...
  20:	07040200 	streq	r0, [r4, -r0, lsl #4]
  24:	00000011 	andeq	r0, r0, r1, lsl r0
  28:	00004d03 	andeq	r4, r0, r3, lsl #26
  2c:	03020200 	movweq	r0, #8704	; 0x2200
  30:	00000049 	andeq	r0, r0, r9, asr #32
  34:	02007804 	andeq	r7, r0, #4, 16	; 0x40000
  38:	00004904 	andeq	r4, r0, r4, lsl #18
  3c:	79040000 	stmdbvc	r4, {}	; <UNPREDICTABLE>
  40:	49050200 	stmdbmi	r5, {r9}
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	08010200 	stmdaeq	r1, {r9}
  4c:	000000fc 	strdeq	r0, [r0], -ip
  50:	00018805 	andeq	r8, r1, r5, lsl #16
  54:	28060200 	stmdacs	r6, {r9}
  58:	03000000 	movweq	r0, #0
  5c:	00000122 	andeq	r0, r0, r2, lsr #2
  60:	97080234 	smladxls	r8, r4, r2, r0
  64:	06000000 	streq	r0, [r0], -r0
  68:	00000163 	andeq	r0, r0, r3, ror #2
  6c:	00970902 	addseq	r0, r7, r2, lsl #18
  70:	06000000 	streq	r0, [r0], -r0
  74:	0000002d 	andeq	r0, r0, sp, lsr #32
  78:	00970a02 	addseq	r0, r7, r2, lsl #20
  7c:	06040000 	streq	r0, [r4], -r0
  80:	000000f6 	strdeq	r0, [r0], -r6
  84:	00970b02 	addseq	r0, r7, r2, lsl #22
  88:	04080000 	streq	r0, [r8], #-0
  8c:	02007870 	andeq	r7, r0, #112, 16	; 0x700000
  90:	00009e0c 	andeq	r9, r0, ip, lsl #28
  94:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  98:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  9c:	50080074 	andpl	r0, r8, r4, ror r0
  a0:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
  a4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  a8:	000000ae 	andeq	r0, r0, lr, lsr #1
  ac:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
  b0:	00017a07 	andeq	r7, r1, r7, lsl #20
  b4:	010b0500 	tsteq	fp, r0, lsl #10
  b8:	0d020000 	stceq	0, cr0, [r2, #-0]
  bc:	0000005b 	andeq	r0, r0, fp, asr r0
  c0:	00010a05 	andeq	r0, r1, r5, lsl #20
  c4:	cb0d0200 	blgt	3408cc <startup-0x1fcbf734>
  c8:	0a000000 	beq	d0 <startup-0x1fffff30>
  cc:	00005b04 	andeq	r5, r0, r4, lsl #22
  d0:	020f0300 	andeq	r0, pc, #0, 6
  d4:	02240000 	eoreq	r0, r4, #0
  d8:	00014a0f 	andeq	r4, r1, pc, lsl #20
  dc:	65670400 	strbvs	r0, [r7, #-1024]!	; 0xfffffc00
  e0:	1002006f 	andne	r0, r2, pc, rrx
  e4:	000000c0 	andeq	r0, r0, r0, asr #1
  e8:	00590600 	subseq	r0, r9, r0, lsl #12
  ec:	11020000 	mrsne	r0, (UNDEF: 2)
  f0:	00000097 	muleq	r0, r7, r0
  f4:	01570604 	cmpeq	r7, r4, lsl #12
  f8:	11020000 	mrsne	r0, (UNDEF: 2)
  fc:	00000097 	muleq	r0, r7, r0
 100:	020a0608 	andeq	r0, sl, #8, 12	; 0x800000
 104:	12020000 	andne	r0, r2, #0
 108:	00000097 	muleq	r0, r7, r0
 10c:	0114060c 	tsteq	r4, ip, lsl #12
 110:	12020000 	andne	r0, r2, #0
 114:	00000097 	muleq	r0, r7, r0
 118:	000c0610 	andeq	r0, ip, r0, lsl r6
 11c:	13020000 	movwne	r0, #8192	; 0x2000
 120:	0000015b 	andeq	r0, r0, fp, asr r1
 124:	02c70614 	sbceq	r0, r7, #20, 12	; 0x1400000
 128:	14020000 	strne	r0, [r2], #-0
 12c:	0000015b 	andeq	r0, r0, fp, asr r1
 130:	01830618 	orreq	r0, r3, r8, lsl r6
 134:	15020000 	strne	r0, [r2, #-0]
 138:	0000015b 	andeq	r0, r0, fp, asr r1
 13c:	003e061c 	eorseq	r0, lr, ip, lsl r6
 140:	16020000 	strne	r0, [r2], -r0
 144:	00000176 	andeq	r0, r0, r6, ror r1
 148:	550b0020 	strpl	r0, [fp, #-32]	; 0xffffffe0
 14c:	0c000001 	stceq	0, cr0, [r0], {1}
 150:	00000155 	andeq	r0, r0, r5, asr r1
 154:	d1040a00 	tstle	r4, r0, lsl #20
 158:	0a000000 	beq	160 <startup-0x1ffffea0>
 15c:	00014a04 	andeq	r4, r1, r4, lsl #20
 160:	01760b00 	cmneq	r6, r0, lsl #22
 164:	550c0000 	strpl	r0, [ip, #-0]
 168:	0c000001 	stceq	0, cr0, [r0], {1}
 16c:	00000097 	muleq	r0, r7, r0
 170:	0000970c 	andeq	r9, r0, ip, lsl #14
 174:	040a0000 	streq	r0, [sl], #-0
 178:	00000161 	andeq	r0, r0, r1, ror #2
 17c:	00016e05 	andeq	r6, r1, r5, lsl #28
 180:	d1170200 	tstle	r7, r0, lsl #4
 184:	05000000 	streq	r0, [r0, #-0]
 188:	0000016d 	andeq	r0, r0, sp, ror #2
 18c:	01551702 	cmpeq	r5, r2, lsl #14
 190:	390d0000 	stmdbcc	sp, {}	; <UNPREDICTABLE>
 194:	01000001 	tsteq	r0, r1
 198:	0000b50a 	andeq	fp, r0, sl, lsl #10
 19c:	44030500 	strmi	r0, [r3], #-1280	; 0xfffffb00
 1a0:	0d20000b 	stceq	0, cr0, [r0, #-44]!	; 0xffffffd4
 1a4:	00000149 	andeq	r0, r0, r9, asr #2
 1a8:	00b51501 	adcseq	r1, r5, r1, lsl #10
 1ac:	03050000 	movweq	r0, #20480	; 0x5000
 1b0:	20000b78 	andcs	r0, r0, r8, ror fp
 1b4:	00001e0d 	andeq	r1, r0, sp, lsl #28
 1b8:	b51e0100 	ldrlt	r0, [lr, #-256]	; 0xffffff00
 1bc:	05000000 	streq	r0, [r0, #-0]
 1c0:	000bac03 	andeq	sl, fp, r3, lsl #24
 1c4:	015c0e20 	cmpeq	ip, r0, lsr #28
 1c8:	2c010000 	stccs	0, cr0, [r1], {-0}
 1cc:	0000017c 	andeq	r0, r0, ip, ror r1
 1d0:	0be00305 	bleq	ff800dec <key+0xdf8001a4>
 1d4:	330e2000 	movwcc	r2, #57344	; 0xe000
 1d8:	01000000 	mrseq	r0, (UNDEF: 0)
 1dc:	00017c36 	andeq	r7, r1, r6, lsr ip
 1e0:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
 1e4:	0f20000c 	svceq	0x0020000c
 1e8:	00000175 	andeq	r0, r0, r5, ror r1
 1ec:	00975301 	addseq	r5, r7, r1, lsl #6
 1f0:	00500000 	subseq	r0, r0, r0
 1f4:	00902000 	addseq	r2, r0, r0
 1f8:	9c010000 	stcls	0, cr0, [r1], {-0}
 1fc:	0000025c 	andeq	r0, r0, ip, asr r2
 200:	00004810 	andeq	r4, r0, r0, lsl r8
 204:	97530100 	ldrbls	r0, [r3, -r0, lsl #2]
 208:	02000000 	andeq	r0, r0, #0
 20c:	2c105c91 	ldccs	12, cr5, [r0], {145}	; 0x91
 210:	01000001 	tsteq	r0, r1
 214:	00025c53 	andeq	r5, r2, r3, asr ip
 218:	58910200 	ldmpl	r1, {r9}
 21c:	01006311 	tsteq	r0, r1, lsl r3
 220:	00026854 	andeq	r6, r2, r4, asr r8
 224:	6f910200 	svcvs	0x00910200
 228:	00015c0e 	andeq	r5, r1, lr, lsl #24
 22c:	87550100 	ldrbhi	r0, [r5, -r0, lsl #2]
 230:	02000001 	andeq	r0, r0, #1
 234:	540e6891 	strpl	r6, [lr], #-2193	; 0xfffff76f
 238:	01000000 	mrseq	r0, (UNDEF: 0)
 23c:	00018756 	andeq	r8, r1, r6, asr r7
 240:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 244:	00007e12 	andeq	r7, r0, r2, lsl lr
 248:	00006020 	andeq	r6, r0, r0, lsr #32
 24c:	00001300 	andeq	r1, r0, r0, lsl #6
 250:	63010000 	movwvs	r0, #4096	; 0x1000
 254:	00000097 	muleq	r0, r7, r0
 258:	00000014 	andeq	r0, r0, r4, lsl r0
 25c:	0262040a 	rsbeq	r0, r2, #167772160	; 0xa000000
 260:	040a0000 	streq	r0, [sl], #-0
 264:	00000268 	andeq	r0, r0, r8, ror #4
 268:	05080102 	streq	r0, [r8, #-258]	; 0xfffffefe
 26c:	15000001 	strne	r0, [r0, #-1]
 270:	00000119 	andeq	r0, r0, r9, lsl r1
 274:	00104b01 	andseq	r4, r0, r1, lsl #22
 278:	00402000 	subeq	r2, r0, r0
 27c:	9c010000 	stcls	0, cr0, [r1], {-0}
 280:	00013115 	andeq	r3, r1, r5, lsl r1
 284:	00420100 	subeq	r0, r2, r0, lsl #2
 288:	0c200000 	stceq	0, cr0, [r0], #-0
 28c:	01000000 	mrseq	r0, (UNDEF: 0)
 290:	00aa009c 	umlaleq	r0, sl, ip, r0
 294:	00040000 	andeq	r0, r4, r0
 298:	0000011e 	andeq	r0, r0, lr, lsl r1
 29c:	005e0104 	subseq	r0, lr, r4, lsl #2
 2a0:	2c0c0000 	stccs	0, cr0, [ip], {-0}
 2a4:	e0000002 	and	r0, r0, r2
 2a8:	e0200000 	eor	r0, r0, r0
 2ac:	e1000000 	mrs	r0, (UNDEF: 0)
 2b0:	02000000 	andeq	r0, r0, #0
 2b4:	00000000 	andeq	r0, r0, r0
 2b8:	01922501 	orrseq	r2, r2, r1, lsl #10
 2bc:	002e2000 	eoreq	r2, lr, r0
 2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2c4:	00000044 	andeq	r0, r0, r4, asr #32
 2c8:	00736d03 	rsbseq	r6, r3, r3, lsl #26
 2cc:	00442501 	subeq	r2, r4, r1, lsl #10
 2d0:	91020000 	mrsls	r0, (UNDEF: 2)
 2d4:	04040074 	streq	r0, [r4], #-116	; 0xffffff8c
 2d8:	00001107 	andeq	r1, r0, r7, lsl #2
 2dc:	02140200 	andseq	r0, r4, #0, 4
 2e0:	1d010000 	stcne	0, cr0, [r1, #-0]
 2e4:	20000168 	andcs	r0, r0, r8, ror #2
 2e8:	0000002a 	andeq	r0, r0, sl, lsr #32
 2ec:	00849c01 	addeq	r9, r4, r1, lsl #24
 2f0:	75030000 	strvc	r0, [r3, #-0]
 2f4:	1d010073 	stcne	0, cr0, [r1, #-460]	; 0xfffffe34
 2f8:	00000044 	andeq	r0, r0, r4, asr #32
 2fc:	056c9102 	strbeq	r9, [ip, #-258]!	; 0xfffffefe
 300:	20000170 	andcs	r0, r0, r0, ror r1
 304:	0000001a 	andeq	r0, r0, sl, lsl r0
 308:	01006906 	tsteq	r0, r6, lsl #18
 30c:	0000841e 	andeq	r8, r0, lr, lsl r4
 310:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 314:	04070000 	streq	r0, [r7], #-0
 318:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 31c:	02200800 	eoreq	r0, r0, #0, 16
 320:	13010000 	movwne	r0, #4096	; 0x1000
 324:	20000124 	andcs	r0, r0, r4, lsr #2
 328:	00000044 	andeq	r0, r0, r4, asr #32
 32c:	a6099c01 	strge	r9, [r9], -r1, lsl #24
 330:	01000002 	tsteq	r0, r2
 334:	0000e009 	andeq	lr, r0, r9
 338:	00004420 	andeq	r4, r0, r0, lsr #8
 33c:	009c0100 	addseq	r0, ip, r0, lsl #2
 340:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
 344:	01b50004 			; <UNDEFINED> instruction: 0x01b50004
 348:	01040000 	mrseq	r0, (UNDEF: 4)
 34c:	0000005e 	andeq	r0, r0, lr, asr r0
 350:	0003020c 	andeq	r0, r3, ip, lsl #4
 354:	0001c000 	andeq	ip, r1, r0
 358:	00057c20 	andeq	r7, r5, r0, lsr #24
 35c:	0001be00 	andeq	fp, r1, r0, lsl #28
 360:	03be0200 			; <UNDEFINED> instruction: 0x03be0200
 364:	20010000 	andcs	r0, r1, r0
 368:	0000002c 	andeq	r0, r0, ip, lsr #32
 36c:	fc080103 	stc2	1, cr0, [r8], {3}
 370:	04000000 	streq	r0, [r0], #-0
 374:	000002fc 	strdeq	r0, [r0], -ip
 378:	058ec401 	streq	ip, [lr, #1025]	; 0x401
 37c:	01ae2000 			; <UNDEFINED> instruction: 0x01ae2000
 380:	9c010000 	stcls	0, cr0, [r1], {-0}
 384:	000000b5 	strheq	r0, [r0], -r5
 388:	01007805 	tsteq	r0, r5, lsl #16
 38c:	0000b5c4 	andeq	fp, r0, r4, asr #11
 390:	5c910200 	lfmpl	f0, 4, [r1], {0}
 394:	01007905 	tsteq	r0, r5, lsl #18
 398:	0000b5c4 	andeq	fp, r0, r4, asr #11
 39c:	58910200 	ldmpl	r1, {r9}
 3a0:	74657305 	strbtvc	r7, [r5], #-773	; 0xfffffcfb
 3a4:	b5c40100 	strblt	r0, [r4, #256]	; 0x100
 3a8:	02000000 	andeq	r0, r0, #0
 3ac:	b9065491 	stmdblt	r6, {r0, r4, r7, sl, ip, lr}
 3b0:	01000003 	tsteq	r0, r3
 3b4:	0000bcca 	andeq	fp, r0, sl, asr #25
 3b8:	6f910200 	svcvs	0x00910200
 3bc:	00040006 	andeq	r0, r4, r6
 3c0:	c3cb0100 	bicgt	r0, fp, #0, 2
 3c4:	02000000 	andeq	r0, r0, #0
 3c8:	f0066891 			; <UNDEFINED> instruction: 0xf0066891
 3cc:	01000003 	tsteq	r0, r3
 3d0:	000021e5 	andeq	r2, r0, r5, ror #3
 3d4:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 3d8:	0003fb06 	andeq	pc, r3, r6, lsl #22
 3dc:	21e50100 	mvncs	r0, r0, lsl #2
 3e0:	02000000 	andeq	r0, r0, #0
 3e4:	8a066791 	bhi	19a230 <startup-0x1fe65dd0>
 3e8:	01000003 	tsteq	r0, r3
 3ec:	0000bce6 	andeq	fp, r0, r6, ror #25
 3f0:	6d910200 	lfmvs	f0, 4, [r1]
 3f4:	07040300 	streq	r0, [r4, -r0, lsl #6]
 3f8:	00000011 	andeq	r0, r0, r1, lsl r0
 3fc:	05080103 	streq	r0, [r8, #-259]	; 0xfffffefd
 400:	07000001 	streq	r0, [r0, -r1]
 404:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 408:	35040074 	strcc	r0, [r4, #-116]	; 0xffffff8c
 40c:	01000004 	tsteq	r0, r4
 410:	000536b9 			; <UNDEFINED> instruction: 0x000536b9
 414:	00005820 	andeq	r5, r0, r0, lsr #16
 418:	109c0100 	addsne	r0, ip, r0, lsl #2
 41c:	08000001 	stmdaeq	r0, {r0}
 420:	2000053c 	andcs	r0, r0, ip, lsr r5
 424:	0000004a 	andeq	r0, r0, sl, asr #32
 428:	00042a06 	andeq	r2, r4, r6, lsl #20
 42c:	c3ba0100 			; <UNDEFINED> instruction: 0xc3ba0100
 430:	02000000 	andeq	r0, r0, #0
 434:	60087491 	mulvs	r8, r1, r4
 438:	1a200005 	bne	800454 <startup-0x1f7ffbac>
 43c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
 440:	00646461 	rsbeq	r6, r4, r1, ror #8
 444:	00c3bd01 	sbceq	fp, r3, r1, lsl #26
 448:	91020000 	mrsls	r0, (UNDEF: 2)
 44c:	00000070 	andeq	r0, r0, r0, ror r0
 450:	00044a0a 	andeq	r4, r4, sl, lsl #20
 454:	e0a60100 	adc	r0, r6, r0, lsl #2
 458:	56200004 	strtpl	r0, [r0], -r4
 45c:	01000000 	mrseq	r0, (UNDEF: 0)
 460:	02ea0b9c 	rsceq	r0, sl, #156, 22	; 0x27000
 464:	a0010000 	andge	r0, r1, r0
 468:	00000021 	andeq	r0, r0, r1, lsr #32
 46c:	200004b6 			; <UNDEFINED> instruction: 0x200004b6
 470:	0000002a 	andeq	r0, r0, sl, lsr #32
 474:	01499c01 	cmpeq	r9, r1, lsl #24
 478:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
 47c:	01000003 	tsteq	r0, r3
 480:	000021a0 	andeq	r2, r0, r0, lsr #3
 484:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 488:	03a60400 			; <UNDEFINED> instruction: 0x03a60400
 48c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
 490:	20000474 	andcs	r0, r0, r4, ror r4
 494:	00000042 	andeq	r0, r0, r2, asr #32
 498:	017b9c01 	cmneq	fp, r1, lsl #24
 49c:	f70c0000 			; <UNDEFINED> instruction: 0xf70c0000
 4a0:	01000002 	tsteq	r0, r2
 4a4:	00002198 	muleq	r0, r8, r1
 4a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4ac:	0003f00c 	andeq	pc, r3, ip
 4b0:	21980100 	orrscs	r0, r8, r0, lsl #2
 4b4:	02000000 	andeq	r0, r0, #0
 4b8:	04007691 	streq	r7, [r0], #-1681	; 0xfffff96f
 4bc:	000002cd 	andeq	r0, r0, sp, asr #5
 4c0:	04349001 	ldrteq	r9, [r4], #-1
 4c4:	00402000 	subeq	r2, r0, r0
 4c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 4cc:	000001ad 	andeq	r0, r0, sp, lsr #3
 4d0:	0002db0c 	andeq	sp, r2, ip, lsl #22
 4d4:	21900100 	orrscs	r0, r0, r0, lsl #2
 4d8:	02000000 	andeq	r0, r0, #0
 4dc:	f00c7791 			; <UNDEFINED> instruction: 0xf00c7791
 4e0:	01000003 	tsteq	r0, r3
 4e4:	00002190 	muleq	r0, r0, r1
 4e8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 4ec:	03db0400 	bicseq	r0, fp, #0, 8
 4f0:	75010000 	strvc	r0, [r1, #-0]
 4f4:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 4f8:	00000080 	andeq	r0, r0, r0, lsl #1
 4fc:	01df9c01 	bicseq	r9, pc, r1, lsl #24
 500:	2f0c0000 	svccs	0x000c0000
 504:	01000004 	tsteq	r0, r4
 508:	00002175 	andeq	r2, r0, r5, ror r1
 50c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 510:	0003f00c 	andeq	pc, r3, ip
 514:	21750100 	cmncs	r5, r0, lsl #2
 518:	02000000 	andeq	r0, r0, #0
 51c:	0b007691 	bleq	1df68 <startup-0x1ffe2098>
 520:	00000406 	andeq	r0, r0, r6, lsl #8
 524:	002c5901 	eoreq	r5, ip, r1, lsl #18
 528:	03240000 			; <UNDEFINED> instruction: 0x03240000
 52c:	00902000 	addseq	r2, r0, r0
 530:	9c010000 	stcls	0, cr0, [r1], {-0}
 534:	00000214 	andeq	r0, r0, r4, lsl r2
 538:	0003f00c 	andeq	pc, r3, ip
 53c:	2c590100 	ldfcse	f0, [r9], {-0}
 540:	02000000 	andeq	r0, r0, #0
 544:	72096f91 	andvc	r6, r9, #580	; 0x244
 548:	61010076 	tstvs	r1, r6, ror r0
 54c:	0000002c 	andeq	r0, r0, ip, lsr #32
 550:	00779102 	rsbseq	r9, r7, r2, lsl #2
 554:	0003930a 	andeq	r9, r3, sl, lsl #6
 558:	c0460100 	subgt	r0, r6, r0, lsl #2
 55c:	64200002 	strtvs	r0, [r0], #-2
 560:	01000000 	mrseq	r0, (UNDEF: 0)
 564:	03e9049c 	mvneq	r0, #156, 8	; 0x9c000000
 568:	34010000 	strcc	r0, [r1], #-0
 56c:	2000026e 	andcs	r0, r0, lr, ror #4
 570:	00000052 	andeq	r0, r0, r2, asr r0
 574:	02499c01 	subeq	r9, r9, #256	; 0x100
 578:	f00c0000 			; <UNDEFINED> instruction: 0xf00c0000
 57c:	01000003 	tsteq	r0, r3
 580:	00002134 	andeq	r2, r0, r4, lsr r1
 584:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 588:	02b20400 	adcseq	r0, r2, #0, 8
 58c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 590:	20000240 	andcs	r0, r0, r0, asr #4
 594:	0000002e 	andeq	r0, r0, lr, lsr #32
 598:	027b9c01 	rsbseq	r9, fp, #256	; 0x100
 59c:	850c0000 	strhi	r0, [ip, #-0]
 5a0:	01000003 	tsteq	r0, r3
 5a4:	0000212e 	andeq	r2, r0, lr, lsr #2
 5a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5ac:	0002e30c 	andeq	lr, r2, ip, lsl #6
 5b0:	212e0100 			; <UNDEFINED> instruction: 0x212e0100
 5b4:	02000000 	andeq	r0, r0, #0
 5b8:	0d007691 	stceq	6, cr7, [r0, #-580]	; 0xfffffdbc
 5bc:	00000413 	andeq	r0, r0, r3, lsl r4
 5c0:	01fc2901 	mvnseq	r2, r1, lsl #18
 5c4:	00442000 	subeq	r2, r4, r0
 5c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 5cc:	0000029d 	muleq	r0, sp, r2
 5d0:	01007805 	tsteq	r0, r5, lsl #16
 5d4:	00002129 	andeq	r2, r0, r9, lsr #2
 5d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5dc:	03c60e00 	biceq	r0, r6, #0, 28
 5e0:	23010000 	movwcs	r0, #4096	; 0x1000
 5e4:	200001c0 	andcs	r0, r0, r0, asr #3
 5e8:	0000003c 	andeq	r0, r0, ip, lsr r0
 5ec:	78059c01 	stmdavc	r5, {r0, sl, fp, ip, pc}
 5f0:	21230100 			; <UNDEFINED> instruction: 0x21230100
 5f4:	02000000 	andeq	r0, r0, #0
 5f8:	00007791 	muleq	r0, r1, r7
 5fc:	000000e5 	andeq	r0, r0, r5, ror #1
 600:	02af0004 	adceq	r0, pc, #4
 604:	01040000 	mrseq	r0, (UNDEF: 4)
 608:	0000005e 	andeq	r0, r0, lr, asr r0
 60c:	0004780c 	andeq	r7, r4, ip, lsl #16
 610:	00073c00 	andeq	r3, r7, r0, lsl #24
 614:	00010420 	andeq	r0, r1, r0, lsr #8
 618:	00032600 	andeq	r2, r3, r0, lsl #12
 61c:	00440200 	subeq	r0, r4, r0, lsl #4
 620:	00310000 	eorseq	r0, r1, r0
 624:	36030000 	strcc	r0, [r3], -r0
 628:	0f000000 	svceq	0x00000000
 62c:	00210400 	eoreq	r0, r1, r0, lsl #8
 630:	04050000 	streq	r0, [r5], #-0
 634:	00017a07 	andeq	r7, r1, r7, lsl #20
 638:	08010500 	stmdaeq	r1, {r8, sl}
 63c:	000000fc 	strdeq	r0, [r0], -ip
 640:	00003d04 	andeq	r3, r0, r4, lsl #26
 644:	656b0600 	strbvs	r0, [fp, #-1536]!	; 0xfffffa00
 648:	09010079 	stmdbeq	r1, {r0, r3, r4, r5, r6}
 64c:	00000031 	andeq	r0, r0, r1, lsr r0
 650:	0c480305 	mcrreq	3, 0, r0, r8, cr5
 654:	6f072000 	svcvs	0x00072000
 658:	01000004 	tsteq	r0, r4
 65c:	00003d24 	andeq	r3, r0, r4, lsr #26
 660:	0007e400 	andeq	lr, r7, r0, lsl #8
 664:	00005c20 	andeq	r5, r0, r0, lsr #24
 668:	909c0100 	addsls	r0, ip, r0, lsl #2
 66c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 670:	00776f72 	rsbseq	r6, r7, r2, ror pc
 674:	00902501 	addseq	r2, r0, r1, lsl #10
 678:	91020000 	mrsls	r0, (UNDEF: 2)
 67c:	6f630874 	svcvs	0x00630874
 680:	2501006c 	strcs	r0, [r1, #-108]	; 0xffffff94
 684:	00000090 	muleq	r0, r0, r0
 688:	00709102 	rsbseq	r9, r0, r2, lsl #2
 68c:	69050409 	stmdbvs	r5, {r0, r3, sl}
 690:	0a00746e 	beq	1d850 <startup-0x1ffe27b0>
 694:	0000045d 	andeq	r0, r0, sp, asr r4
 698:	00901701 	addseq	r1, r0, r1, lsl #14
 69c:	078c0000 	streq	r0, [ip, r0]
 6a0:	00582000 	subseq	r2, r8, r0
 6a4:	9c010000 	stcls	0, cr0, [r1], {-0}
 6a8:	000000bd 	strheq	r0, [r0], -sp
 6ac:	01006308 	tsteq	r0, r8, lsl #6
 6b0:	00003d1b 	andeq	r3, r0, fp, lsl sp
 6b4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6b8:	04f50b00 	ldrbteq	r0, [r5], #2816	; 0xb00
 6bc:	0b010000 	bleq	406c4 <startup-0x1ffbf93c>
 6c0:	2000073c 	andcs	r0, r0, ip, lsr r7
 6c4:	00000050 	andeq	r0, r0, r0, asr r0
 6c8:	00e19c01 	rsceq	r9, r1, r1, lsl #24
 6cc:	720c0000 	andvc	r0, ip, #0
 6d0:	0100776f 	tsteq	r0, pc, ror #14
 6d4:	0000e10b 	andeq	lr, r0, fp, lsl #2
 6d8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6dc:	07040500 	streq	r0, [r4, -r0, lsl #10]
 6e0:	00000011 	andeq	r0, r0, r1, lsl r0
 6e4:	00030d00 	andeq	r0, r3, r0, lsl #26
 6e8:	71000400 	tstvc	r0, r0, lsl #8
 6ec:	04000003 	streq	r0, [r0], #-3
 6f0:	00005e01 	andeq	r5, r0, r1, lsl #28
 6f4:	05390c00 	ldreq	r0, [r9, #-3072]!	; 0xfffff400
 6f8:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
 6fc:	01ea2000 	mvneq	r2, r0
 700:	04130000 	ldreq	r0, [r3], #-0
 704:	4d020000 	stcmi	0, cr0, [r2, #-0]
 708:	02000000 	andeq	r0, r0, #0
 70c:	00420301 	subeq	r0, r2, r1, lsl #6
 710:	78030000 	stmdavc	r3, {}	; <UNPREDICTABLE>
 714:	42040100 	andmi	r0, r4, #0, 2
 718:	00000000 	andeq	r0, r0, r0
 71c:	01007903 	tsteq	r0, r3, lsl #18
 720:	00004205 	andeq	r4, r0, r5, lsl #4
 724:	04000100 	streq	r0, [r0], #-256	; 0xffffff00
 728:	00fc0801 	rscseq	r0, ip, r1, lsl #16
 72c:	88050000 	stmdahi	r5, {}	; <UNPREDICTABLE>
 730:	01000001 	tsteq	r0, r1
 734:	00002106 	andeq	r2, r0, r6, lsl #2
 738:	01220200 			; <UNDEFINED> instruction: 0x01220200
 73c:	01340000 	teqeq	r4, r0
 740:	00009008 	andeq	r9, r0, r8
 744:	01630600 	cmneq	r3, r0, lsl #12
 748:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 74c:	00000090 	muleq	r0, r0, r0
 750:	002d0600 	eoreq	r0, sp, r0, lsl #12
 754:	0a010000 	beq	4075c <startup-0x1ffbf8a4>
 758:	00000090 	muleq	r0, r0, r0
 75c:	00f60604 	rscseq	r0, r6, r4, lsl #12
 760:	0b010000 	bleq	40768 <startup-0x1ffbf898>
 764:	00000090 	muleq	r0, r0, r0
 768:	78700308 	ldmdavc	r0!, {r3, r8, r9}^
 76c:	970c0100 	strls	r0, [ip, -r0, lsl #2]
 770:	0c000000 	stceq	0, cr0, [r0], {-0}
 774:	05040700 	streq	r0, [r4, #-1792]	; 0xfffff900
 778:	00746e69 	rsbseq	r6, r4, r9, ror #28
 77c:	00004908 	andeq	r4, r0, r8, lsl #18
 780:	0000a700 	andeq	sl, r0, r0, lsl #14
 784:	00a70900 	adceq	r0, r7, r0, lsl #18
 788:	00130000 	andseq	r0, r3, r0
 78c:	7a070404 	bvc	1c17a4 <startup-0x1fe3e85c>
 790:	05000001 	streq	r0, [r0, #-1]
 794:	0000010a 	andeq	r0, r0, sl, lsl #2
 798:	00b90d01 	adcseq	r0, r9, r1, lsl #26
 79c:	040a0000 	streq	r0, [sl], #-0
 7a0:	00000054 	andeq	r0, r0, r4, asr r0
 7a4:	00020f02 	andeq	r0, r2, r2, lsl #30
 7a8:	0f012400 	svceq	0x00012400
 7ac:	00000138 	andeq	r0, r0, r8, lsr r1
 7b0:	6f656703 	svcvs	0x00656703
 7b4:	ae100100 	mufges	f0, f0, f0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00005906 	andeq	r5, r0, r6, lsl #18
 7c0:	90110100 	andsls	r0, r1, r0, lsl #2
 7c4:	04000000 	streq	r0, [r0], #-0
 7c8:	00015706 	andeq	r5, r1, r6, lsl #14
 7cc:	90110100 	andsls	r0, r1, r0, lsl #2
 7d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 7d4:	00020a06 	andeq	r0, r2, r6, lsl #20
 7d8:	90120100 	andsls	r0, r2, r0, lsl #2
 7dc:	0c000000 	stceq	0, cr0, [r0], {-0}
 7e0:	00011406 	andeq	r1, r1, r6, lsl #8
 7e4:	90120100 	andsls	r0, r2, r0, lsl #2
 7e8:	10000000 	andne	r0, r0, r0
 7ec:	00000c06 	andeq	r0, r0, r6, lsl #24
 7f0:	49130100 	ldmdbmi	r3, {r8}
 7f4:	14000001 	strne	r0, [r0], #-1
 7f8:	0002c706 	andeq	ip, r2, r6, lsl #14
 7fc:	49140100 	ldmdbmi	r4, {r8}
 800:	18000001 	stmdane	r0, {r0}
 804:	00018306 	andeq	r8, r1, r6, lsl #6
 808:	49150100 	ldmdbmi	r5, {r8}
 80c:	1c000001 	stcne	0, cr0, [r0], {1}
 810:	00003e06 	andeq	r3, r0, r6, lsl #28
 814:	64160100 	ldrvs	r0, [r6], #-256	; 0xffffff00
 818:	20000001 	andcs	r0, r0, r1
 81c:	01430b00 	cmpeq	r3, r0, lsl #22
 820:	430c0000 	movwmi	r0, #49152	; 0xc000
 824:	00000001 	andeq	r0, r0, r1
 828:	00bf040a 	adcseq	r0, pc, sl, lsl #8
 82c:	040a0000 	streq	r0, [sl], #-0
 830:	00000138 	andeq	r0, r0, r8, lsr r1
 834:	0001640b 	andeq	r6, r1, fp, lsl #8
 838:	01430c00 	cmpeq	r3, r0, lsl #24
 83c:	900c0000 	andls	r0, ip, r0
 840:	0c000000 	stceq	0, cr0, [r0], {-0}
 844:	00000090 	muleq	r0, r0, r0
 848:	4f040a00 	svcmi	0x00040a00
 84c:	05000001 	streq	r0, [r0, #-1]
 850:	0000016d 	andeq	r0, r0, sp, ror #2
 854:	01431701 	cmpeq	r3, r1, lsl #14
 858:	b40d0000 	strlt	r0, [sp], #-0
 85c:	01000005 	tsteq	r0, r5
 860:	0009c04b 	andeq	ip, r9, fp, asr #32
 864:	00006a20 	andeq	r6, r0, r0, lsr #20
 868:	a39c0100 	orrsge	r0, ip, #0, 2
 86c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
 870:	4b01006f 	blmi	40a34 <startup-0x1ffbf5cc>
 874:	0000016a 	andeq	r0, r0, sl, ror #2
 878:	0e749102 	expeqs	f1, f2
 87c:	4b010070 	blmi	40a44 <startup-0x1ffbf5bc>
 880:	0000016a 	andeq	r0, r0, sl, ror #2
 884:	00709102 	rsbseq	r9, r0, r2, lsl #2
 888:	0005c50d 	andeq	ip, r5, sp, lsl #10
 88c:	483d0100 	ldmdami	sp!, {r8}
 890:	78200009 	stmdavc	r0!, {r0, r3}
 894:	01000000 	mrseq	r0, (UNDEF: 0)
 898:	0001c59c 	muleq	r1, ip, r5
 89c:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 8a0:	016a3d01 	cmneq	sl, r1, lsl #26
 8a4:	91020000 	mrsls	r0, (UNDEF: 2)
 8a8:	2c0d0074 	stccs	0, cr0, [sp], {116}	; 0x74
 8ac:	01000005 	tsteq	r0, r5
 8b0:	0008dc2f 	andeq	sp, r8, pc, lsr #24
 8b4:	00006c20 	andeq	r6, r0, r0, lsr #24
 8b8:	4a9c0100 	bmi	fe700cc0 <key+0xde700078>
 8bc:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 8c0:	2f01006f 	svccs	0x0001006f
 8c4:	0000016a 	andeq	r0, r0, sl, ror #2
 8c8:	0f5c9102 	svceq	0x005c9102
 8cc:	01007878 	tsteq	r0, r8, ror r8
 8d0:	00009030 	andeq	r9, r0, r0, lsr r0
 8d4:	70910200 	addsvc	r0, r1, r0, lsl #4
 8d8:	0079790f 	rsbseq	r7, r9, pc, lsl #18
 8dc:	00903001 	addseq	r3, r0, r1
 8e0:	91020000 	mrsls	r0, (UNDEF: 2)
 8e4:	0506106c 	streq	r1, [r6, #-108]	; 0xffffff94
 8e8:	30010000 	andcc	r0, r1, r0
 8ec:	00000090 	muleq	r0, r0, r0
 8f0:	10689102 	rsbne	r9, r8, r2, lsl #2
 8f4:	0000050c 	andeq	r0, r0, ip, lsl #10
 8f8:	00903001 	addseq	r3, r0, r1
 8fc:	91020000 	mrsls	r0, (UNDEF: 2)
 900:	08f01164 	ldmeq	r0!, {r2, r5, r6, r8, ip}^
 904:	00502000 	subseq	r2, r0, r0
 908:	690f0000 	stmdbvs	pc, {}	; <UNPREDICTABLE>
 90c:	90340100 	eorsls	r0, r4, r0, lsl #2
 910:	02000000 	andeq	r0, r0, #0
 914:	f6117491 			; <UNDEFINED> instruction: 0xf6117491
 918:	38200008 	stmdacc	r0!, {r3}
 91c:	12000000 	andne	r0, r0, #0
 920:	000002fc 	strdeq	r0, [r0], -ip
 924:	00902a01 	addseq	r2, r0, r1, lsl #20
 928:	00130000 	andseq	r0, r3, r0
 92c:	0d000000 	stceq	0, cr0, [r0, #-0]
 930:	00000519 	andeq	r0, r0, r9, lsl r5
 934:	08602001 	stmdaeq	r0!, {r0, sp}^
 938:	007c2000 	rsbseq	r2, ip, r0
 93c:	9c010000 	stcls	0, cr0, [r1], {-0}
 940:	000002cf 	andeq	r0, r0, pc, asr #5
 944:	01006f0e 	tsteq	r0, lr, lsl #30
 948:	00016a20 	andeq	r6, r1, r0, lsr #20
 94c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 950:	0078780f 	rsbseq	r7, r8, pc, lsl #16
 954:	00902101 	addseq	r2, r0, r1, lsl #2
 958:	91020000 	mrsls	r0, (UNDEF: 2)
 95c:	79790f70 	ldmdbvc	r9!, {r4, r5, r6, r8, r9, sl, fp}^
 960:	90210100 	eorls	r0, r1, r0, lsl #2
 964:	02000000 	andeq	r0, r0, #0
 968:	06106c91 			; <UNDEFINED> instruction: 0x06106c91
 96c:	01000005 	tsteq	r0, r5
 970:	0002cf22 	andeq	ip, r2, r2, lsr #30
 974:	6b910200 	blvs	fe44117c <key+0xde440534>
 978:	00050c10 	andeq	r0, r5, r0, lsl ip
 97c:	cf220100 	svcgt	0x00220100
 980:	02000002 	andeq	r0, r0, #2
 984:	74116a91 	ldrvc	r6, [r1], #-2705	; 0xfffff56f
 988:	60200008 	eorvs	r0, r0, r8
 98c:	0f000000 	svceq	0x00000000
 990:	26010069 	strcs	r0, [r1], -r9, rrx
 994:	00000090 	muleq	r0, r0, r0
 998:	11749102 	cmnne	r4, r2, lsl #2
 99c:	2000087a 	andcs	r0, r0, sl, ror r8
 9a0:	00000048 	andeq	r0, r0, r8, asr #32
 9a4:	0002fc12 	andeq	pc, r2, r2, lsl ip	; <UNPREDICTABLE>
 9a8:	902a0100 	eorls	r0, sl, r0, lsl #2
 9ac:	13000000 	movwne	r0, #0
 9b0:	00000000 	andeq	r0, r0, r0
 9b4:	05080104 	streq	r0, [r8, #-260]	; 0xfffffefc
 9b8:	14000001 	strne	r0, [r0], #-1
 9bc:	000005d1 	ldrdeq	r0, [r0], -r1
 9c0:	08401a01 	stmdaeq	r0, {r0, r9, fp, ip}^
 9c4:	00202000 	eoreq	r2, r0, r0
 9c8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9cc:	01006f0e 	tsteq	r0, lr, lsl #30
 9d0:	00016a1a 	andeq	r6, r1, sl, lsl sl
 9d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 9d8:	00052515 	andeq	r2, r5, r5, lsl r5
 9dc:	901a0100 	andsls	r0, sl, r0, lsl #2
 9e0:	02000000 	andeq	r0, r0, #0
 9e4:	12157091 	andsne	r7, r5, #145	; 0x91
 9e8:	01000005 	tsteq	r0, r5
 9ec:	0000901a 	andeq	r9, r0, sl, lsl r0
 9f0:	6c910200 	lfmvs	f0, 4, [r1], {0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00240200 	eoreq	r0, r4, r0, lsl #4
  14:	0b3e0b0b 	bleq	f82c48 <startup-0x1f07d3b8>
  18:	00000e03 	andeq	r0, r0, r3, lsl #28
  1c:	03011303 	movweq	r1, #4867	; 0x1303
  20:	3a0b0b0e 	bcc	2c2c60 <startup-0x1fd3d3a0>
  24:	010b3b0b 	tsteq	fp, fp, lsl #22
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	0b381349 	bleq	e04d60 <startup-0x1f1fb2a0>
  38:	16050000 	strne	r0, [r5], -r0
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	06000013 			; <UNDEFINED> instruction: 0x06000013
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300340d 	movweq	r3, #1037	; 0x40d
  90:	3b0b3a0e 	blcc	2ce8d0 <startup-0x1fd31730>
  94:	3f13490b 	svccc	0x0013490b
  98:	00180219 	andseq	r0, r8, r9, lsl r2
  9c:	00340e00 	eorseq	r0, r4, r0, lsl #28
  a0:	0b3a0e03 	bleq	e838b4 <startup-0x1f17c74c>
  a4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	3f012e0f 	svccc	0x00012e0f
  b0:	3a0e0319 	bcc	380d1c <startup-0x1fc7f2e4>
  b4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  b8:	11134919 	tstne	r3, r9, lsl r9
  bc:	40061201 	andmi	r1, r6, r1, lsl #4
  c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	03000510 	movweq	r0, #1296	; 0x510
  cc:	3b0b3a0e 	blcc	2ce90c <startup-0x1fd316f4>
  d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  d4:	11000018 	tstne	r0, r8, lsl r0
  d8:	08030034 	stmdaeq	r3, {r2, r4, r5}
  dc:	0b3b0b3a 	bleq	ec2dcc <startup-0x1f13d234>
  e0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  e4:	0b120000 	bleq	4800ec <startup-0x1fb7ff14>
  e8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
  ec:	13000006 	movwne	r0, #6
  f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  f4:	0b3a0e03 	bleq	e83908 <startup-0x1f17c6f8>
  f8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  fc:	0000193c 	andeq	r1, r0, ip, lsr r9
 100:	00001814 	andeq	r1, r0, r4, lsl r8
 104:	002e1500 	eoreq	r1, lr, r0, lsl #10
 108:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 10c:	0b3b0b3a 	bleq	ec2dfc <startup-0x1f13d204>
 110:	01111927 	tsteq	r1, r7, lsr #18
 114:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 118:	00194297 	mulseq	r9, r7, r2
 11c:	11010000 	mrsne	r0, (UNDEF: 1)
 120:	130e2501 	movwne	r2, #58625	; 0xe501
 124:	110e030b 	tstne	lr, fp, lsl #6
 128:	10061201 	andne	r1, r6, r1, lsl #4
 12c:	02000017 	andeq	r0, r0, #23
 130:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 134:	0b3a0e03 	bleq	e83948 <startup-0x1f17c6b8>
 138:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 13c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 140:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 144:	00130119 	andseq	r0, r3, r9, lsl r1
 148:	00050300 	andeq	r0, r5, r0, lsl #6
 14c:	0b3a0803 	bleq	e82160 <startup-0x1f17dea0>
 150:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 154:	00001802 	andeq	r1, r0, r2, lsl #16
 158:	0b002404 	bleq	9170 <startup-0x1fff6e90>
 15c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 160:	0500000e 	streq	r0, [r0, #-14]
 164:	0111010b 	tsteq	r1, fp, lsl #2
 168:	00000612 	andeq	r0, r0, r2, lsl r6
 16c:	03003406 	movweq	r3, #1030	; 0x406
 170:	3b0b3a08 	blcc	2ce998 <startup-0x1fd31668>
 174:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 178:	07000018 	smladeq	r0, r8, r0, r0
 17c:	0b0b0024 	bleq	2c0214 <startup-0x1fd3fdec>
 180:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 184:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
 188:	03193f00 	tsteq	r9, #0, 30
 18c:	3b0b3a0e 	blcc	2ce9cc <startup-0x1fd31634>
 190:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 194:	97184006 	ldrls	r4, [r8, -r6]
 198:	00001942 	andeq	r1, r0, r2, asr #18
 19c:	3f002e09 	svccc	0x00002e09
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1a8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1ac:	97184006 	ldrls	r4, [r8, -r6]
 1b0:	00001942 	andeq	r1, r0, r2, asr #18
 1b4:	01110100 	tsteq	r1, r0, lsl #2
 1b8:	0b130e25 	bleq	4c3a54 <startup-0x1fb3c5ac>
 1bc:	01110e03 	tsteq	r1, r3, lsl #28
 1c0:	17100612 			; <UNDEFINED> instruction: 0x17100612
 1c4:	16020000 	strne	r0, [r2], -r0
 1c8:	3a0e0300 	bcc	380dd0 <startup-0x1fc7f230>
 1cc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d0:	03000013 	movweq	r0, #19
 1d4:	0b0b0024 	bleq	2c026c <startup-0x1fd3fd94>
 1d8:	0e030b3e 	vmoveq.16	d3[0], r0
 1dc:	2e040000 	cdpcs	0, 0, cr0, cr4, cr0, {0}
 1e0:	03193f01 	tsteq	r9, #1, 30
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	1119270b 	tstne	r9, fp, lsl #14
 1ec:	40061201 	andmi	r1, r6, r1, lsl #4
 1f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f4:	00001301 	andeq	r1, r0, r1, lsl #6
 1f8:	03000505 	movweq	r0, #1285	; 0x505
 1fc:	3b0b3a08 	blcc	2cea24 <startup-0x1fd315dc>
 200:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 204:	06000018 			; <UNDEFINED> instruction: 0x06000018
 208:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 214:	24070000 	strcs	r0, [r7], #-0
 218:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 21c:	0008030b 	andeq	r0, r8, fp, lsl #6
 220:	010b0800 	tsteq	fp, r0, lsl #16
 224:	06120111 			; <UNDEFINED> instruction: 0x06120111
 228:	34090000 	strcc	r0, [r9], #-0
 22c:	3a080300 	bcc	200e34 <startup-0x1fdff1cc>
 230:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 234:	00180213 	andseq	r0, r8, r3, lsl r2
 238:	002e0a00 	eoreq	r0, lr, r0, lsl #20
 23c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 240:	0b3b0b3a 	bleq	ec2f30 <startup-0x1f13d0d0>
 244:	01111927 	tsteq	r1, r7, lsr #18
 248:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 24c:	00194296 	mulseq	r9, r6, r2
 250:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 254:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 258:	0b3b0b3a 	bleq	ec2f48 <startup-0x1f13d0b8>
 25c:	13491927 	movtne	r1, #39207	; 0x9927
 260:	06120111 			; <UNDEFINED> instruction: 0x06120111
 264:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 268:	00130119 	andseq	r0, r3, r9, lsl r1
 26c:	00050c00 	andeq	r0, r5, r0, lsl #24
 270:	0b3a0e03 	bleq	e83a84 <startup-0x1f17c57c>
 274:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 278:	00001802 	andeq	r1, r0, r2, lsl #16
 27c:	3f012e0d 	svccc	0x00012e0d
 280:	3a0e0319 	bcc	380eec <startup-0x1fc7f114>
 284:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 288:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 28c:	97184006 	ldrls	r4, [r8, -r6]
 290:	13011942 	movwne	r1, #6466	; 0x1942
 294:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 298:	03193f01 	tsteq	r9, #1, 30
 29c:	3b0b3a0e 	blcc	2ceadc <startup-0x1fd31524>
 2a0:	1119270b 	tstne	r9, fp, lsl #14
 2a4:	40061201 	andmi	r1, r6, r1, lsl #4
 2a8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2ac:	01000000 	mrseq	r0, (UNDEF: 0)
 2b0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 2b4:	0e030b13 	vmoveq.32	d3[0], r0
 2b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2bc:	00001710 	andeq	r1, r0, r0, lsl r7
 2c0:	49010102 	stmdbmi	r1, {r1, r8}
 2c4:	00130113 	andseq	r0, r3, r3, lsl r1
 2c8:	00210300 	eoreq	r0, r1, r0, lsl #6
 2cc:	0b2f1349 	bleq	bc4ff8 <startup-0x1f43b008>
 2d0:	26040000 	strcs	r0, [r4], -r0
 2d4:	00134900 	andseq	r4, r3, r0, lsl #18
 2d8:	00240500 	eoreq	r0, r4, r0, lsl #10
 2dc:	0b3e0b0b 	bleq	f82f10 <startup-0x1f07d0f0>
 2e0:	00000e03 	andeq	r0, r0, r3, lsl #28
 2e4:	03003406 	movweq	r3, #1030	; 0x406
 2e8:	3b0b3a08 	blcc	2ceb10 <startup-0x1fd314f0>
 2ec:	3f13490b 	svccc	0x0013490b
 2f0:	00180219 	andseq	r0, r8, r9, lsl r2
 2f4:	012e0700 			; <UNDEFINED> instruction: 0x012e0700
 2f8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2fc:	0b3b0b3a 	bleq	ec2fec <startup-0x1f13d014>
 300:	13491927 	movtne	r1, #39207	; 0x9927
 304:	06120111 			; <UNDEFINED> instruction: 0x06120111
 308:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 30c:	00130119 	andseq	r0, r3, r9, lsl r1
 310:	00340800 	eorseq	r0, r4, r0, lsl #16
 314:	0b3a0803 	bleq	e82328 <startup-0x1f17dcd8>
 318:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 31c:	00001802 	andeq	r1, r0, r2, lsl #16
 320:	0b002409 	bleq	934c <startup-0x1fff6cb4>
 324:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 328:	0a000008 	beq	350 <startup-0x1ffffcb0>
 32c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 330:	0b3a0e03 	bleq	e83b44 <startup-0x1f17c4bc>
 334:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 338:	01111349 	tsteq	r1, r9, asr #6
 33c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 340:	01194297 			; <UNDEFINED> instruction: 0x01194297
 344:	0b000013 	bleq	398 <startup-0x1ffffc68>
 348:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 34c:	0b3a0e03 	bleq	e83b60 <startup-0x1f17c4a0>
 350:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 354:	06120111 			; <UNDEFINED> instruction: 0x06120111
 358:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 35c:	00130119 	andseq	r0, r3, r9, lsl r1
 360:	00050c00 	andeq	r0, r5, r0, lsl #24
 364:	0b3a0803 	bleq	e82378 <startup-0x1f17dc88>
 368:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 36c:	00001802 	andeq	r1, r0, r2, lsl #16
 370:	01110100 	tsteq	r1, r0, lsl #2
 374:	0b130e25 	bleq	4c3c10 <startup-0x1fb3c3f0>
 378:	01110e03 	tsteq	r1, r3, lsl #28
 37c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 380:	13020000 	movwne	r0, #8192	; 0x2000
 384:	0b0e0301 	bleq	380f90 <startup-0x1fc7f070>
 388:	3b0b3a0b 	blcc	2cebbc <startup-0x1fd31444>
 38c:	0013010b 	andseq	r0, r3, fp, lsl #2
 390:	000d0300 	andeq	r0, sp, r0, lsl #6
 394:	0b3a0803 	bleq	e823a8 <startup-0x1f17dc58>
 398:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 39c:	00000b38 	andeq	r0, r0, r8, lsr fp
 3a0:	0b002404 	bleq	93b8 <startup-0x1fff6c48>
 3a4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 3a8:	0500000e 	streq	r0, [r0, #-14]
 3ac:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 3b0:	0b3b0b3a 	bleq	ec30a0 <startup-0x1f13cf60>
 3b4:	00001349 	andeq	r1, r0, r9, asr #6
 3b8:	03000d06 	movweq	r0, #3334	; 0xd06
 3bc:	3b0b3a0e 	blcc	2cebfc <startup-0x1fd31404>
 3c0:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 3c4:	0700000b 	streq	r0, [r0, -fp]
 3c8:	0b0b0024 	bleq	2c0460 <startup-0x1fd3fba0>
 3cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 3d0:	01080000 	mrseq	r0, (UNDEF: 8)
 3d4:	01134901 	tsteq	r3, r1, lsl #18
 3d8:	09000013 	stmdbeq	r0, {r0, r1, r4}
 3dc:	13490021 	movtne	r0, #36897	; 0x9021
 3e0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 3e4:	0b000f0a 	bleq	4014 <startup-0x1fffbfec>
 3e8:	0013490b 	andseq	r4, r3, fp, lsl #18
 3ec:	01150b00 	tsteq	r5, r0, lsl #22
 3f0:	13011927 	movwne	r1, #6439	; 0x1927
 3f4:	050c0000 	streq	r0, [ip, #-0]
 3f8:	00134900 	andseq	r4, r3, r0, lsl #18
 3fc:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 400:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 404:	0b3b0b3a 	bleq	ec30f4 <startup-0x1f13cf0c>
 408:	01111927 	tsteq	r1, r7, lsr #18
 40c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 410:	01194296 			; <UNDEFINED> instruction: 0x01194296
 414:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
 418:	08030005 	stmdaeq	r3, {r0, r2}
 41c:	0b3b0b3a 	bleq	ec310c <startup-0x1f13cef4>
 420:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 424:	340f0000 	strcc	r0, [pc], #-0	; 42c <startup-0x1ffffbd4>
 428:	3a080300 	bcc	201030 <startup-0x1fdfefd0>
 42c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 430:	00180213 	andseq	r0, r8, r3, lsl r2
 434:	00341000 	eorseq	r1, r4, r0
 438:	0b3a0e03 	bleq	e83c4c <startup-0x1f17c3b4>
 43c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 440:	00001802 	andeq	r1, r0, r2, lsl #16
 444:	11010b11 	tstne	r1, r1, lsl fp
 448:	00061201 	andeq	r1, r6, r1, lsl #4
 44c:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
 450:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 454:	0b3b0b3a 	bleq	ec3144 <startup-0x1f13cebc>
 458:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 45c:	18130000 	ldmdane	r3, {}	; <UNPREDICTABLE>
 460:	14000000 	strne	r0, [r0], #-0
 464:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 468:	0b3a0e03 	bleq	e83c7c <startup-0x1f17c384>
 46c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 470:	06120111 			; <UNDEFINED> instruction: 0x06120111
 474:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 478:	15000019 	strne	r0, [r0, #-25]	; 0xffffffe7
 47c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 480:	0b3b0b3a 	bleq	ec3170 <startup-0x1f13ce90>
 484:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 488:	Address 0x00000488 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
  2c:	02920002 	addseq	r0, r2, #2
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	200000e0 	andcs	r0, r0, r0, ror #1
  3c:	000000e0 	andeq	r0, r0, r0, ror #1
	...
  48:	0000001c 	andeq	r0, r0, ip, lsl r0
  4c:	03400002 	movteq	r0, #2
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200001c0 	andcs	r0, r0, r0, asr #3
  5c:	0000057c 	andeq	r0, r0, ip, ror r5
	...
  68:	0000001c 	andeq	r0, r0, ip, lsl r0
  6c:	05fc0002 	ldrbeq	r0, [ip, #2]!
  70:	00040000 	andeq	r0, r4, r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000073c 	andcs	r0, r0, ip, lsr r7
  7c:	00000104 	andeq	r0, r0, r4, lsl #2
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	06e50002 	strbteq	r0, [r5], r2
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000840 	andcs	r0, r0, r0, asr #16
  9c:	000001ea 	andeq	r0, r0, sl, ror #3
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200000e0 	andcs	r0, r0, r0, ror #1
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000000dd 	ldrdeq	r0, [r0], -sp
   4:	009e0002 	addseq	r0, lr, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	4320724d 			; <UNDEFINED> instruction: 0x4320724d
  28:	686e726f 	stmdavs	lr!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
  2c:	6f696c6f 	svcvs	0x00696c6f
  30:	636f442f 	cmnvs	pc, #788529152	; 0x2f000000
  34:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
  38:	542f7374 	strtpl	r7, [pc], #-884	; 40 <startup-0x1fffffc0>
  3c:	65426568 	strbvs	r6, [r2, #-1384]	; 0xfffffa98
  40:	6e4b7365 	cdpvs	3, 4, cr7, cr11, cr5, {3}
  44:	2f736565 	svccs	0x00736565
  48:	2f327241 	svccs	0x00327241
  4c:	30544144 	subscc	r4, r4, r4, asr #2
  50:	4d5f3731 	ldclmi	7, cr3, [pc, #-196]	; ffffff94 <key+0xdffff34c>
  54:	696b7361 	stmdbvs	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  58:	69726f6e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  5c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
  60:	5f646172 	svcpl	0x00646172
  64:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  68:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  6c:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
  70:	2f432f67 	svccs	0x00432f67
  74:	30544144 	subscc	r4, r4, r4, asr #2
  78:	475f3731 	smmlarmi	pc, r1, r7, r3	; <UNPREDICTABLE>
  7c:	2f656d61 	svccs	0x00656d61
  80:	65646953 	strbvs	r6, [r4, #-2387]!	; 0xfffff6ad
  84:	6f726353 	svcvs	0x00726353
  88:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
  8c:	74730000 	ldrbtvc	r0, [r3], #-0
  90:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  94:	00632e70 	rsbeq	r2, r3, r0, ror lr
  98:	6f000001 	svcvs	0x00000001
  9c:	63656a62 	cmnvs	r5, #401408	; 0x62000
  a0:	00682e74 	rsbeq	r2, r8, r4, ror lr
  a4:	00000001 	andeq	r0, r0, r1
  a8:	00020500 	andeq	r0, r2, r0, lsl #10
  ac:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  b0:	130100c1 	movwne	r0, #4289	; 0x10c1
  b4:	0003025e 	andeq	r0, r3, lr, asr r2
  b8:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  bc:	00001002 	andeq	r1, r0, r2
  c0:	00ca0320 	sbceq	r0, sl, r0, lsr #6
  c4:	3d3e2f01 	ldccc	15, cr2, [lr, #-4]!
  c8:	5ae6594b 	bpl	ff9965fc <key+0xdf9959b4>
  cc:	312f3e3d 			; <UNDEFINED> instruction: 0x312f3e3d
  d0:	59596831 	ldmdbpl	r9, {r0, r4, r5, fp, sp, lr}^
  d4:	8383683d 	orrhi	r6, r3, #3997696	; 0x3d0000
  d8:	66760376 			; <UNDEFINED> instruction: 0x66760376
  dc:	01000102 	tsteq	r0, r2, lsl #2
  e0:	0000d901 	andeq	sp, r0, r1, lsl #18
  e4:	90000200 	andls	r0, r0, r0, lsl #4
  e8:	02000000 	andeq	r0, r0, #0
  ec:	0d0efb01 	vstreq	d15, [lr, #-4]
  f0:	01010100 	mrseq	r0, (UNDEF: 17)
  f4:	00000001 	andeq	r0, r0, r1
  f8:	01000001 	tsteq	r0, r1
  fc:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff6c1 <key+0xdfffea79>
 100:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 104:	20724d2f 	rsbscs	r4, r2, pc, lsr #26
 108:	6e726f43 	cdpvs	15, 7, cr6, cr2, cr3, {2}
 10c:	696c6f68 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 110:	6f442f6f 	svcvs	0x00442f6f
 114:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 118:	2f73746e 	svccs	0x0073746e
 11c:	42656854 	rsbmi	r6, r5, #84, 16	; 0x540000
 120:	4b736565 	blmi	1cd96bc <startup-0x1e326944>
 124:	7365656e 	cmnvc	r5, #461373440	; 0x1b800000
 128:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
 12c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 130:	5f373130 	svcpl	0x00373130
 134:	6b73614d 	blvs	1cd8670 <startup-0x1e327990>
 138:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
 13c:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 140:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
 144:	6f72505f 	svcvs	0x0072505f
 148:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 14c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 150:	432f676e 			; <UNDEFINED> instruction: 0x432f676e
 154:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 158:	5f373130 	svcpl	0x00373130
 15c:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 160:	6469532f 	strbtvs	r5, [r9], #-815	; 0xfffffcd1
 164:	72635365 	rsbvc	r5, r3, #-1811939327	; 0x94000001
 168:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 16c:	64000072 	strvs	r0, [r0], #-114	; 0xffffff8e
 170:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 174:	0100632e 	tsteq	r0, lr, lsr #6
 178:	00000000 	andeq	r0, r0, r0
 17c:	00e00205 	rsceq	r0, r0, r5, lsl #4
 180:	2f1a2000 	svccs	0x001a2000
 184:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 188:	01040200 	mrseq	r0, R12_usr
 18c:	75062006 	strvc	r2, [r6, #-6]
 190:	3d2f933d 	stccc	3, cr9, [pc, #-244]!	; a4 <startup-0x1fffff5c>
 194:	003d3d3d 	eorseq	r3, sp, sp, lsr sp
 198:	06010402 	streq	r0, [r1], -r2, lsl #8
 19c:	3d750620 	ldclcc	6, cr0, [r5, #-128]!	; 0xffffff80
 1a0:	02004b93 	andeq	r4, r0, #150528	; 0x24c00
 1a4:	003d0304 	eorseq	r0, sp, r4, lsl #6
 1a8:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 1ac:	01040200 	mrseq	r0, R12_usr
 1b0:	5b063c06 	blpl	18f1d0 <startup-0x1fe70e30>
 1b4:	3f834c4e 	svccc	0x00834c4e
 1b8:	0004024b 	andeq	r0, r4, fp, asr #4
 1bc:	01640101 	cmneq	r4, r1, lsl #2
 1c0:	00020000 	andeq	r0, r2, r0
 1c4:	00000099 	muleq	r0, r9, r0
 1c8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1cc:	0101000d 	tsteq	r1, sp
 1d0:	00000101 	andeq	r0, r0, r1, lsl #2
 1d4:	00000100 	andeq	r0, r0, r0, lsl #2
 1d8:	2f3a4301 	svccs	0x003a4301
 1dc:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1e0:	724d2f73 	subvc	r2, sp, #460	; 0x1cc
 1e4:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 1e8:	6c6f686e 	stclvs	8, cr6, [pc], #-440	; 38 <startup-0x1fffffc8>
 1ec:	442f6f69 	strtmi	r6, [pc], #-3945	; 1f4 <startup-0x1ffffe0c>
 1f0:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 1f4:	73746e65 	cmnvc	r4, #1616	; 0x650
 1f8:	6568542f 	strbvs	r5, [r8, #-1071]!	; 0xfffffbd1
 1fc:	73656542 	cmnvc	r5, #276824064	; 0x10800000
 200:	65656e4b 	strbvs	r6, [r5, #-3659]!	; 0xfffff1b5
 204:	72412f73 	subvc	r2, r1, #460	; 0x1cc
 208:	41442f32 	cmpmi	r4, r2, lsr pc
 20c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 210:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
 214:	6f6e696b 	svcvs	0x006e696b
 218:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 21c:	61726574 	cmnvs	r2, r4, ror r5
 220:	72505f64 	subsvc	r5, r0, #100, 30	; 0x190
 224:	6172676f 	cmnvs	r2, pc, ror #14
 228:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 22c:	2f676e69 	svccs	0x00676e69
 230:	41442f43 	cmpmi	r4, r3, asr #30
 234:	37313054 			; <UNDEFINED> instruction: 0x37313054
 238:	6d61475f 	stclvs	7, cr4, [r1, #-380]!	; 0xfffffe84
 23c:	69532f65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 240:	63536564 	cmpvs	r3, #100, 10	; 0x19000000
 244:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 248:	00007265 	andeq	r7, r0, r5, ror #4
 24c:	70617267 	rsbvc	r7, r1, r7, ror #4
 250:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 254:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 258:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 25c:	00000100 	andeq	r0, r0, r0, lsl #2
 260:	02050000 	andeq	r0, r5, #0
 264:	200001c0 	andcs	r0, r0, r0, asr #3
 268:	67012203 	strvs	r2, [r1, -r3, lsl #4]
 26c:	67778391 			; <UNDEFINED> instruction: 0x67778391
 270:	916883d7 	ldrdls	r8, [r8, #-55]!	; 0xffffffc9
 274:	674d5959 	smlsldvs	r5, sp, r9, r9
 278:	03740e03 	cmneq	r4, #3, 28	; 0x30
 27c:	0e032072 	mcreq	0, 0, r2, cr3, cr2, {3}
 280:	2074034a 	rsbscs	r0, r4, sl, asr #6
 284:	224b223d 	subcs	r2, fp, #-805306365	; 0xd0000003
 288:	223d224b 	eorscs	r2, sp, #-1342177276	; 0xb0000004
 28c:	3d3d2f4d 	ldccc	15, cr2, [sp, #-308]!	; 0xfffffecc
 290:	2f3d304b 	svccs	0x003d304b
 294:	25622f3d 	strbcs	r2, [r2, #-3901]!	; 0xfffff0c3
 298:	be3d3d22 	cdplt	13, 3, cr3, cr13, cr2, {1}
 29c:	3d3d3d67 	ldccc	13, cr3, [sp, #-412]!	; 0xfffffe64
 2a0:	593d3059 	ldmdbpl	sp!, {r0, r3, r4, r6, ip, sp}
 2a4:	3d593f3d 	ldclcc	15, cr3, [r9, #-244]	; 0xffffff0c
 2a8:	313d5932 	teqcc	sp, r2, lsr r9
 2ac:	4b91cb3d 	blmi	fe472fa8 <key+0xde472360>
 2b0:	303d3059 	eorscc	r3, sp, r9, asr r0
 2b4:	313d593f 	teqcc	sp, pc, lsr r9
 2b8:	3d313d59 	ldccc	13, cr3, [r1, #-356]!	; 0xfffffe9c
 2bc:	91773d3d 	cmnls	r7, sp, lsr sp
 2c0:	833d593d 	teqhi	sp, #999424	; 0xf4000
 2c4:	593d914d 	ldmdbpl	sp!, {r0, r2, r3, r6, r8, ip, pc}
 2c8:	674d834b 	strbvs	r8, [sp, -fp, asr #6]
 2cc:	2f4d6759 	svccs	0x004d6759
 2d0:	3e3d3e3d 	mrccc	14, 1, r3, cr13, cr13, {1}
 2d4:	4b4b4b3e 	blmi	12d2fd4 <startup-0x1ed2d02c>
 2d8:	3f3d4c4b 	svccc	0x003d4c4b
 2dc:	4bad3d3d 	blmi	feb4f7d8 <key+0xdeb4eb90>
 2e0:	03040200 	movweq	r0, #16896	; 0x4200
 2e4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2e8:	02004903 	andeq	r4, r0, #49152	; 0xc000
 2ec:	3c060104 	stfccs	f0, [r6], {4}
 2f0:	02040200 	andeq	r0, r4, #0, 4
 2f4:	02003906 	andeq	r3, r0, #98304	; 0x18000
 2f8:	3c060104 	stfccs	f0, [r6], {4}
 2fc:	684d4306 	stmdavs	sp, {r1, r2, r8, r9, lr}^
 300:	ae4ba308 	cdpge	3, 4, cr10, cr11, cr8, {0}
 304:	5a5a5a5a 	bpl	1696c74 <startup-0x1e96938c>
 308:	5a5a5a5a 	bpl	1696c78 <startup-0x1e969388>
 30c:	3d7a3d23 	ldclcc	13, cr3, [sl, #-140]!	; 0xffffff74
 310:	694b764b 	stmdbvs	fp, {r0, r1, r3, r6, r9, sl, ip, sp, lr}^
 314:	c99fd7c9 	ldmibgt	pc, {r0, r3, r6, r7, r8, r9, sl, ip, lr, pc}	; <UNPREDICTABLE>
 318:	039fae3d 	orrseq	sl, pc, #976	; 0x3d0
 31c:	3203ac4f 	andcc	sl, r3, #20224	; 0x4f00
 320:	00060220 	andeq	r0, r6, r0, lsr #4
 324:	00e90101 	rsceq	r0, r9, r1, lsl #2
 328:	00020000 	andeq	r0, r2, r0
 32c:	00000093 	muleq	r0, r3, r0
 330:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 334:	0101000d 	tsteq	r1, sp
 338:	00000101 	andeq	r0, r0, r1, lsl #2
 33c:	00000100 	andeq	r0, r0, r0, lsl #2
 340:	2f3a4301 	svccs	0x003a4301
 344:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 348:	724d2f73 	subvc	r2, sp, #460	; 0x1cc
 34c:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 350:	6c6f686e 	stclvs	8, cr6, [pc], #-440	; 1a0 <startup-0x1ffffe60>
 354:	442f6f69 	strtmi	r6, [pc], #-3945	; 35c <startup-0x1ffffca4>
 358:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 35c:	73746e65 	cmnvc	r4, #1616	; 0x650
 360:	6568542f 	strbvs	r5, [r8, #-1071]!	; 0xfffffbd1
 364:	73656542 	cmnvc	r5, #276824064	; 0x10800000
 368:	65656e4b 	strbvs	r6, [r5, #-3659]!	; 0xfffff1b5
 36c:	72412f73 	subvc	r2, r1, #460	; 0x1cc
 370:	41442f32 	cmpmi	r4, r2, lsr pc
 374:	37313054 			; <UNDEFINED> instruction: 0x37313054
 378:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
 37c:	6f6e696b 	svcvs	0x006e696b
 380:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 384:	61726574 	cmnvs	r2, r4, ror r5
 388:	72505f64 	subsvc	r5, r0, #100, 30	; 0x190
 38c:	6172676f 	cmnvs	r2, pc, ror #14
 390:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 394:	2f676e69 	svccs	0x00676e69
 398:	41442f43 	cmpmi	r4, r3, asr #30
 39c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 3a0:	6d61475f 	stclvs	7, cr4, [r1, #-380]!	; 0xfffffe84
 3a4:	69532f65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 3a8:	63536564 	cmpvs	r3, #100, 10	; 0x19000000
 3ac:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 3b0:	00007265 	andeq	r7, r0, r5, ror #4
 3b4:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 3b8:	6472616f 	ldrbtvs	r6, [r2], #-367	; 0xfffffe91
 3bc:	0100632e 	tsteq	r0, lr, lsr #6
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	073c0205 	ldreq	r0, [ip, -r5, lsl #4]!
 3c8:	0a032000 	beq	c83d0 <startup-0x1ff37c30>
 3cc:	4b914d01 	blmi	fe4537d8 <key+0xde452b90>
 3d0:	4c4b4b4b 	mcrrmi	11, 4, r4, fp, cr11
 3d4:	004b4176 	subeq	r4, fp, r6, ror r1
 3d8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3dc:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3e0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3e4:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3e8:	06010402 	streq	r0, [r1], -r2, lsl #8
 3ec:	002f0658 	eoreq	r0, pc, r8, asr r6	; <UNPREDICTABLE>
 3f0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3f4:	2f2f0658 	svccs	0x002f0658
 3f8:	4b3d3e76 	blmi	f4fdd8 <startup-0x1f0b0228>
 3fc:	00593d4b 	subseq	r3, r9, fp, asr #26
 400:	6f020402 	svcvs	0x00020402
 404:	01040200 	mrseq	r0, R12_usr
 408:	44063c06 	strmi	r3, [r6], #-3078	; 0xfffff3fa
 40c:	0702213d 	smladxeq	r2, sp, r1, r2
 410:	11010100 	mrsne	r0, (UNDEF: 17)
 414:	02000001 	andeq	r0, r0, #1
 418:	00009100 	andeq	r9, r0, r0, lsl #2
 41c:	fb010200 	blx	40c26 <startup-0x1ffbf3da>
 420:	01000d0e 	tsteq	r0, lr, lsl #26
 424:	00010101 	andeq	r0, r1, r1, lsl #2
 428:	00010000 	andeq	r0, r1, r0
 42c:	3a430100 	bcc	10c0834 <startup-0x1ef3f7cc>
 430:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 434:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 274 <startup-0x1ffffd8c>
 438:	6f432072 	svcvs	0x00432072
 43c:	6f686e72 	svcvs	0x00686e72
 440:	2f6f696c 	svccs	0x006f696c
 444:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 448:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 44c:	68542f73 	ldmdavs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 450:	65654265 	strbvs	r4, [r5, #-613]!	; 0xfffffd9b
 454:	656e4b73 	strbvs	r4, [lr, #-2931]!	; 0xfffff48d
 458:	412f7365 			; <UNDEFINED> instruction: 0x412f7365
 45c:	442f3272 	strtmi	r3, [pc], #-626	; 464 <startup-0x1ffffb9c>
 460:	31305441 	teqcc	r0, r1, asr #8
 464:	614d5f37 	cmpvs	sp, r7, lsr pc
 468:	6e696b73 	vmovvs.8	d9[7], r6
 46c:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 470:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 474:	505f6461 	subspl	r6, pc, r1, ror #8
 478:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 47c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 480:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 484:	442f432f 	strtmi	r4, [pc], #-815	; 48c <startup-0x1ffffb74>
 488:	31305441 	teqcc	r0, r1, asr #8
 48c:	61475f37 	cmpvs	r7, r7, lsr pc
 490:	532f656d 			; <UNDEFINED> instruction: 0x532f656d
 494:	53656469 	cmnpl	r5, #1761607680	; 0x69000000
 498:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; 314 <startup-0x1ffffcec>
 49c:	0072656c 	rsbseq	r6, r2, ip, ror #10
 4a0:	6a626f00 	bvs	189c0a8 <startup-0x1e763f58>
 4a4:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 4a8:	00010063 	andeq	r0, r1, r3, rrx
 4ac:	05000000 	streq	r0, [r0, #-0]
 4b0:	00084002 	andeq	r4, r8, r2
 4b4:	01190320 	tsteq	r9, r0, lsr #6
 4b8:	4d3d3d67 	ldcmi	13, cr3, [sp, #-412]!	; 0xfffffe64
 4bc:	003e3d4d 	eorseq	r3, lr, sp, asr #26
 4c0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 4c4:	03040200 	movweq	r0, #16896	; 0x4200
 4c8:	040200ad 	streq	r0, [r2], #-173	; 0xffffff53
 4cc:	0200ae03 	andeq	sl, r0, #3, 28	; 0x30
 4d0:	00d20304 	sbcseq	r0, r2, r4, lsl #6
 4d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4d8:	4d6c063c 	stclmi	6, cr0, [ip, #-240]!	; 0xffffff10
 4dc:	003e3d4c 	eorseq	r3, lr, ip, asr #26
 4e0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 4e4:	03040200 	movweq	r0, #16896	; 0x4200
 4e8:	04020091 	streq	r0, [r2], #-145	; 0xffffff6f
 4ec:	02009203 	andeq	r9, r0, #805306368	; 0x30000000
 4f0:	009a0304 	addseq	r0, sl, r4, lsl #6
 4f4:	06010402 	streq	r0, [r1], -r2, lsl #8
 4f8:	4d6c063c 	stclmi	6, cr0, [ip, #-240]!	; 0xffffff10
 4fc:	02004c4b 	andeq	r4, r0, #19200	; 0x4b00
 500:	4a060104 	bmi	180918 <startup-0x1fe7f6e8>
 504:	003d8306 	eorseq	r8, sp, r6, lsl #6
 508:	06010402 	streq	r0, [r1], -r2, lsl #8
 50c:	3e83064a 	cdpcc	6, 8, cr0, cr3, cr10, {2}
 510:	4c4b7675 	mcrrmi	6, 7, r7, fp, cr5
 514:	02004c59 	andeq	r4, r0, #22784	; 0x5900
 518:	4a060104 	bmi	180930 <startup-0x1fe7f6d0>
 51c:	5d598306 	ldclpl	3, cr8, [r9, #-24]	; 0xffffffe8
 520:	024b7675 	subeq	r7, fp, #122683392	; 0x7500000
 524:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  10:	736e7500 	cmnvc	lr, #0, 10
  14:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  18:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  1c:	6e650074 	mcrvs	0, 3, r0, cr5, cr4, {3}
  20:	5f796d65 	svcpl	0x00796d65
  24:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; fffffe90 <key+0xdffff248>
  28:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  2c:	7a697300 	bvc	1a5cc34 <startup-0x1e5a33cc>
  30:	70007865 	andvc	r7, r0, r5, ror #16
  34:	656a6f72 	strbvs	r6, [sl, #-3954]!	; 0xfffff08e
  38:	6c697463 	cfstrdvs	mvd7, [r9], #-396	; 0xfffffe74
  3c:	65730065 	ldrbvs	r0, [r3, #-101]!	; 0xffffff9b
  40:	70735f74 	rsbsvc	r5, r3, r4, ror pc
  44:	00646565 	rsbeq	r6, r4, r5, ror #10
  48:	63677261 	cmnvs	r7, #268435462	; 0x10000006
  4c:	6f507400 	svcvs	0x00507400
  50:	00746e69 	rsbseq	r6, r4, r9, ror #28
  54:	6a6f7270 	bvs	1bdca1c <startup-0x1e4235e4>
  58:	72696400 	rsbvc	r6, r9, #0, 8
  5c:	4e470078 	mcrmi	0, 2, r0, cr7, cr8, {3}
  60:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  64:	2e362039 	mrccs	0, 1, r2, cr6, cr9, {1}
  68:	20312e33 	eorscs	r2, r1, r3, lsr lr
  6c:	37313032 			; <UNDEFINED> instruction: 0x37313032
  70:	30323630 	eorscc	r3, r2, r0, lsr r6
  74:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  78:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  7c:	5b202965 	blpl	80a618 <startup-0x1f7f59e8>
  80:	2f4d5241 	svccs	0x004d5241
  84:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  88:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  8c:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  90:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  94:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  98:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  9c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  a0:	33343934 	teqcc	r4, #52, 18	; 0xd0000
  a4:	2d205d37 	stccs	13, cr5, [r0, #-220]!	; 0xffffff24
  a8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  ac:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  b0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  b4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  b8:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  bc:	6d2d206d 	stcvs	0, cr2, [sp, #-436]!	; 0xfffffe4c
  c0:	616f6c66 	cmnvs	pc, r6, ror #24
  c4:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  c8:	6f733d69 	svcvs	0x00733d69
  cc:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  d0:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  d4:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  d8:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  dc:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  e0:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  e4:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  e8:	304f2d20 	subcc	r2, pc, r0, lsr #26
  ec:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  f0:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
  f4:	69730039 	ldmdbvs	r3!, {r0, r3, r4, r5}^
  f8:	0079657a 	rsbseq	r6, r9, sl, ror r5
  fc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 100:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 104:	61686320 	cmnvs	r8, r0, lsr #6
 108:	47500072 			; <UNDEFINED> instruction: 0x47500072
 10c:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 110:	00595254 	subseq	r5, r9, r4, asr r2
 114:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 118:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 11c:	70615f74 	rsbvc	r5, r1, r4, ror pc
 120:	47740070 			; <UNDEFINED> instruction: 0x47740070
 124:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 128:	00797274 	rsbseq	r7, r9, r4, ror r2
 12c:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 130:	61747300 	cmnvs	r4, r0, lsl #6
 134:	70757472 	rsbsvc	r7, r5, r2, ror r4
 138:	616c7000 	cmnvs	ip, r0
 13c:	5f726579 	svcpl	0x00726579
 140:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffffac <key+0xdffff364>
 144:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 148:	6f727000 	svcvs	0x00727000
 14c:	65675f6a 	strbvs	r5, [r7, #-3946]!	; 0xfffff096
 150:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 154:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 158:	00797269 	rsbseq	r7, r9, r9, ror #4
 15c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 160:	6e007265 	cdpvs	2, 0, cr7, cr0, cr5, {3}
 164:	6f706d75 	svcvs	0x00706d75
 168:	73746e69 	cmnvc	r4, #1680	; 0x690
 16c:	424f5000 	submi	r5, pc, #0
 170:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 174:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 178:	6973006e 	ldmdbvs	r3!, {r1, r2, r3, r5, r6}^
 17c:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 180:	6d006570 	cfstr32vs	mvfx6, [r0, #-448]	; 0xfffffe40
 184:	0065766f 	rsbeq	r7, r5, pc, ror #12
 188:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 18c:	3a430054 	bcc	10c02e4 <startup-0x1ef3fd1c>
 190:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 194:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; ffffffd4 <key+0xdffff38c>
 198:	6f432072 	svcvs	0x00432072
 19c:	6f686e72 	svcvs	0x00686e72
 1a0:	2f6f696c 	svccs	0x006f696c
 1a4:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1a8:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1ac:	68542f73 	ldmdavs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 1b0:	65654265 	strbvs	r4, [r5, #-613]!	; 0xfffffd9b
 1b4:	656e4b73 	strbvs	r4, [lr, #-2931]!	; 0xfffff48d
 1b8:	412f7365 			; <UNDEFINED> instruction: 0x412f7365
 1bc:	442f3272 	strtmi	r3, [pc], #-626	; 1c4 <startup-0x1ffffe3c>
 1c0:	31305441 	teqcc	r0, r1, asr #8
 1c4:	614d5f37 	cmpvs	sp, r7, lsr pc
 1c8:	6e696b73 	vmovvs.8	d9[7], r6
 1cc:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 1d0:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 1d4:	505f6461 	subspl	r6, pc, r1, ror #8
 1d8:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 1dc:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 1e0:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 1e4:	442f432f 	strtmi	r4, [pc], #-815	; 1ec <startup-0x1ffffe14>
 1e8:	31305441 	teqcc	r0, r1, asr #8
 1ec:	61475f37 	cmpvs	r7, r7, lsr pc
 1f0:	532f656d 			; <UNDEFINED> instruction: 0x532f656d
 1f4:	53656469 	cmnpl	r5, #1761607680	; 0x69000000
 1f8:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; 74 <startup-0x1fffff8c>
 1fc:	2f72656c 	svccs	0x0072656c
 200:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 204:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 208:	6f700063 	svcvs	0x00700063
 20c:	74007873 	strvc	r7, [r0], #-2163	; 0xfffff78d
 210:	006a624f 	rsbeq	r6, sl, pc, asr #4
 214:	616c6564 	cmnvs	ip, r4, ror #10
 218:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 21c:	006f726b 	rsbeq	r7, pc, fp, ror #4
 220:	616c6564 	cmnvs	ip, r4, ror #10
 224:	30355f79 	eorscc	r5, r5, r9, ror pc
 228:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 22c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7f1 <key+0xdfffeba9>
 230:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 234:	20724d2f 	rsbscs	r4, r2, pc, lsr #26
 238:	6e726f43 	cdpvs	15, 7, cr6, cr2, cr3, {2}
 23c:	696c6f68 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 240:	6f442f6f 	svcvs	0x00442f6f
 244:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 248:	2f73746e 	svccs	0x0073746e
 24c:	42656854 	rsbmi	r6, r5, #84, 16	; 0x540000
 250:	4b736565 	blmi	1cd97ec <startup-0x1e326814>
 254:	7365656e 	cmnvc	r5, #461373440	; 0x1b800000
 258:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
 25c:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 260:	5f373130 	svcpl	0x00373130
 264:	6b73614d 	blvs	1cd87a0 <startup-0x1e327860>
 268:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
 26c:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 270:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
 274:	6f72505f 	svcvs	0x0072505f
 278:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 27c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 280:	432f676e 			; <UNDEFINED> instruction: 0x432f676e
 284:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 288:	5f373130 	svcpl	0x00373130
 28c:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 290:	6469532f 	strbtvs	r5, [r9], #-815	; 0xfffffcd1
 294:	72635365 	rsbvc	r5, r3, #-1811939327	; 0x94000001
 298:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 29c:	65642f72 	strbvs	r2, [r4, #-3954]!	; 0xfffff08e
 2a0:	2e79616c 	rpwcsez	f6, f1, #4.0
 2a4:	65640063 	strbvs	r0, [r4, #-99]!	; 0xffffff9d
 2a8:	5f79616c 	svcpl	0x0079616c
 2ac:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 2b0:	72670073 	rsbvc	r0, r7, #115	; 0x73
 2b4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2b8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 2bc:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 2c0:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 2c4:	635f7465 	cmpvs	pc, #1694498816	; 0x65000000
 2c8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2cc:	61726700 	cmnvs	r2, r0, lsl #14
 2d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2d4:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 2d8:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 2dc:	616d6d6f 	cmnvs	sp, pc, ror #26
 2e0:	6300646e 	movwvs	r6, #1134	; 0x46e
 2e4:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2e8:	72670078 	rsbvc	r0, r7, #120	; 0x78
 2ec:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f0:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2f4:	645f6461 	ldrbvs	r6, [pc], #-1121	; 2fc <startup-0x1ffffd04>
 2f8:	00617461 	rsbeq	r7, r1, r1, ror #8
 2fc:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 300:	3a43006c 	bcc	10c04b8 <startup-0x1ef3fb48>
 304:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 308:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; 148 <startup-0x1ffffeb8>
 30c:	6f432072 	svcvs	0x00432072
 310:	6f686e72 	svcvs	0x00686e72
 314:	2f6f696c 	svccs	0x006f696c
 318:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 31c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 320:	68542f73 	ldmdavs	r4, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 324:	65654265 	strbvs	r4, [r5, #-613]!	; 0xfffffd9b
 328:	656e4b73 	strbvs	r4, [lr, #-2931]!	; 0xfffff48d
 32c:	412f7365 			; <UNDEFINED> instruction: 0x412f7365
 330:	442f3272 	strtmi	r3, [pc], #-626	; 338 <startup-0x1ffffcc8>
 334:	31305441 	teqcc	r0, r1, asr #8
 338:	614d5f37 	cmpvs	sp, r7, lsr pc
 33c:	6e696b73 	vmovvs.8	d9[7], r6
 340:	6569726f 	strbvs	r7, [r9, #-623]!	; 0xfffffd91
 344:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 348:	505f6461 	subspl	r6, pc, r1, ror #8
 34c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 350:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 354:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 358:	442f432f 	strtmi	r4, [pc], #-815	; 360 <startup-0x1ffffca0>
 35c:	31305441 	teqcc	r0, r1, asr #8
 360:	61475f37 	cmpvs	r7, r7, lsr pc
 364:	532f656d 			; <UNDEFINED> instruction: 0x532f656d
 368:	53656469 	cmnpl	r5, #1761607680	; 0x69000000
 36c:	6c6f7263 	sfmvs	f7, 2, [pc], #-396	; 1e8 <startup-0x1ffffe18>
 370:	2f72656c 	svccs	0x0072656c
 374:	70617267 	rsbvc	r7, r1, r7, ror #4
 378:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
 37c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 380:	632e7961 			; <UNDEFINED> instruction: 0x632e7961
 384:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 388:	5f780078 	svcpl	0x00780078
 38c:	69737966 	ldmdbvs	r3!, {r1, r2, r5, r6, r8, fp, ip, sp, lr}^
 390:	67006b73 	smlsdxvs	r0, r3, fp, r6
 394:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 398:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 39c:	5f746961 	svcpl	0x00746961
 3a0:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3a4:	72670079 	rsbvc	r0, r7, #121	; 0x79
 3a8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3ac:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 3b0:	5f657469 	svcpl	0x00657469
 3b4:	61746164 	cmnvs	r4, r4, ror #2
 3b8:	73616d00 	cmnvc	r1, #0, 26
 3bc:	6975006b 	ldmdbvs	r5!, {r0, r1, r3, r5, r6}^
 3c0:	5f38746e 	svcpl	0x0038746e
 3c4:	72670074 	rsbvc	r0, r7, #116	; 0x74
 3c8:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3cc:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 3d0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 3d4:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 3d8:	67007465 	strvs	r7, [r0, -r5, ror #8]
 3dc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3e0:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 3e4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 3e8:	6c657300 	stclvs	3, cr7, [r5], #-0
 3ec:	5f746365 	svcpl	0x00746365
 3f0:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 3f4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 3f8:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 3fc:	00706d65 	rsbseq	r6, r0, r5, ror #26
 400:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 404:	72670078 	rsbvc	r0, r7, #120	; 0x78
 408:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 40c:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 410:	67006461 	strvs	r6, [r0, -r1, ror #8]
 414:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 418:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 41c:	5f6c7274 	svcpl	0x006c7274
 420:	5f746962 	svcpl	0x00746962
 424:	61656c63 	cmnvs	r5, r3, ror #24
 428:	61700072 	cmnvs	r0, r2, ror r0
 42c:	76006567 	strvc	r6, [r0], -r7, ror #10
 430:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 434:	61726700 	cmnvs	r2, r0, lsl #14
 438:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 43c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 440:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 444:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 448:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 44c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 450:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 454:	61697469 	cmnvs	r9, r9, ror #8
 458:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 45c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 460:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 464:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
 468:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 46c:	6b006e6d 	blvs	1be28 <startup-0x1ffe41d8>
 470:	6f627965 	svcvs	0x00627965
 474:	00647261 	rsbeq	r7, r4, r1, ror #4
 478:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa3d <key+0xdfffedf5>
 47c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 480:	20724d2f 	rsbscs	r4, r2, pc, lsr #26
 484:	6e726f43 	cdpvs	15, 7, cr6, cr2, cr3, {2}
 488:	696c6f68 	stmdbvs	ip!, {r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 48c:	6f442f6f 	svcvs	0x00442f6f
 490:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 494:	2f73746e 	svccs	0x0073746e
 498:	42656854 	rsbmi	r6, r5, #84, 16	; 0x540000
 49c:	4b736565 	blmi	1cd9a38 <startup-0x1e3265c8>
 4a0:	7365656e 	cmnvc	r5, #461373440	; 0x1b800000
 4a4:	3272412f 	rsbscc	r4, r2, #-1073741813	; 0xc000000b
 4a8:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 4ac:	5f373130 	svcpl	0x00373130
 4b0:	6b73614d 	blvs	1cd89ec <startup-0x1e327614>
 4b4:	726f6e69 	rsbvc	r6, pc, #1680	; 0x690
 4b8:	746e6569 	strbtvc	r6, [lr], #-1385	; 0xfffffa97
 4bc:	64617265 	strbtvs	r7, [r1], #-613	; 0xfffffd9b
 4c0:	6f72505f 	svcvs	0x0072505f
 4c4:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 4c8:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 4cc:	432f676e 			; <UNDEFINED> instruction: 0x432f676e
 4d0:	5441442f 	strbpl	r4, [r1], #-1071	; 0xfffffbd1
 4d4:	5f373130 	svcpl	0x00373130
 4d8:	656d6147 	strbvs	r6, [sp, #-327]!	; 0xfffffeb9
 4dc:	6469532f 	strbtvs	r5, [r9], #-815	; 0xfffffcd1
 4e0:	72635365 	rsbvc	r5, r3, #-1811939327	; 0x94000001
 4e4:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 4e8:	656b2f72 	strbvs	r2, [fp, #-3954]!	; 0xfffff08e
 4ec:	616f6279 	smcvs	63017	; 0xf629
 4f0:	632e6472 			; <UNDEFINED> instruction: 0x632e6472
 4f4:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 4f8:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 4fc:	74634164 	strbtvc	r4, [r3], #-356	; 0xfffffe9c
 500:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 504:	666f0065 	strbtvs	r0, [pc], -r5, rrx
 508:	00787366 	rsbseq	r7, r8, r6, ror #6
 50c:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 510:	70730079 	rsbsvc	r0, r3, r9, ror r0
 514:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 518:	61726400 	cmnvs	r2, r0, lsl #8
 51c:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 520:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 524:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 528:	00786465 	rsbseq	r6, r8, r5, ror #8
 52c:	61656c63 	cmnvs	r5, r3, ror #24
 530:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 534:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 538:	2f3a4300 	svccs	0x003a4300
 53c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 540:	724d2f73 	subvc	r2, sp, #460	; 0x1cc
 544:	726f4320 	rsbvc	r4, pc, #32, 6	; 0x80000000
 548:	6c6f686e 	stclvs	8, cr6, [pc], #-440	; 398 <startup-0x1ffffc68>
 54c:	442f6f69 	strtmi	r6, [pc], #-3945	; 554 <startup-0x1ffffaac>
 550:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 554:	73746e65 	cmnvc	r4, #1616	; 0x650
 558:	6568542f 	strbvs	r5, [r8, #-1071]!	; 0xfffffbd1
 55c:	73656542 	cmnvc	r5, #276824064	; 0x10800000
 560:	65656e4b 	strbvs	r6, [r5, #-3659]!	; 0xfffff1b5
 564:	72412f73 	subvc	r2, r1, #460	; 0x1cc
 568:	41442f32 	cmpmi	r4, r2, lsr pc
 56c:	37313054 			; <UNDEFINED> instruction: 0x37313054
 570:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
 574:	6f6e696b 	svcvs	0x006e696b
 578:	6e656972 			; <UNDEFINED> instruction: 0x6e656972
 57c:	61726574 	cmnvs	r2, r4, ror r5
 580:	72505f64 	subsvc	r5, r0, #100, 30	; 0x190
 584:	6172676f 	cmnvs	r2, pc, ror #14
 588:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 58c:	2f676e69 	svccs	0x00676e69
 590:	41442f43 	cmpmi	r4, r3, asr #30
 594:	37313054 			; <UNDEFINED> instruction: 0x37313054
 598:	6d61475f 	stclvs	7, cr4, [r1, #-380]!	; 0xfffffe84
 59c:	69532f65 	ldmdbvs	r3, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
 5a0:	63536564 	cmpvs	r3, #100, 10	; 0x19000000
 5a4:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 5a8:	6f2f7265 	svcvs	0x002f7265
 5ac:	63656a62 	cmnvs	r5, #401408	; 0x62000
 5b0:	00632e74 	rsbeq	r2, r3, r4, ror lr
 5b4:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 5b8:	6f72705f 	svcvs	0x0072705f
 5bc:	626f5f6a 	rsbvs	r5, pc, #424	; 0x1a8
 5c0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5c4:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 5c8:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 5cc:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5d0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 5d4:	6a626f5f 	bvs	189c358 <startup-0x1e763ca8>
 5d8:	5f746365 	svcpl	0x00746365
 5dc:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 5e0:	Address 0x000005e0 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d32 	rsbsvc	r2, r5, r2, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	30323630 	eorscc	r3, r2, r0, lsr r6
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	33343934 	teqcc	r4, #52, 18	; 0xd0000
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000040 	andeq	r0, r0, r0, asr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000020 	andeq	r0, r0, r0, lsr #32
  40:	00000000 	andeq	r0, r0, r0
  44:	20000050 	andcs	r0, r0, r0, asr r0
  48:	00000090 	muleq	r0, r0, r0
  4c:	400c0e41 	andmi	r0, ip, r1, asr #28
  50:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  54:	018e4002 	orreq	r4, lr, r2
  58:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
  5c:	0000070d 	andeq	r0, r0, sp, lsl #14
  60:	0000000c 	andeq	r0, r0, ip
  64:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  68:	7c020001 	stcvc	0, cr0, [r2], {1}
  6c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  70:	00000018 	andeq	r0, r0, r8, lsl r0
  74:	00000060 	andeq	r0, r0, r0, rrx
  78:	200000e0 	andcs	r0, r0, r0, ror #1
  7c:	00000044 	andeq	r0, r0, r4, asr #32
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  8c:	00000018 	andeq	r0, r0, r8, lsl r0
  90:	00000060 	andeq	r0, r0, r0, rrx
  94:	20000124 	andcs	r0, r0, r4, lsr #2
  98:	00000044 	andeq	r0, r0, r4, asr #32
  9c:	40080e41 	andmi	r0, r8, r1, asr #28
  a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  a8:	0000001c 	andeq	r0, r0, ip, lsl r0
  ac:	00000060 	andeq	r0, r0, r0, rrx
  b0:	20000168 	andcs	r0, r0, r8, ror #2
  b4:	0000002a 	andeq	r0, r0, sl, lsr #32
  b8:	40080e41 	andmi	r0, r8, r1, asr #28
  bc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c0:	180e4101 	stmdane	lr, {r0, r8, lr}
  c4:	00070d41 	andeq	r0, r7, r1, asr #26
  c8:	0000001c 	andeq	r0, r0, ip, lsl r0
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	20000192 	mulcs	r0, r2, r1
  d4:	0000002e 	andeq	r0, r0, lr, lsr #32
  d8:	40080e41 	andmi	r0, r8, r1, asr #28
  dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e0:	100e4101 	andne	r4, lr, r1, lsl #2
  e4:	00070d41 	andeq	r0, r7, r1, asr #26
  e8:	0000000c 	andeq	r0, r0, ip
  ec:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  f0:	7c020001 	stcvc	0, cr0, [r2], {1}
  f4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	000000e8 	andeq	r0, r0, r8, ror #1
 100:	200001c0 	andcs	r0, r0, r0, asr #3
 104:	0000003c 	andeq	r0, r0, ip, lsr r0
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	000000e8 	andeq	r0, r0, r8, ror #1
 120:	200001fc 	strdcs	r0, [r0], -ip
 124:	00000044 	andeq	r0, r0, r4, asr #32
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	000000e8 	andeq	r0, r0, r8, ror #1
 140:	20000240 	andcs	r0, r0, r0, asr #4
 144:	0000002e 	andeq	r0, r0, lr, lsr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	000000e8 	andeq	r0, r0, r8, ror #1
 160:	2000026e 	andcs	r0, r0, lr, ror #4
 164:	00000052 	andeq	r0, r0, r2, asr r0
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	00000018 	andeq	r0, r0, r8, lsl r0
 17c:	000000e8 	andeq	r0, r0, r8, ror #1
 180:	200002c0 	andcs	r0, r0, r0, asr #5
 184:	00000064 	andeq	r0, r0, r4, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	000000e8 	andeq	r0, r0, r8, ror #1
 19c:	20000324 	andcs	r0, r0, r4, lsr #6
 1a0:	00000090 	muleq	r0, r0, r0
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	000000e8 	andeq	r0, r0, r8, ror #1
 1bc:	200003b4 			; <UNDEFINED> instruction: 0x200003b4
 1c0:	00000080 	andeq	r0, r0, r0, lsl #1
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	000000e8 	andeq	r0, r0, r8, ror #1
 1dc:	20000434 	andcs	r0, r0, r4, lsr r4
 1e0:	00000040 	andeq	r0, r0, r0, asr #32
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	000000e8 	andeq	r0, r0, r8, ror #1
 1fc:	20000474 	andcs	r0, r0, r4, ror r4
 200:	00000042 	andeq	r0, r0, r2, asr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	000000e8 	andeq	r0, r0, r8, ror #1
 21c:	200004b6 			; <UNDEFINED> instruction: 0x200004b6
 220:	0000002a 	andeq	r0, r0, sl, lsr #32
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	100e4101 	andne	r4, lr, r1, lsl #2
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	000000e8 	andeq	r0, r0, r8, ror #1
 23c:	200004e0 	andcs	r0, r0, r0, ror #9
 240:	00000056 	andeq	r0, r0, r6, asr r0
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 250:	0000001c 	andeq	r0, r0, ip, lsl r0
 254:	000000e8 	andeq	r0, r0, r8, ror #1
 258:	20000536 	andcs	r0, r0, r6, lsr r5
 25c:	00000058 	andeq	r0, r0, r8, asr r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	100e4101 	andne	r4, lr, r1, lsl #2
 26c:	00070d41 	andeq	r0, r7, r1, asr #26
 270:	00000020 	andeq	r0, r0, r0, lsr #32
 274:	000000e8 	andeq	r0, r0, r8, ror #1
 278:	2000058e 	andcs	r0, r0, lr, lsl #11
 27c:	000001ae 	andeq	r0, r0, lr, lsr #3
 280:	400c0e41 	andmi	r0, ip, r1, asr #28
 284:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 288:	018e4002 	orreq	r4, lr, r2
 28c:	41300e41 	teqmi	r0, r1, asr #28
 290:	0000070d 	andeq	r0, r0, sp, lsl #14
 294:	0000000c 	andeq	r0, r0, ip
 298:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 29c:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a8:	00000294 	muleq	r0, r4, r2
 2ac:	2000073c 	andcs	r0, r0, ip, lsr r7
 2b0:	00000050 	andeq	r0, r0, r0, asr r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	100e4101 	andne	r4, lr, r1, lsl #2
 2c0:	00070d41 	andeq	r0, r7, r1, asr #26
 2c4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c8:	00000294 	muleq	r0, r4, r2
 2cc:	2000078c 	andcs	r0, r0, ip, lsl #15
 2d0:	00000058 	andeq	r0, r0, r8, asr r0
 2d4:	40080e41 	andmi	r0, r8, r1, asr #28
 2d8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2dc:	100e4101 	andne	r4, lr, r1, lsl #2
 2e0:	00070d41 	andeq	r0, r7, r1, asr #26
 2e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e8:	00000294 	muleq	r0, r4, r2
 2ec:	200007e4 	andcs	r0, r0, r4, ror #15
 2f0:	0000005c 	andeq	r0, r0, ip, asr r0
 2f4:	40080e41 	andmi	r0, r8, r1, asr #28
 2f8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2fc:	100e4101 	andne	r4, lr, r1, lsl #2
 300:	00070d41 	andeq	r0, r7, r1, asr #26
 304:	0000000c 	andeq	r0, r0, ip
 308:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 30c:	7c020001 	stcvc	0, cr0, [r2], {1}
 310:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 314:	0000001c 	andeq	r0, r0, ip, lsl r0
 318:	00000304 	andeq	r0, r0, r4, lsl #6
 31c:	20000840 	andcs	r0, r0, r0, asr #16
 320:	00000020 	andeq	r0, r0, r0, lsr #32
 324:	40080e41 	andmi	r0, r8, r1, asr #28
 328:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 32c:	180e4101 	stmdane	lr, {r0, r8, lr}
 330:	00070d41 	andeq	r0, r7, r1, asr #26
 334:	0000001c 	andeq	r0, r0, ip, lsl r0
 338:	00000304 	andeq	r0, r0, r4, lsl #6
 33c:	20000860 	andcs	r0, r0, r0, ror #16
 340:	0000007c 	andeq	r0, r0, ip, ror r0
 344:	40080e41 	andmi	r0, r8, r1, asr #28
 348:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 34c:	200e4101 	andcs	r4, lr, r1, lsl #2
 350:	00070d41 	andeq	r0, r7, r1, asr #26
 354:	0000001c 	andeq	r0, r0, ip, lsl r0
 358:	00000304 	andeq	r0, r0, r4, lsl #6
 35c:	200008dc 	ldrdcs	r0, [r0], -ip
 360:	0000006c 	andeq	r0, r0, ip, rrx
 364:	40080e41 	andmi	r0, r8, r1, asr #28
 368:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 36c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 370:	00070d41 	andeq	r0, r7, r1, asr #26
 374:	0000001c 	andeq	r0, r0, ip, lsl r0
 378:	00000304 	andeq	r0, r0, r4, lsl #6
 37c:	20000948 	andcs	r0, r0, r8, asr #18
 380:	00000078 	andeq	r0, r0, r8, ror r0
 384:	40080e41 	andmi	r0, r8, r1, asr #28
 388:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 38c:	100e4101 	andne	r4, lr, r1, lsl #2
 390:	00070d41 	andeq	r0, r7, r1, asr #26
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	00000304 	andeq	r0, r0, r4, lsl #6
 39c:	200009c0 	andcs	r0, r0, r0, asr #19
 3a0:	0000006a 	andeq	r0, r0, sl, rrx
 3a4:	40080e41 	andmi	r0, r8, r1, asr #28
 3a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3ac:	100e4101 	andne	r4, lr, r1, lsl #2
 3b0:	00070d41 	andeq	r0, r7, r1, asr #26
 3b4:	0000000c 	andeq	r0, r0, ip
 3b8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 3bc:	7c010001 	stcvc	0, cr0, [r1], {1}
 3c0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 3c4:	0000000c 	andeq	r0, r0, ip
 3c8:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
 3cc:	20000a2d 	andcs	r0, r0, sp, lsr #20
 3d0:	0000010a 	andeq	r0, r0, sl, lsl #2
